# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Composer VERSION\n"
"POT-Creation-Date: 2023-01-14 16:11+0900\n"
"PO-Revision-Date: 2023-02-11 13:06+0900\n"
"Last-Translator: gemmaro <gemmaro.dev@gmail.com>\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: ../doc/02-libraries.md:1
#, no-wrap
msgid "Libraries"
msgstr "ライブラリ"

#. type: Plain text
#: ../doc/02-libraries.md:5
msgid ""
"This chapter will tell you how to make your library installable through "
"Composer."
msgstr ""
"この章では、ライブラリをComposerでインストールできるようにする方法をお話しま"
"す。"

#. type: Title ##
#: ../doc/02-libraries.md:6
#, no-wrap
msgid "Every project is a package"
msgstr "全てのプロジェクトはパッケージである"

#. type: Plain text
#: ../doc/02-libraries.md:12
msgid ""
"As soon as you have a `composer.json` in a directory, that directory is a "
"package. When you add a [`require`](04-schema.md#require) to a project, you "
"are making a package that depends on other packages. The only difference "
"between your project and a library is that your project is a package without "
"a name."
msgstr ""
"`composer.json`をディレクトリに配置した時点で、そのディレクトリはパッケージと"
"なります。\n"
"[`require`](04-schema.md#require)をプロジェクトに追加する場合は他のパッケージ"
"に依存したパッケージを作っています。\n"
"プロジェクトとライブラリの唯一の違いは、プロジェクトは名前のないパッケージだ"
"ということです。"

#. type: Plain text
#: ../doc/02-libraries.md:15
msgid ""
"In order to make that package installable you need to give it a name. You do "
"this by adding the [`name`](04-schema.md#name) property in `composer.json`:"
msgstr ""
"インストール可能なパッケージを作成するためには名前をつける必要があります。\n"
"これには`composer.json`に[`name`プロパティ](04-schema.md#name)を追加してくだ"
"さい。"

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:16
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/hello-world\",\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"
msgstr ""
"{\n"
"    \"name\": \"acme/hello-world\",\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"

#. type: Plain text
#: ../doc/02-libraries.md:27
msgid ""
"In this case the project name is `acme/hello-world`, where `acme` is the "
"vendor name. Supplying a vendor name is mandatory."
msgstr ""
"この例では、プロジェクト名は`acme/hello-world`です。\n"
"`acme`はベンダー名です。\n"
"ベンダー名を与えることは必須です。"

#. type: Plain text
#: ../doc/02-libraries.md:31
#, no-wrap
msgid ""
"> **Note:** If you don't know what to use as a vendor name, your GitHub\n"
"> username is usually a good bet. Package names must be lowercase, and the\n"
"> convention is to use dashes for word separation.\n"
msgstr ""
"> **注意：** もしベンダー名に何をつけていいかわからない場合は、大抵は自分のGitHubの利用者名をつけるといいでしょう。\n"
"> パッケージ名は全て小文字でなければならず、単語の区切りはダッシュにするのが慣習です。\n"

#. type: Title ##
#: ../doc/02-libraries.md:32
#, no-wrap
msgid "Library Versioning"
msgstr "ライブラリのバージョン"

#. type: Plain text
#: ../doc/02-libraries.md:40
msgid ""
"In the vast majority of cases, you will be maintaining your library using "
"some sort of version control system like git, svn, hg or fossil. In these "
"cases, Composer infers versions from your VCS, and you **should not** "
"specify a version in your `composer.json` file. (See the [Versions article]"
"(articles/versions.md)  to learn about how Composer uses VCS branches and "
"tags to resolve version constraints.)"
msgstr ""
"まず間違いなくgit, svn, hg, fossilといった何らかの類のバージョン管理システム"
"を使ってライブラリを管理することでしょう。\n"
"こうした場合ComposerはVCSからバージョンを推定するので`composer.json`ファイル"
"ではバージョンを指定すべきでは**ありません**。\n"
"（ComposerがVCSのブランチとタグを使ってバージョン制約を解決する方法について学"
"ぶためには[バージョンについての記事](articles/versions.md)を参照してくださ"
"い。）"

#. type: Plain text
#: ../doc/02-libraries.md:44
msgid ""
"If you are maintaining packages by hand (i.e., without a VCS), you'll need "
"to specify the version explicitly by adding a `version` value in your "
"`composer.json` file:"
msgstr ""
"パッケージの管理を手作業でしている（つまりVCSなし）場合、`composer.json`ファ"
"イルに`version`値を加えることでバージョンを明示的に指定する必要があるでしょ"
"う。"

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:45
#, no-wrap
msgid ""
"{\n"
"    \"version\": \"1.0.0\"\n"
"}\n"
msgstr ""
"{\n"
"    \"version\": \"1.0.0\"\n"
"}\n"

#. type: Plain text
#: ../doc/02-libraries.md:53
#, no-wrap
msgid ""
"> **Note:** When you add a hardcoded version to a VCS, the version will conflict\n"
"> with tag names. Composer will not be able to determine the version number.\n"
msgstr "> **補足：** VCSに埋め込まれたバージョンを加えた場合、バージョンはタグ名と干渉することでしょう。そうするとComposerはバージョン値を決定できなくなります。\n"

#. type: Title ###
#: ../doc/02-libraries.md:54
#, no-wrap
msgid "VCS Versioning"
msgstr "VCSのバージョン管理"

#. type: Plain text
#: ../doc/02-libraries.md:61
msgid ""
"Composer uses your VCS's branch and tag features to resolve the version "
"constraints you specify in your [`require`](04-schema.md#require) field to "
"specific sets of files.  When determining valid available versions, Composer "
"looks at all of your tags and branches and translates their names into an "
"internal list of options that it then matches against the version constraint "
"you provided."
msgstr ""
"ComposerはVCSのブランチとタグの機能を使って[`require`](04-schema.md#require)"
"フィールドで指定したバージョン制約を特定のファイルの集まりまで解決します。\n"
"利用できる妥当なバージョンを決定する際、Composerは全てのタグとブランチを見て"
"それらの名前を内部的なオプションの一覧に翻訳し、それから与えられたバージョン"
"制約に対して照合します。"

#. type: Plain text
#: ../doc/02-libraries.md:64
msgid ""
"For more on how Composer treats tags and branches and how it resolves "
"package version constraints, read the [versions](articles/versions.md) "
"article."
msgstr ""
"Composerがタグとブランチを扱う方法とパッケージのバージョン制約を解決する方法"
"についての詳細は[バージョン](articles/versions.md)の記事をお読みください。"

#. type: Title ##
#: ../doc/02-libraries.md:65
#, no-wrap
msgid "Lock file"
msgstr "ロックファイル"

#. type: Plain text
#: ../doc/02-libraries.md:71
msgid ""
"For your library you may commit the `composer.lock` file if you want to. "
"This can help your team to always test against the same dependency "
"versions.  However, this lock file will not have any effect on other "
"projects that depend on it. It only has an effect on the main project."
msgstr ""
"お望みならライブラリに`composer.lock`ファイルをコミットできます。\n"
"これはチームが常に同じ依存バージョンでテストする際の助けになります。\n"
"しかし、このロックファイルはこれに依存している他のプロジェクトにいかなる影響"
"ももたらしません。\n"
"これはメインのプロジェクトのみに影響します。"

#. type: Plain text
#: ../doc/02-libraries.md:74
msgid ""
"If you do not want to commit the lock file, and you are using git, add it to "
"the `.gitignore`."
msgstr ""
"もしロックファイルをコミットしたくなくて、且つgitを使っている場合は、`."
"gitignore`に追加してください。"

#. type: Title ##
#: ../doc/02-libraries.md:75
#, no-wrap
msgid "Publishing to a VCS"
msgstr "VCSに公開する"

#. type: Plain text
#: ../doc/02-libraries.md:81
msgid ""
"Once you have a VCS repository (version control system, e.g. git) containing "
"a `composer.json` file, your library is already composer-installable. In "
"this example we will publish the `acme/hello-world` library on GitHub under "
"`github.com/username/hello-world`."
msgstr ""
"`composer.json`ファイルを含むVCSリポジトリ（バージョン管理システム、例えば"
"git）があれば、ライブラリはすでにcomposerでインストール可能です。\n"
"この例ではGitHubで`acme/hello-world`ライブラリを`github.com/username/hello-"
"world`として公開するとしましょう。"

#. type: Plain text
#: ../doc/02-libraries.md:87
msgid ""
"Now, to test installing the `acme/hello-world` package, we create a new "
"project locally. We will call it `acme/blog`. This blog will depend on `acme/"
"hello-world`, which in turn depends on `monolog/monolog`. We can accomplish "
"this by creating a new `blog` directory somewhere, containing a `composer."
"json`:"
msgstr ""
"それでは`acme/hello-world`パッケージのインストールを試すためにローカルに新し"
"いプロジェクトを作成しましょう。\n"
"私たちはそれを`acme/blog`とよぶことにします。\n"
"このブログは`acme/hello-world`に依存し、それはさらに`monolog/monolog`に依存し"
"ています。\n"
"これは以下の`composer.json`を含む新しい`blog`ディレクトリを作成することで達成"
"されます。"

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:88
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"

#. type: Plain text
#: ../doc/02-libraries.md:100
msgid ""
"The name is not needed in this case, since we don't want to publish the blog "
"as a library. It is added here to clarify which `composer.json` is being "
"described."
msgstr ""
"名前はこの場合必須ではありません。\n"
"このブログをライブラリとして公開することはないからです。\n"
"ここではどの`composer.json`が説明されているのかを明確にするために加えられてい"
"ます。"

#. type: Plain text
#: ../doc/02-libraries.md:104
msgid ""
"Now we need to tell the blog app where to find the `hello-world` "
"dependency.  We do this by adding a package repository specification to the "
"blog's `composer.json`:"
msgstr ""
"このブログアプリに依存物`hello-world`がどこで見つけられるのか知らせる必要があ"
"ります。\n"
"これにはパッケージのリポジトリ指定をこのブログの`composer.json`に追加します。"

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:105
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/username/hello-world\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/username/hello-world\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"

#. type: Plain text
#: ../doc/02-libraries.md:122
msgid ""
"For more details on how package repositories work and what other types are "
"available, see [Repositories](05-repositories.md)."
msgstr ""
"パッケージリポジトリの挙動や他にどのようなタイプが利用できるかについての詳細"
"は、[リポジトリ](05-repositories.md)を参照してください。"

#. type: Plain text
#: ../doc/02-libraries.md:125
msgid ""
"That's all. You can now install the dependencies by running Composer's "
"[`install`](03-cli.md#install) command!"
msgstr ""
"これで全てです。\n"
"Composerの[`install`](03-cli.md#install)コマンドを実行することで、 依存関係を"
"インストールすることができます！"

#. type: Plain text
#: ../doc/02-libraries.md:129
#, no-wrap
msgid ""
"**Recap:** Any git/svn/hg/fossil repository containing a `composer.json` can be\n"
"added to your project by specifying the package repository and declaring the\n"
"dependency in the [`require`](04-schema.md#require) field.\n"
msgstr "**まとめ：** `composer.json`を含むあらゆるgit/svn/hg/fossilリポジトリはパッケージリポジトリを指定し`require`フィールドで依存関係を宣言することで、プロジェクトに追加することができます。\n"

#. type: Title ##
#: ../doc/02-libraries.md:130
#, no-wrap
msgid "Publishing to packagist"
msgstr "Packagistに公開する"

#. type: Plain text
#: ../doc/02-libraries.md:134
msgid ""
"Alright, so now you can publish packages. But specifying the VCS repository "
"every time is cumbersome. You don't want to force all your users to do that."
msgstr ""
"よろしい、今やパッケージを公開できるようになりました。\n"
"しかし、毎回VCSリポジトリを指定するのはやっかいなことです。\n"
"全てのユーザにそんなことはさせたくないでしょう。"

#. type: Plain text
#: ../doc/02-libraries.md:137
msgid ""
"The other thing that you may have noticed is that we did not specify a "
"package repository for `monolog/monolog`. How did that work? The answer is "
"Packagist."
msgstr ""
"`monolog/monolog`のためのパッケージリポジトリを指定しなかったこととにお気付き"
"かもしれません。\n"
"これはどのような仕組みなのでしょうか？\n"
"答えはPackagistです。"

#. type: Plain text
#: ../doc/02-libraries.md:143
msgid ""
"[Packagist](https://packagist.org/) is the main package repository for "
"Composer, and it is enabled by default. Anything that is published on "
"Packagist is available automatically through Composer. Since [Monolog is on "
"Packagist](https://packagist.org/packages/monolog/monolog), we can depend on "
"it without having to specify any additional repositories."
msgstr ""
"[Packagist](https://packagist.org/)はComposerのメインパッケージリポジトリ"
"で、 デフォルトで有効になっています。\n"
"Packagistで公開されている全てのものは自動的にComposerで利用可能です。\n"
"[monologはPackagistにある](https://packagist.org/packages/monolog/monolog)の"
"で、追加のリポジトリ指定なくして依存できるのです。"

#. type: Plain text
#: ../doc/02-libraries.md:146
msgid ""
"If we wanted to share `hello-world` with the world, we would publish it on "
"Packagist as well."
msgstr ""
"`hello-world`を世界に共有したければ、同様にPackagistに公開するのがよいでしょ"
"う。"

#. type: Plain text
#: ../doc/02-libraries.md:152
msgid ""
"You visit [Packagist](https://packagist.org) and hit the \"Submit\" button. "
"This will prompt you to sign up if you haven't already, and then allows you "
"to submit the URL to your VCS repository, at which point Packagist will "
"start crawling it. Once it is done, your package will be available to anyone!"
msgstr ""
"[Packagist](https://packagist.org)を開いて\"Submit\"ボタンを押します。\n"
"まだサインアップしていなかったらその旨の表示がされます。\n"
"それからVCSリポジトリのURLを送信することができます。\n"
"送信した時点でPackagistはクローリングをはじめます。\n"
"完了すると、パッケージは誰でも使えるようになります！"

#. type: Plain text
#: ../doc/02-libraries.md:153
msgid ""
"&larr; [Basic usage](01-basic-usage.md) | [Command-line interface](03-cli."
"md) &rarr;"
msgstr ""
"&larr; [基本的な使い方](01-basic-usage.md) |  [コマンドラインインターフェー"
"ス](03-cli.md) &rarr;"
