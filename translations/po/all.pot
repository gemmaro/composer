# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-05-03 11:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../README.md:7
#, no-wrap
msgid ""
"<p align=\"center\">\n"
"    <a href=\"https://getcomposer.org\">\n"
"        <img src=\"https://getcomposer.org/img/logo-composer-transparent.png\" alt=\"Composer\">\n"
"    </a>\n"
"</p>\n"
"<h1 align=\"center\">Dependency Management for PHP</h1>\n"
msgstr ""

#. type: Plain text
#: ../README.md:9
msgid ""
"Composer helps you declare, manage, and install dependencies of PHP projects."
msgstr ""

#. type: Plain text
#: ../README.md:11
msgid ""
"See [https://getcomposer.org/](https://getcomposer.org/) for more "
"information and documentation."
msgstr ""

#. type: Plain text
#: ../README.md:13
msgid ""
"[![Continuous Integration](https://github.com/composer/composer/workflows/"
"Continuous%20Integration/badge.svg?branch=main)](https://github.com/composer/"
"composer/actions)"
msgstr ""

#. type: Title -
#: ../README.md:15
#, no-wrap
msgid "Installation / Usage"
msgstr ""

#. type: Plain text
#: ../README.md:18
msgid ""
"Download and install Composer by following the [official instructions]"
"(https://getcomposer.org/download/)."
msgstr ""

#. type: Plain text
#: ../README.md:20
msgid "For usage, see [the documentation](https://getcomposer.org/doc/)."
msgstr ""

#. type: Title -
#: ../README.md:22
#, no-wrap
msgid "Packages"
msgstr ""

#. type: Plain text
#: ../README.md:25
msgid "Find public packages on [Packagist.org](https://packagist.org)."
msgstr ""

#. type: Plain text
#: ../README.md:27
msgid ""
"For private package hosting take a look at [Private Packagist](https://"
"packagist.com)."
msgstr ""

#. type: Title #
#: ../README.md:29 ../doc/08-community.md:1
#, no-wrap
msgid "Community"
msgstr ""

#. type: Plain text
#: ../README.md:32
msgid ""
"Follow [@packagist](https://twitter.com/packagist) or [@seldaek](https://"
"twitter.com/seldaek) on Twitter for announcements, or check the "
"[#composerphp](https://twitter.com/search?"
"q=%23composerphp&src=typed_query&f=live) hashtag."
msgstr ""

#. type: Plain text
#: ../README.md:35
msgid ""
"For support, Stack Overflow offers a good collection of [Composer related "
"questions](https://stackoverflow.com/questions/tagged/composer-php), or you "
"can use the [GitHub discussions](https://github.com/composer/composer/"
"discussions)."
msgstr ""

#. type: Plain text
#: ../README.md:39
msgid ""
"Please note that this project is released with a [Contributor Code of "
"Conduct](https://www.contributor-covenant.org/version/1/4/code-of-"
"conduct/).  By participating in this project and its community you agree to "
"abide by those terms."
msgstr ""

#. type: Title -
#: ../README.md:41
#, no-wrap
msgid "Requirements"
msgstr ""

#. type: Title ####
#: ../README.md:43
#, no-wrap
msgid "Latest Composer"
msgstr ""

#. type: Plain text
#: ../README.md:46
msgid "PHP 7.2.5 or above for the latest version."
msgstr ""

#. type: Title ####
#: ../README.md:47
#, no-wrap
msgid "Composer 2.2 LTS (Long Term Support)"
msgstr ""

#. type: Plain text
#: ../README.md:52
msgid ""
"PHP versions 5.3.2 - 8.1 are still supported via the LTS releases of "
"Composer (2.2.x). If you run the installer or the `self-update` command the "
"appropriate Composer version for your PHP should be automatically selected."
msgstr ""

#. type: Title ####
#: ../README.md:53
#, no-wrap
msgid "Binary dependencies"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`7z` (or `7zz`)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`unzip` (if `7z` is missing)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`gzip`"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`tar`"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`unrar`"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "`xz`"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "Git (`git`)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "Mercurial (`hg`)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "Fossil (`fossil`)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "Perforce (`p4`)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:66
msgid "Subversion (`svn`)"
msgstr ""

#. type: Plain text
#: ../README.md:70
msgid ""
"It's important to note that the need for these binary dependencies may vary "
"depending on individual use cases. However, for most users, only 2 "
"dependencies are essential for Composer: `7z` (or `7zz` or `unzip`), and "
"`git`."
msgstr ""

#. type: Title -
#: ../README.md:72
#, no-wrap
msgid "Authors"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:76
msgid ""
"Nils Adermann | [GitHub](https://github.com/naderman)  | [Twitter](https://"
"twitter.com/naderman) | <naderman@naderman.de> | [naderman.de](https://"
"naderman.de)"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:76
msgid ""
"Jordi Boggiano | [GitHub](https://github.com/Seldaek) | [Twitter](https://"
"twitter.com/seldaek) | <j.boggiano@seld.be> | [seld.be](https://seld.be)"
msgstr ""

#. type: Plain text
#: ../README.md:78
msgid ""
"See also the list of [contributors](https://github.com/composer/composer/"
"contributors) who participated in this project."
msgstr ""

#. type: Title -
#: ../README.md:80
#, no-wrap
msgid "Security Reports"
msgstr ""

#. type: Plain text
#: ../README.md:83
msgid ""
"Please send any sensitive issue to [security@packagist.org](mailto:"
"security@packagist.org). Thanks!"
msgstr ""

#. type: Title -
#: ../README.md:85
#, no-wrap
msgid "License"
msgstr ""

#. type: Plain text
#: ../README.md:88
msgid ""
"Composer is licensed under the MIT License - see the [LICENSE](LICENSE) file "
"for details."
msgstr ""

#. type: Title -
#: ../README.md:90
#, no-wrap
msgid "Acknowledgments"
msgstr ""

#. type: Bullet: '- '
#: ../README.md:93
msgid ""
"This project's Solver started out as a PHP port of openSUSE's [Libzypp "
"satsolver](https://en.opensuse.org/openSUSE:Libzypp_satsolver)."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:1 ../doc/01-basic-usage.md:3
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:6
msgid ""
"Composer is a tool for dependency management in PHP. It allows you to "
"declare the libraries your project depends on and it will manage (install/"
"update) them for you."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:7
#, no-wrap
msgid "Dependency management"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:15
msgid ""
"Composer is **not** a package manager in the same sense as Yum or Apt are. "
"Yes, it deals with \"packages\" or libraries, but it manages them on a per-"
"project basis, installing them in a directory (e.g. `vendor`) inside your "
"project. By default, it does not install anything globally. Thus, it is a "
"dependency manager. It does however support a \"global\" project for "
"convenience via the [global](03-cli.md#global) command."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:18
msgid ""
"This idea is not new and Composer is strongly inspired by node's [npm]"
"(https://www.npmjs.com/) and ruby's [bundler](https://bundler.io/)."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:20
msgid "Suppose:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/00-intro.md:23
msgid "You have a project that depends on a number of libraries."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/00-intro.md:23
msgid "Some of those libraries depend on other libraries."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:25
msgid "Composer:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/00-intro.md:30
msgid "Enables you to declare the libraries you depend on."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/00-intro.md:30
msgid ""
"Finds out which versions of which packages can and need to be installed, and "
"installs them (meaning it downloads them into your project)."
msgstr ""

#. type: Bullet: '3. '
#: ../doc/00-intro.md:30
msgid "You can update all your dependencies in one command."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:33
msgid ""
"See the [Basic usage](01-basic-usage.md) chapter for more details on "
"declaring dependencies."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:34
#, no-wrap
msgid "System Requirements"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:41
msgid ""
"Composer in its latest version requires PHP 7.2.5 to run. A long-term-"
"support version (2.2.x) still offers support for PHP 5.3.2+ in case you are "
"stuck with a legacy PHP version. A few sensitive php settings and compile "
"flags are also required, but when using the installer you will be warned "
"about any incompatibilities."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:50
msgid ""
"Composer needs several supporting applications to work effectively, making "
"the process of handling package dependencies more efficient. For "
"decompressing files, Composer relies on tools like `7z` (or `7zz`), `gzip`, "
"`tar`, `unrar`, `unzip` and `xz`. As for version control systems, Composer "
"integrates seamlessly with Fossil, Git, Mercurial, Perforce and Subversion, "
"thereby ensuring the application's smooth operation and management of "
"library repositories. Before using Composer, ensure that these dependencies "
"are correctly installed on your system."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:53
msgid ""
"Composer is multi-platform and we strive to make it run equally well on "
"Windows, Linux and macOS."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:54
#, no-wrap
msgid "Installation - Linux / Unix / macOS"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:56
#, no-wrap
msgid "Downloading the Composer Executable"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:63
msgid ""
"Composer offers a convenient installer that you can execute directly from "
"the command line. Feel free to [download this file](https://getcomposer.org/"
"installer)  or review it on [GitHub](https://github.com/composer/getcomposer."
"org/blob/main/web/installer)  if you wish to know more about the inner "
"workings of the installer. The source is plain PHP."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:66
msgid ""
"There are, in short, two ways to install Composer. Locally as part of your "
"project, or globally as a system wide executable."
msgstr ""

#. type: Title ####
#: ../doc/00-intro.md:67
#, no-wrap
msgid "Locally"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:71
msgid ""
"To install Composer locally, run the installer in your project directory. "
"See [the Download page](https://getcomposer.org/download/) for instructions."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:76
msgid ""
"The installer will check a few PHP settings and then download `composer."
"phar` to your working directory. This file is the Composer binary. It is a "
"PHAR (PHP archive), which is an archive format for PHP which can be run on "
"the command line, amongst other things."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:78
msgid "Now run `php composer.phar` in order to run Composer."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:84
msgid ""
"You can install Composer to a specific directory by using the `--install-"
"dir` option and additionally (re)name it as well using the `--filename` "
"option. When running the installer when following [the Download page "
"instructions](https://getcomposer.org/download/) add the following "
"parameters:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:85
#, no-wrap
msgid "php composer-setup.php --install-dir=bin --filename=composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:90
msgid "Now run `php bin/composer` in order to run Composer."
msgstr ""

#. type: Title ####
#: ../doc/00-intro.md:91
#, no-wrap
msgid "Globally"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:97
msgid ""
"You can place the Composer PHAR anywhere you wish. If you put it in a "
"directory that is part of your `PATH`, you can access it globally. On Unix "
"systems you can even make it executable and invoke it without directly using "
"the `php` interpreter."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:100
msgid ""
"After running the installer following [the Download page instructions]"
"(https://getcomposer.org/download/)  you can run this to move composer.phar "
"to a directory that is in your path:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:101
#, no-wrap
msgid "mv composer.phar /usr/local/bin/composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:108
msgid ""
"If you like to install it only for your user and avoid requiring root "
"permissions, you can use `~/.local/bin` instead which is available by "
"default on some Linux distributions."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:111
#, no-wrap
msgid ""
"> **Note:** If the above fails due to permissions, you may need to run it again\n"
"> with `sudo`.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:116
#, no-wrap
msgid ""
"> **Note:** On some versions of macOS the `/usr` directory does not exist by\n"
"> default. If you receive the error \"/usr/local/bin/composer: No such file or\n"
"> directory\" then you must create the directory manually before proceeding:\n"
"> `mkdir -p /usr/local/bin`.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:120
#, no-wrap
msgid ""
"> **Note:** For information on changing your PATH, please read the\n"
"> [Wikipedia article](https://en.wikipedia.org/wiki/PATH_(variable)) and/or use\n"
"> your search engine of choice.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:122
msgid ""
"Now run `composer` in order to run Composer instead of `php composer.phar`."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:123
#, no-wrap
msgid "Installation - Windows"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:125
#, no-wrap
msgid "Using the Installer"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:128
msgid "This is the easiest way to get Composer set up on your machine."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:133
msgid ""
"Download and run [Composer-Setup.exe](https://getcomposer.org/Composer-Setup."
"exe). It will install the latest Composer version and set up your PATH so "
"that you can call `composer` from any directory in your command line."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:136
#, no-wrap
msgid ""
"> **Note:** Close your current terminal. Test usage with a new terminal: This is\n"
"> important since the PATH only gets loaded when the terminal starts.\n"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:137
#, no-wrap
msgid "Manual Installation"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:142
msgid ""
"Change to a directory on your `PATH` and run the installer following [the "
"Download page instructions](https://getcomposer.org/download/)  to download "
"`composer.phar`."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:144
msgid "Create a new `composer.bat` file alongside `composer.phar`:"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:146
msgid "Using cmd.exe:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:147
#, no-wrap
msgid "C:\\bin> echo @php \"%~dp0composer.phar\" %*>composer.bat\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:152
msgid "Using PowerShell:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:153
#, no-wrap
msgid "PS C:\\bin> Set-Content composer.bat '@php \"%~dp0composer.phar\" %*'\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:161
msgid ""
"Add the directory to your PATH environment variable if it isn't already.  "
"For information on changing your PATH variable, please see [this article]"
"(https://www.computerhope.com/issues/ch000549.htm) and/or use your search "
"engine of choice."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:163
msgid "Close your current terminal. Test usage with a new terminal:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:164
#, no-wrap
msgid "C:\\Users\\username>composer -V\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/00-intro.md:167
#, no-wrap
msgid "Composer version 2.4.0 2022-08-16 16:10:48\n"
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:171
#, no-wrap
msgid "Docker Image"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:174
msgid ""
"Composer is published as Docker container in a few places, see the list in "
"the [composer/docker README](https://github.com/composer/docker)."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:176
msgid "Example usage:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:177
#, no-wrap
msgid ""
"docker pull composer/composer\n"
"docker run --rm -it -v \"$(pwd):/app\" composer/composer install\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:183
msgid ""
"To add Composer to an existing **Dockerfile** you can simply copy binary "
"file from pre-built, low-size images:"
msgstr ""

#. type: Fenced code block (Dockerfile)
#: ../doc/00-intro.md:184
#, no-wrap
msgid ""
"# Latest release\n"
"COPY --from=composer/composer:latest-bin /composer /usr/bin/composer\n"
"\n"
"# Specific release\n"
"COPY --from=composer/composer:2-bin /composer /usr/bin/composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:193
msgid ""
"Read the [image description](https://hub.docker.com/r/composer/composer) for "
"further usage information."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:195
#, no-wrap
msgid "**Note:** Docker specific issues should be filed [on the composer/docker repository](https://github.com/composer/docker/issues).\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:197
#, no-wrap
msgid "**Note:** You may also use `composer` instead of `composer/composer` as image name above. It is shorter and is a Docker official image but is not published directly by us and thus usually receives new releases with a delay of a few days. **Important**: short-aliased images don't have binary-only equivalents, so for `COPY --from` approach it's better to use `composer/composer` ones.\n"
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:198
#, no-wrap
msgid "Using Composer"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:202
msgid ""
"Now that you've installed Composer, you are ready to use it! Head on over to "
"the next chapter for a short demonstration."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:203
msgid "[Basic usage](01-basic-usage.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/01-basic-usage.md:1
#, no-wrap
msgid "Basic usage"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:8
msgid ""
"For our basic usage introduction, we will be installing `monolog/monolog`, a "
"logging library. If you have not yet installed Composer, refer to the [Intro]"
"(00-intro.md) chapter."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:11
#, no-wrap
msgid ""
"> **Note:** for the sake of simplicity, this introduction will assume you\n"
"> have performed a [local](00-intro.md#locally) install of Composer.\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:12
#, no-wrap
msgid "`composer.json`: Project setup"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:20
msgid ""
"To start using Composer in your project, all you need is a `composer.json` "
"file. This file describes the dependencies of your project and may contain "
"other metadata as well. It typically should go in the top-most directory of "
"your project/VCS repository. You can technically run Composer anywhere but "
"if you want to publish a package to Packagist.org, it will have to be able "
"to find the file at the top of your VCS repository."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:21
#, no-wrap
msgid "The `require` key"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:26
msgid ""
"The first thing you specify in `composer.json` is the [`require`](04-schema."
"md#require) key. You are telling Composer which packages your project "
"depends on."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:27
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"2.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:38
msgid ""
"As you can see, [`require`](04-schema.md#require) takes an object that maps "
"**package names** (e.g. `monolog/monolog`) to **version constraints** (e.g.  "
"`1.0.*`)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:46
msgid ""
"Composer uses this information to search for the right set of files in "
"package \"repositories\" that you register using the [`repositories`](04-"
"schema.md#repositories)  key, or in [Packagist.org](https://packagist.org), "
"the default package repository.  In the above example, since no other "
"repository has been registered in the `composer.json` file, it is assumed "
"that the `monolog/monolog` package is registered on Packagist.org. (Read "
"more [about Packagist](#packagist), and [about repositories](05-repositories."
"md))."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:47
#, no-wrap
msgid "Package names"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:53
msgid ""
"The package name consists of a vendor name and the project's name. Often "
"these will be identical - the vendor name only exists to prevent naming "
"clashes. For example, it would allow two different people to create a "
"library named `json`.  One might be named `igorw/json` while the other might "
"be `seldaek/json`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:58
msgid ""
"Read more about [publishing packages and package naming](02-libraries.md).  "
"(Note that you can also specify \"platform packages\" as dependencies, "
"allowing you to require certain versions of server software. See [platform "
"packages](#platform-packages) below.)"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:59
#, no-wrap
msgid "Package version constraints"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:65
#, no-wrap
msgid ""
"In our example, we are requesting the Monolog package with the version constraint\n"
"[`2.0.*`](https://semver.madewithlove.com/?package=monolog%2Fmonolog&constraint=2.0.*).\n"
"This means any version in the `2.0` development branch, or any version that is\n"
"greater than or equal to 2.0 and less than 2.1 (`>=2.0 <2.1`).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:68
msgid ""
"Please read [versions](articles/versions.md) for more in-depth information "
"on versions, how versions relate to each other, and on version constraints."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:80
#, no-wrap
msgid ""
"> **How does Composer download the right files?** When you specify a dependency in\n"
"> `composer.json`, Composer first takes the name of the package that you have requested\n"
"> and searches for it in any repositories that you have registered using the\n"
"> [`repositories`](04-schema.md#repositories) key. If you have not registered\n"
"> any extra repositories, or it does not find a package with that name in the\n"
"> repositories you have specified, it falls back to Packagist.org (more [below](#packagist)).\n"
">\n"
"> When Composer finds the right package, either in Packagist.org or in a repo you have specified,\n"
"> it then uses the versioning features of the package's VCS (i.e., branches and tags)\n"
"> to attempt to find the best match for the version constraint you have specified. Be sure to read\n"
"> about versions and package resolution in the [versions article](articles/versions.md).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:89
#, no-wrap
msgid ""
"> **Note:** If you are trying to require a package but Composer throws an error\n"
"> regarding package stability, the version you have specified may not meet your\n"
"> default minimum stability requirements. By default, only stable releases are taken\n"
"> into consideration when searching for valid package versions in your VCS.\n"
">\n"
"> You might run into this if you are trying to require dev, alpha, beta, or RC\n"
"> versions of a package. Read more about stability flags and the `minimum-stability`\n"
"> key on the [schema page](04-schema.md).\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:90
#, no-wrap
msgid "Installing dependencies"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:94
msgid ""
"To initially install the defined dependencies for your project, you should "
"run the [`update`](03-cli.md#update-u) command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:95 ../doc/01-basic-usage.md:170
#: ../doc/03-cli.md:145
#, no-wrap
msgid "php composer.phar update\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:100
msgid "This will make Composer do two things:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
msgid ""
"It resolves all dependencies listed in your `composer.json` file and writes "
"all of the packages and their exact versions to the `composer.lock` file, "
"locking the project to those specific versions. You should commit the "
"`composer.lock` file to your project repo so that all people working on the "
"project are locked to the same versions of dependencies (more below). This "
"is the main role of the `update` command."
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
msgid ""
"It then implicitly runs the [`install`](03-cli.md#install-i) command. This "
"will download the dependencies' files into the `vendor` directory in your "
"project. (The `vendor` directory is the conventional location for all third-"
"party code in a project). In our example from above, you would end up with "
"the Monolog source files in `vendor/monolog/monolog/`. As Monolog has a "
"dependency on `psr/log`, that package's files can also be found inside "
"`vendor/`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:116
#, no-wrap
msgid ""
"> **Tip:** If you are using git for your project, you probably want to add\n"
"> `vendor` in your `.gitignore`. You really don't want to add all of that\n"
"> third-party code to your versioned repository.\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:117
#, no-wrap
msgid "Commit your `composer.lock` file to version control"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:128
msgid ""
"Committing this file to version control is important because it will cause "
"anyone who sets up the project to use the exact same versions of the "
"dependencies that you are using. Your CI server, production machines, other "
"developers in your team, everything and everyone runs on the same "
"dependencies, which mitigates the potential for bugs affecting only some "
"parts of the deployments. Even if you develop alone, in six months when "
"reinstalling the project you can feel confident that the dependencies "
"installed are still working, even if the dependencies have released many new "
"versions since then.  (See note below about using the `update` command.)"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:131
#, no-wrap
msgid ""
"> **Note:** For libraries it is not necessary to commit the lock\n"
"> file, see also: [Libraries - Lock file](02-libraries.md#lock-file).\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:132
#, no-wrap
msgid "Installing from `composer.lock`"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:137
msgid ""
"If there is already a `composer.lock` file in the project folder, it means "
"either you ran the `update` command before, or someone else on the project "
"ran the `update` command and committed the `composer.lock` file to the "
"project (which is good)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:146
msgid ""
"Either way, running `install` when a `composer.lock` file is present "
"resolves and installs all dependencies that you listed in `composer.json`, "
"but Composer uses the exact versions listed in `composer.lock` to ensure "
"that the package versions are consistent for everyone working on your "
"project. As a result you will have all dependencies requested by your "
"`composer.json` file, but they may not all be at the very latest available "
"versions (some of the dependencies listed in the `composer.lock` file may "
"have released newer versions since the file was created). This is by design, "
"ensuring that your project does not break because of unexpected changes in "
"dependencies."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:150
msgid ""
"So after fetching new changes from your VCS repository it is recommended to "
"run a Composer `install` to make sure the vendor directory is up in sync "
"with your `composer.lock` file."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:151 ../doc/03-cli.md:86
#, no-wrap
msgid "php composer.phar install\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:161
msgid ""
"Composer enables reproducible builds by default. This means that running the "
"same command multiple times will produce a `vendor/` directory containing "
"files that are identical (*except their timestamps*), including the "
"autoloader files.  It is especially beneficial for environments that require "
"strict verification processes, as well as for Linux distributions aiming to "
"package PHP applications in a secure and predictable manner."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:162
#, no-wrap
msgid "Updating dependencies to their latest versions"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:169
msgid ""
"As mentioned above, the `composer.lock` file prevents you from automatically "
"getting the latest versions of your dependencies. To update to the latest "
"versions, use the [`update`](03-cli.md#update-u) command. This will fetch "
"the latest matching versions (according to your `composer.json` file) and "
"update the lock file with the new versions."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:177
#, no-wrap
msgid ""
"> **Note:** Composer will display a Warning when executing an `install` command\n"
"> if the `composer.lock` has not been updated since changes were made to the\n"
"> `composer.json` that might affect dependency resolution.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:179
msgid ""
"If you only want to install, upgrade or remove one dependency, you can "
"explicitly list it as an argument:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:180
#, no-wrap
msgid "php composer.phar update monolog/monolog [...]\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:184
#, no-wrap
msgid "Packagist"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:191
msgid ""
"[Packagist.org](https://packagist.org/) is the main Composer repository. A "
"Composer repository is basically a package source: a place where you can get "
"packages from. Packagist aims to be the central repository that everybody "
"uses. This means that you can automatically `require` any package that is "
"available there, without further specifying where Composer should look for "
"the package."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:194
msgid ""
"If you go to the [Packagist.org website](https://packagist.org/), you can "
"browse and search for packages."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:198
msgid ""
"Any open source project using Composer is recommended to publish their "
"packages on Packagist. A library does not need to be on Packagist to be used "
"by Composer, but it enables discovery and adoption by other developers more "
"quickly."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:199
#, no-wrap
msgid "Platform packages"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:204
msgid ""
"Composer has platform packages, which are virtual packages for things that "
"are installed on the system but are not actually installable by Composer. "
"This includes PHP itself, PHP extensions and some system libraries."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:208
msgid ""
"`php` represents the PHP version of the user, allowing you to apply "
"constraints, e.g. `^7.1`. To require a 64bit version of php, you can require "
"the `php-64bit` package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:211
msgid ""
"`hhvm` represents the version of the HHVM runtime and allows you to apply a "
"constraint, e.g., `^2.3`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:216
msgid ""
"`ext-<name>` allows you to require PHP extensions (includes core "
"extensions). Versioning can be quite inconsistent here, so it's often a good "
"idea to set the constraint to `*`.  An example of an extension package name "
"is `ext-gd`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:220
msgid ""
"`lib-<name>` allows constraints to be made on versions of libraries used by "
"PHP. The following are available: `curl`, `iconv`, `icu`, `libxml`, "
"`openssl`, `pcre`, `uuid`, `xsl`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:223
msgid ""
"You can use [`show --platform`](03-cli.md#show) to get a list of your "
"locally available platform packages."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:224
#, no-wrap
msgid "Autoloading"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:229
msgid ""
"For libraries that specify autoload information, Composer generates a "
"`vendor/autoload.php` file. You can include this file and start using the "
"classes that those libraries provide without any extra work:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:230
#, no-wrap
msgid ""
"require __DIR__ . '/vendor/autoload.php';\n"
"\n"
"$log = new Monolog\\Logger('name');\n"
"$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n"
"$log->warning('Foo');\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:240
msgid ""
"You can even add your own code to the autoloader by adding an [`autoload`]"
"(04-schema.md#autoload) field to `composer.json`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:241
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:251
msgid ""
"Composer will register a [PSR-4](https://www.php-fig.org/psr/psr-4/) "
"autoloader for the `Acme` namespace."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:255
msgid ""
"You define a mapping from namespaces to directories. The `src` directory "
"would be in your project root, on the same level as the `vendor` directory. "
"An example filename would be `src/Foo.php` containing an `Acme\\Foo` class."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:258
msgid ""
"After adding the [`autoload`](04-schema.md#autoload) field, you have to re-"
"run this command:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:259
#, no-wrap
msgid "php composer.phar dump-autoload\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:266
msgid ""
"This command will re-generate the `vendor/autoload.php` file.  See the "
"[`dump-autoload`](03-cli.md#dump-autoload-dumpautoload-) section for more "
"information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:270
msgid ""
"Including that file will also return the autoloader instance, so you can "
"store the return value of the include call in a variable and add more "
"namespaces.  This can be useful for autoloading classes in a test suite, for "
"example."
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:271
#, no-wrap
msgid ""
"$loader = require __DIR__ . '/vendor/autoload.php';\n"
"$loader->addPsr4('Acme\\\\Test\\\\', __DIR__);\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:279
msgid ""
"In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and "
"files autoloading. See the [`autoload`](04-schema.md#autoload) reference for "
"more information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:281
msgid ""
"See also the docs on [optimizing the autoloader](articles/autoloader-"
"optimization.md)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:285
#, no-wrap
msgid ""
"> **Note:** Composer provides its own autoloader. If you don't want to use that\n"
"> one, you can include `vendor/composer/autoload_*.php` files, which return\n"
"> associative arrays allowing you to configure your own autoloader.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:286
msgid "&larr; [Intro](00-intro.md)  | [Libraries](02-libraries.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/02-libraries.md:1
#, no-wrap
msgid "Libraries"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:5
msgid ""
"This chapter will tell you how to make your library installable through "
"Composer."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:6
#, no-wrap
msgid "Every project is a package"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:12
msgid ""
"As soon as you have a `composer.json` in a directory, that directory is a "
"package. When you add a [`require`](04-schema.md#require) to a project, you "
"are making a package that depends on other packages. The only difference "
"between your project and a library is that your project is a package without "
"a name."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:15
msgid ""
"In order to make that package installable you need to give it a name. You do "
"this by adding the [`name`](04-schema.md#name) property in `composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:16
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/hello-world\",\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:27
msgid ""
"In this case the project name is `acme/hello-world`, where `acme` is the "
"vendor name. Supplying a vendor name is mandatory."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:31
#, no-wrap
msgid ""
"> **Note:** If you don't know what to use as a vendor name, your GitHub\n"
"> username is usually a good bet. Package names must be lowercase, and the\n"
"> convention is to use dashes for word separation.\n"
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:32
#, no-wrap
msgid "Library Versioning"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:40
msgid ""
"In the vast majority of cases, you will be maintaining your library using "
"some sort of version control system like git, svn, hg or fossil. In these "
"cases, Composer infers versions from your VCS, and you **should not** "
"specify a version in your `composer.json` file. (See the [Versions article]"
"(articles/versions.md)  to learn about how Composer uses VCS branches and "
"tags to resolve version constraints.)"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:44
msgid ""
"If you are maintaining packages by hand (i.e., without a VCS), you'll need "
"to specify the version explicitly by adding a `version` value in your "
"`composer.json` file:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:45
#, no-wrap
msgid ""
"{\n"
"    \"version\": \"1.0.0\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:53
#, no-wrap
msgid ""
"> **Note:** When you add a hardcoded version to a VCS, the version will conflict\n"
"> with tag names. Composer will not be able to determine the version number.\n"
msgstr ""

#. type: Title ###
#: ../doc/02-libraries.md:54
#, no-wrap
msgid "VCS Versioning"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:61
msgid ""
"Composer uses your VCS's branch and tag features to resolve the version "
"constraints you specify in your [`require`](04-schema.md#require) field to "
"specific sets of files.  When determining valid available versions, Composer "
"looks at all of your tags and branches and translates their names into an "
"internal list of options that it then matches against the version constraint "
"you provided."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:64
msgid ""
"For more on how Composer treats tags and branches and how it resolves "
"package version constraints, read the [versions](articles/versions.md) "
"article."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:65
#, no-wrap
msgid "Lock file"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:71
msgid ""
"For your library you may commit the `composer.lock` file if you want to. "
"This can help your team to always test against the same dependency "
"versions.  However, this lock file will not have any effect on other "
"projects that depend on it. It only has an effect on the main project."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:74
msgid ""
"If you do not want to commit the lock file, and you are using git, add it to "
"the `.gitignore`."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:75
#, no-wrap
msgid "Publishing to a VCS"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:81
msgid ""
"Once you have a VCS repository (version control system, e.g. git) containing "
"a `composer.json` file, your library is already composer-installable. In "
"this example we will publish the `acme/hello-world` library on GitHub under "
"`github.com/username/hello-world`."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:87
msgid ""
"Now, to test installing the `acme/hello-world` package, we create a new "
"project locally. We will call it `acme/blog`. This blog will depend on `acme/"
"hello-world`, which in turn depends on `monolog/monolog`. We can accomplish "
"this by creating a new `blog` directory somewhere, containing a `composer."
"json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:88
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:100
msgid ""
"The name is not needed in this case, since we don't want to publish the blog "
"as a library. It is added here to clarify which `composer.json` is being "
"described."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:104
msgid ""
"Now we need to tell the blog app where to find the `hello-world` "
"dependency.  We do this by adding a package repository specification to the "
"blog's `composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:105
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/username/hello-world\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:122
msgid ""
"For more details on how package repositories work and what other types are "
"available, see [Repositories](05-repositories.md)."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:125
msgid ""
"That's all. You can now install the dependencies by running Composer's "
"[`install`](03-cli.md#install) command!"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:129
#, no-wrap
msgid ""
"**Recap:** Any git/svn/hg/fossil repository containing a `composer.json` can be\n"
"added to your project by specifying the package repository and declaring the\n"
"dependency in the [`require`](04-schema.md#require) field.\n"
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:130
#, no-wrap
msgid "Publishing to packagist"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:134
msgid ""
"Alright, so now you can publish packages. But specifying the VCS repository "
"every time is cumbersome. You don't want to force all your users to do that."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:137
msgid ""
"The other thing that you may have noticed is that we did not specify a "
"package repository for `monolog/monolog`. How did that work? The answer is "
"Packagist."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:143
msgid ""
"[Packagist](https://packagist.org/) is the main package repository for "
"Composer, and it is enabled by default. Anything that is published on "
"Packagist is available automatically through Composer. Since [Monolog is on "
"Packagist](https://packagist.org/packages/monolog/monolog), we can depend on "
"it without having to specify any additional repositories."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:146
msgid ""
"If we wanted to share `hello-world` with the world, we would publish it on "
"Packagist as well."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:152
msgid ""
"You visit [Packagist](https://packagist.org) and hit the \"Submit\" button. "
"This will prompt you to sign up if you haven't already, and then allows you "
"to submit the URL to your VCS repository, at which point Packagist will "
"start crawling it. Once it is done, your package will be available to anyone!"
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:153
#, no-wrap
msgid "Light-weight distribution packages"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:157
msgid ""
"Some useless information like the `.github` directory, or large examples, "
"test data, etc. should typically not be included in distributed packages."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:162
msgid ""
"The `.gitattributes` file is a git specific file like `.gitignore` also "
"living at the root directory of your library. It overrides local and global "
"configuration (`.git/config` and `~/.gitconfig` respectively) when present "
"and tracked by git."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:165
msgid ""
"Use `.gitattributes` to prevent unwanted files from bloating the zip "
"distribution packages."
msgstr ""

#. type: Fenced code block (text)
#: ../doc/02-libraries.md:166
#, no-wrap
msgid ""
"// .gitattributes\n"
"/demo export-ignore\n"
"phpunit.xml.dist export-ignore\n"
"/.github/ export-ignore\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:174
msgid "Test it by inspecting the zip file generated manually:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/02-libraries.md:175
#, no-wrap
msgid "git archive branchName --format zip -o file.zip\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:182
#, no-wrap
msgid ""
"> **Note:** Files would be still tracked by git just not included in the\n"
"> zip distribution. This only works for packages installed from\n"
"> dist (i.e. tagged releases) coming from GitHub, GitLab or Bitbucket.\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:183
msgid ""
"&larr; [Basic usage](01-basic-usage.md) | [Command-line interface](03-cli."
"md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/03-cli.md:1
#, no-wrap
msgid "Command-line interface / Commands"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:5
msgid ""
"You've already learned how to use the command-line interface to do some "
"things. This chapter documents all the available commands."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:9
msgid ""
"To get help from the command-line, call `composer` or `composer list` to see "
"the complete list of commands, then `--help` combined with any of those can "
"give you more information."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:11
msgid ""
"As Composer uses [symfony/console](https://github.com/symfony/console) you "
"can call commands by short name if it's not ambiguous."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:11
#, no-wrap
msgid "php composer.phar dump\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:15
msgid "calls `composer dump-autoload`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:16
#, no-wrap
msgid "Bash Completions"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:20
#, no-wrap
msgid ""
"To install bash completions you can run `composer completion bash > completion.bash`.\n"
"This will create a `completion.bash` file in the current directory.\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:22
msgid ""
"Then execute `source completion.bash` to enable it in the current terminal "
"session."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:25
msgid ""
"Move and rename the `completion.bash` file to `/etc/bash_completion.d/"
"composer` to make it load automatically in new terminals."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:26
#, no-wrap
msgid "Global Options"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:29
msgid "The following options are available with every command:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--verbose (-v):** Increase verbosity of messages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--help (-h):** Display help information."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--quiet (-q):** Do not output any message."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--no-interaction (-n):** Do not ask any interactive question."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--no-plugins:** Disables plugins."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid ""
"**--no-scripts:** Skips execution of scripts defined in `composer.json`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid ""
"**--no-cache:** Disables the use of the cache directory. Same as setting the "
"COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid ""
"**--working-dir (-d):** If specified, use the given directory as working "
"directory."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--profile:** Display timing and memory usage information"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--ansi:** Force ANSI output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--no-ansi:** Disable ANSI output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
msgid "**--version (-V):** Display this application version."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:44
#, no-wrap
msgid "Process Exit Codes"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
msgid "**0:** OK"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
msgid "**1:** Generic/unknown error code"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
msgid "**2:** Dependency solving error code"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:50
#, no-wrap
msgid "init"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:54
msgid ""
"In the [Libraries](02-libraries.md) chapter we looked at how to create a "
"`composer.json` by hand. There is also an `init` command available to do "
"this."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:57
msgid ""
"When you run the command it will interactively ask you to fill in the "
"fields, while using some smart defaults."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:58
#, no-wrap
msgid "php composer.phar init\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:62 ../doc/03-cli.md:97 ../doc/03-cli.md:185
#: ../doc/03-cli.md:271 ../doc/03-cli.md:328 ../doc/03-cli.md:375
#: ../doc/03-cli.md:399 ../doc/03-cli.md:438 ../doc/03-cli.md:485
#: ../doc/03-cli.md:552 ../doc/03-cli.md:595 ../doc/03-cli.md:620
#: ../doc/03-cli.md:636 ../doc/03-cli.md:651 ../doc/03-cli.md:688
#: ../doc/03-cli.md:722 ../doc/03-cli.md:737 ../doc/03-cli.md:792
#: ../doc/03-cli.md:832 ../doc/03-cli.md:915 ../doc/03-cli.md:971
#: ../doc/03-cli.md:997 ../doc/03-cli.md:1006 ../doc/03-cli.md:1013
#: ../doc/03-cli.md:1029 ../doc/03-cli.md:1053 ../doc/03-cli.md:1073
#, no-wrap
msgid "Options"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--name:** Name of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--description:** Description of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--author:** Author name of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--type:** Type of package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--homepage:** Homepage of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid ""
"**--require:** Package to require with a version constraint. Should be in "
"format `foo/bar:1.0.0`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--require-dev:** Development requirements, see **--require**."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--stability (-s):** Value for the `minimum-stability` field."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid "**--license (-l):** License of package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid ""
"**--repository:** Provide one (or more) custom repositories. They will be "
"stored in the generated composer.json, and used for auto-completion when "
"prompting for the list of requires. Every repository can be either an HTTP "
"URL pointing to a `composer` repository or a JSON string which is similar to "
"what the [repositories](04-schema.md#repositories) key accepts."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
msgid ""
"**--autoload (-a):** Add a PSR-4 autoload mapping to the composer.json. "
"Automatically maps your package's namespace to the provided directory. "
"(Expects a relative path, e.g. src/) See also [PSR-4 autoload](04-schema."
"md#psr-4)."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:81
#, no-wrap
msgid "install / i"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:85
msgid ""
"The `install` command reads the `composer.json` file from the current "
"directory, resolves the dependencies, and installs them into `vendor`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:93
msgid ""
"If there is a `composer.lock` file in the current directory, it will use the "
"exact versions from there instead of resolving them. This ensures that "
"everyone using the library will get the same versions of the dependencies."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:96
msgid ""
"If there is no `composer.lock` file, Composer will create one after "
"dependency resolution."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:426 ../doc/03-cli.md:957
msgid ""
"**--prefer-install:** There are two ways of downloading a package: `source` "
"and `dist`. Composer uses `dist` by default. If you pass `--prefer-"
"install=source` (or `--prefer-source`) Composer will install from `source` "
"if there is one. This is useful if you want to make a bugfix to a project "
"and get a local git clone of the dependency directly.  To get the legacy "
"behavior where Composer use `source` automatically for dev versions of "
"packages, use `--prefer-install=auto`. See also [config.preferred-install]"
"(06-config.md#preferred-install).  Passing this flag will override the "
"config value."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
msgid ""
"**--dry-run:** If you want to run through an installation without actually "
"installing a package, you can use `--dry-run`. This will simulate the "
"installation and show you what would happen."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
msgid "**--download-only:** Download only, do not install packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237
msgid ""
"**--dev:** Install packages listed in `require-dev` (this is the default "
"behavior)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237
msgid ""
"**--no-dev:** Skip installing packages listed in `require-dev`. The "
"autoloader generation skips the `autoload-dev` rules. Also see "
"[COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:426
msgid "**--no-autoloader:** Skips autoloader generation."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:426 ../doc/03-cli.md:957
msgid ""
"**--no-progress:** Removes the progress display that can mess with some "
"terminals or scripts which don't handle backspace characters."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
msgid "**--audit:** Run an audit after installation is complete."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:957
msgid ""
"**--audit-format:** Audit output format. Must be \"table\", \"plain\", "
"\"json\", or \"summary\" (default)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:361 ../doc/03-cli.md:426
msgid ""
"**--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to "
"get a faster autoloader. This is recommended especially for production, but "
"can take a bit of time to run so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:426
msgid ""
"**--classmap-authoritative (-a):** Autoload classes from the classmap only.  "
"Implicitly enables `--optimize-autoloader`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:426
msgid "**--apcu-autoloader:** Use APCu to cache found/not-found classes."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:426
msgid ""
"**--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader "
"cache.  Implicitly enables `--apcu-autoloader`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237 ../doc/03-cli.md:315
#: ../doc/03-cli.md:361 ../doc/03-cli.md:957
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these.  See also the [`platform`](06-config.md#platform) "
"config option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:237
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard. Appending a `+` makes it only ignore the upper-bound of the "
"requirements. For example, if a package requires `php: ^7`, then the option "
"`--ignore-platform-req=php+` would allow installing on PHP 8, but "
"installation on PHP 5.6 would still fail."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:138
#, no-wrap
msgid "update / u / upgrade"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:144
msgid ""
"In order to get the latest versions of the dependencies and to update the "
"`composer.lock` file, you should use the `update` command. This command is "
"also aliased as `upgrade` as it does the same as `upgrade` does if you are "
"thinking of `apt-get` or similar package managers."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:151
msgid ""
"This will resolve all dependencies of the project and write the exact "
"versions into `composer.lock`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:153
msgid ""
"If you only want to update a few packages and not all, you can list them as "
"such:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:154
#, no-wrap
msgid "php composer.phar update vendor/package vendor/package2\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:159
msgid "You can also use wildcards to update a bunch of packages at once:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:160
#, no-wrap
msgid "php composer.phar update \"vendor/*\"\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:167
msgid ""
"If you want to downgrade a package to a specific version without changing "
"your composer.json you can use `--with` and provide a custom version "
"constraint:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:168
#, no-wrap
msgid "php composer.phar update --with vendor/package:2.0.1\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:175
msgid ""
"Note that with the above all packages will be updated. If you only want to "
"update the package(s) for which you provide custom constraints using `--"
"with`, you can skip `--with` and instead use constraints with the partial "
"update syntax:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:176
#, no-wrap
msgid "php composer.phar update vendor/package:2.0.1 vendor/package2:3.0.*\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:183
#, no-wrap
msgid ""
"> **Note:** For packages also required in your composer.json the custom constraint\n"
"> must be a subset of the existing constraint. The composer.json constraints still\n"
"> apply and the composer.json is not modified by these temporary update constraints.\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315 ../doc/03-cli.md:361
msgid "**--dry-run:** Simulate the command without actually doing anything."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315 ../doc/03-cli.md:361
msgid ""
"**--no-install:** Does not run the install step after updating the composer."
"lock file."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315
msgid ""
"**--no-audit:** Does not run the audit steps after updating the composer."
"lock file. Also see [COMPOSER_NO_AUDIT](#composer-no-audit)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--lock:** Overwrites the lock file hash to suppress warning about the lock "
"file being out of date without updating package versions. Package metadata "
"like mirrors and URLs are updated if they changed."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--with:** Temporary version constraint to add, e.g. foo/bar:1.0.0 or foo/"
"bar=1.0.0"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--with-dependencies (-w):** Update also dependencies of packages in the "
"argument list, except those which are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--with-all-dependencies (-W):** Update also dependencies of packages in "
"the argument list, including those which are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315
msgid ""
"**--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to "
"get a faster autoloader. This is recommended especially for production, but "
"can take a bit of time to run, so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315
msgid ""
"**--prefer-stable:** Prefer stable versions of dependencies. Can also be set "
"via the COMPOSER_PREFER_STABLE=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237 ../doc/03-cli.md:315
msgid ""
"**--prefer-lowest:** Prefer lowest versions of dependencies. Useful for "
"testing minimal versions of requirements, generally used with `--prefer-"
"stable`. Can also be set via the COMPOSER_PREFER_LOWEST=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--minimal-changes (-m):** During a partial update with `-w`/`-W`, only "
"perform absolutely necessary changes to transitive dependencies. Can also be "
"set via the COMPOSER_MINIMAL_CHANGES=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--interactive:** Interactive interface with autocompletion to select the "
"packages to update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:237
msgid ""
"**--root-reqs:** Restricts the update to your first degree dependencies."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:239
msgid ""
"Specifying one of the words `mirrors`, `lock`, or `nothing` as an argument "
"has the same effect as specifying the option `--lock`, for example `composer "
"update mirrors` is exactly the same as `composer update --lock`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:240
#, no-wrap
msgid "require / r"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:244
msgid ""
"The `require` command adds new packages to the `composer.json` file from the "
"current directory. If no file exists one will be created on the fly."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:247
msgid ""
"If you do not specify a package, Composer will prompt you to search for a "
"package, and given results, provide a list of matches to require."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:248
#, no-wrap
msgid "php composer.phar require\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:254
msgid ""
"After adding/changing the requirements, the modified requirements will be "
"installed or updated."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:257
msgid ""
"If you do not want to choose requirements interactively, you can pass them "
"to the command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:258
#, no-wrap
msgid "php composer.phar require \"vendor/package:2.*\" vendor/package2:dev-master\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:264
msgid ""
"If you do not specify a version constraint, composer will choose a suitable "
"one based on the available package versions."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:265
#, no-wrap
msgid "php composer.phar require vendor/package vendor/package2\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:270
msgid ""
"If you do not want to install the new dependencies immediately you can call "
"it with --no-update"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315
msgid "**--dev:** Add packages to `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315 ../doc/03-cli.md:361
msgid ""
"**--no-update:** Disables the automatic update of the dependencies (implies "
"--no-install)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315
msgid ""
"**--update-no-dev:** Run the dependency update with the `--no-dev` option. "
"Also see [COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315
msgid ""
"**--update-with-dependencies (-w):** Also update dependencies of the newly "
"required packages, except those that are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315
msgid ""
"**--update-with-all-dependencies (-W):** Also update dependencies of the "
"newly required packages, including those that are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315 ../doc/03-cli.md:361 ../doc/03-cli.md:614
#: ../doc/03-cli.md:957
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315 ../doc/03-cli.md:361
msgid ""
"**--minimal-changes (-m):** During an update with `-w`/`-W`, only perform "
"absolutely necessary changes to transitive dependencies. Can also be set via "
"the COMPOSER_MINIMAL_CHANGES=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:315
msgid "**--sort-packages:** Keep packages sorted in `composer.json`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:316
#, no-wrap
msgid "remove / rm / uninstall"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:320
msgid ""
"The `remove` command removes packages from the `composer.json` file from the "
"current directory."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:321
#, no-wrap
msgid "php composer.phar remove vendor/package vendor/package2\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:327
msgid ""
"After removing the requirements, the modified requirements will be "
"uninstalled."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361
msgid ""
"**--unused** Remove unused packages that are not a direct or indirect "
"dependency (anymore)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361
msgid "**--dev:** Remove packages from `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361 ../doc/03-cli.md:957
msgid ""
"**--no-audit:** Does not run the audit steps after installation is complete. "
"Also see [COMPOSER_NO_AUDIT](#composer-no-audit)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361
msgid ""
"**--update-no-dev:** Run the dependency update with the --no-dev option. "
"Also see [COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361
msgid ""
"**--update-with-dependencies (-w):** Also update dependencies of the removed "
"packages.  (Deprecated, is now default behavior)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:361
msgid ""
"**--update-with-all-dependencies (-W):** Allows all inherited dependencies "
"to be updated, including those that are root requirements."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:362
#, no-wrap
msgid "bump"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:369
msgid ""
"The `bump` command increases the lower limit of your composer.json "
"requirements to the currently installed versions. This helps to ensure your "
"dependencies do not accidentally get downgraded due to some other conflict, "
"and can slightly improve dependency resolution performance as it limits the "
"amount of package versions Composer has to look at."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:374
msgid ""
"Running this blindly on libraries is **NOT** recommended as it will narrow "
"down your allowed dependencies, which may cause dependency hell for your "
"users.  Running it with `--dev-only` on libraries may be fine however as dev "
"requirements are local to the library and do not affect consumers of the "
"package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:380
msgid "**--dev-only:** Only bump requirements in \"require-dev\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:380
msgid "**--no-dev-only:** Only bump requirements in \"require\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:380
msgid ""
"**--dry-run:** Outputs the packages to bump, but will not execute anything."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:381
#, no-wrap
msgid "reinstall"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:387
msgid ""
"The `reinstall` command looks up installed packages by name, uninstalls them "
"and reinstalls them. This lets you do a clean install of a package if you "
"messed with its files, or if you wish to change the installation type using "
"--prefer-install."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:388
#, no-wrap
msgid "php composer.phar reinstall acme/foo acme/bar\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:394
msgid ""
"You can specify more than one package name to reinstall, or use a wildcard "
"to select several packages at once:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:395
#, no-wrap
msgid "php composer.phar reinstall \"acme/*\"\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:426
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements. This only has "
"an effect in the context of the autoloader generation for the reinstall "
"command."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:426
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement. This only "
"has an effect in the context of the autoloader generation for the reinstall "
"command.  Multiple requirements can be ignored via wildcard."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:427
#, no-wrap
msgid "check-platform-reqs"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:433
msgid ""
"The check-platform-reqs command checks that your PHP and extensions versions "
"match the platform requirements of the installed packages. This can be used "
"to verify that a production server has all the extensions needed to run a "
"project after installing it for example."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:437
msgid ""
"Unlike update/install, this command will ignore config.platform settings and "
"check the real platform packages so you can be certain you have the required "
"platform dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:443
msgid ""
"**--lock:** Checks requirements only from the lock file, not from installed "
"packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:443
msgid "**--no-dev:** Disables checking of require-dev packages requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:443
msgid "**--format (-f):** Format of the output: text (default) or json"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:444
#, no-wrap
msgid "global"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:449
msgid ""
"The global command allows you to run other commands like `install`, "
"`remove`, `require` or `update` as if you were running them from the "
"[COMPOSER_HOME](#composer-home)  directory."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:452
msgid ""
"This is merely a helper to manage a project stored in a central location "
"that can hold CLI tools or Composer plugins that you want to have available "
"everywhere."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:454
msgid "This can be used to install CLI utilities globally. Here is an example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:455
#, no-wrap
msgid "php composer.phar global require friendsofphp/php-cs-fixer\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:462
msgid ""
"Now the `php-cs-fixer` binary is available globally. Make sure your global "
"[vendor binaries](articles/vendor-binaries.md) directory is in your `$PATH` "
"environment variable, you can get its location with the following command :"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:463
#, no-wrap
msgid "php composer.phar global config bin-dir --absolute\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:468
msgid "If you wish to update the binary later on you can run a global update:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:469
#, no-wrap
msgid "php composer.phar global update\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:473
#, no-wrap
msgid "search"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:478
msgid ""
"The search command allows you to search through the current project's "
"package repositories. Usually this will be packagist. You pass it the terms "
"you want to search for."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:479
#, no-wrap
msgid "php composer.phar search monolog\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:484
msgid ""
"You can also search for more than one term by passing multiple arguments."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:496
msgid "**--only-name (-N):** Search only in package names."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:496
msgid ""
"**--only-vendor (-O):** Search only for vendor / organization names, returns "
"only \"vendor\" as a result."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:496
msgid "**--type (-t):** Search for a specific package type."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:496
msgid ""
"**--format (-f):** Lets you pick between text (default) or json output "
"format.  Note that in the json, only the name and description keys are "
"guaranteed to be present. The rest (`url`, `repository`, `downloads` and "
"`favers`) are available for Packagist.org search results and other "
"repositories may return more or less data."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:497
#, no-wrap
msgid "show / info"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:500
msgid "To list all of the available packages, you can use the `show` command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:501
#, no-wrap
msgid "php composer.phar show\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:506
msgid "To filter the list you can pass a package mask using wildcards."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:507
#, no-wrap
msgid "php composer.phar show \"monolog/*\"\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:510
#, no-wrap
msgid "monolog/monolog 2.4.0 Sends your logs to files, sockets, inboxes, databases and various web services\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:516
msgid ""
"If you want to see the details of a certain package, you can pass the "
"package name."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:517
#, no-wrap
msgid "php composer.phar show monolog/monolog\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:520
#, no-wrap
msgid ""
"name     : monolog/monolog\n"
"descrip. : Sends your logs to files, sockets, inboxes, databases and various web services\n"
"keywords : log, logging, psr-3\n"
"versions : * 1.27.1\n"
"type     : library\n"
"license  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\n"
"homepage : http://github.com/Seldaek/monolog\n"
"source   : [git] https://github.com/Seldaek/monolog.git 904713c5929655dc9b97288b69cfeedad610c9a1\n"
"dist     : [zip] https://api.github.com/repos/Seldaek/monolog/zipball/904713c5929655dc9b97288b69cfeedad610c9a1 904713c5929655dc9b97288b69cfeedad610c9a1\n"
"names    : monolog/monolog, psr/log-implementation\n"
"\n"
"support\n"
"issues : https://github.com/Seldaek/monolog/issues\n"
"source : https://github.com/Seldaek/monolog/tree/1.27.1\n"
"\n"
"autoload\n"
"psr-4\n"
"Monolog\\ => src/Monolog\n"
"\n"
"requires\n"
"php >=5.3.0\n"
"psr/log ~1.0\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:547
msgid ""
"You can even pass the package version, which will tell you the details of "
"that specific version."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:548
#, no-wrap
msgid "php composer.phar show monolog/monolog 1.0.2\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--all:** List all packages available in all your repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--installed (-i):** List the packages that are installed (this is enabled "
"by default, and deprecated)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--locked:** List the locked packages from composer.lock."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--platform (-p):** List only platform packages (php & extensions)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--available (-a):** List available packages only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--self (-s):** List the root package info."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--name-only (-N):** List package names only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--path (-P):** List package paths."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--tree (-t):** List your dependencies as a tree. If you pass a package "
"name it will show the dependency tree for that package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--latest (-l):** List all installed packages including their latest "
"version."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--outdated (-o):** Implies --latest, but this lists *only* packages that "
"have a newer version available."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--ignore:** Ignore specified package(s). Can contain wildcards (`*`). Use "
"it with the --outdated option if you don't want to be informed about new "
"versions of some packages"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid "**--no-dev:** Filters dev dependencies from the package list."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--major-only (-M):** Use with --latest or --outdated. Only shows packages "
"that have major SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--minor-only (-m):** Use with --latest or --outdated. Only shows packages "
"that have minor SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--patch-only:** Use with --latest or --outdated. Only shows packages that "
"have patch-level SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--sort-by-age (-A):** Displays the installed version's age, and sorts "
"packages oldest first. Use with the --latest or --outdated option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581 ../doc/03-cli.md:614
msgid ""
"**--direct (-D):** Restricts the list of packages to your direct "
"dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--strict:** Return a non-zero exit code when there are outdated packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581 ../doc/03-cli.md:614 ../doc/03-cli.md:654
msgid ""
"**--format (-f):** Lets you pick between text (default) or json output "
"format."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these. Use with the --outdated option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:581
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard. Use with the --outdated option."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:582
#, no-wrap
msgid "outdated"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:587
msgid ""
"The `outdated` command shows a list of installed packages that have updates "
"available, including their current and latest versions. This is basically an "
"alias for `composer show -lo`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:589
msgid "The color coding is as such:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:594
msgid "**green (=)**: Dependency is in the latest version and is up to date."
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:594
msgid ""
"**yellow (`~`)**: Dependency has a new version available that includes "
"backwards compatibility breaks according to semver, so upgrade when you can "
"but it may involve work."
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:594
msgid ""
"**red (!)**: Dependency has a new version that is semver-compatible and you "
"should upgrade it."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--all (-a):** Show all packages, not just outdated (alias for `composer "
"show --latest`)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid "**--strict:** Returns non-zero exit code if any package is outdated."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--ignore:** Ignore specified package(s). Can contain wildcards (`*`). Use "
"it if you don't want to be informed about new versions of some packages"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--major-only (-M):** Only shows packages that have major SemVer-compatible "
"updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--minor-only (-m):** Only shows packages that have minor SemVer-compatible "
"updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--patch-only (-p):** Only shows packages that have patch-level SemVer-"
"compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--sort-by-age (-A):** Displays the installed version's age, and sorts "
"packages oldest first."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid "**--no-dev:** Do not show outdated dev dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--locked:** Shows updates for packages from the lock file, regardless of "
"what is currently in vendor dir."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:614
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:615
#, no-wrap
msgid "browse / home"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:619
msgid ""
"The `browse` (aliased to `home`) opens a package's repository URL or "
"homepage in your browser."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:624
msgid "**--homepage (-H):** Open the homepage instead of the repository URL."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:624
msgid "**--show (-s):** Only show the homepage or repository URL."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:625
#, no-wrap
msgid "suggests"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:630
msgid ""
"Lists all packages suggested by the currently installed set of packages. You "
"can optionally pass one or multiple package names in the format of `vendor/"
"package` to limit output to suggestions made by those packages only."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:633
msgid ""
"Use the `--by-package` (default) or `--by-suggestion` flags to group the "
"output by the package offering the suggestions or the suggested packages "
"respectively."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:635
msgid "If you only want a list of suggested package names, use `--list`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:644
msgid "**--by-package:** Groups output by suggesting package (default)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:644
msgid "**--by-suggestion:** Groups output by suggested package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:644
msgid ""
"**--all:** Show suggestions from all dependencies, including transitive ones "
"(by default only direct dependencies' suggestions are shown)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:644
msgid "**--list:** Show only list of suggested package names."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:644
msgid "**--no-dev:** Excludes suggestions from `require-dev` packages."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:645
#, no-wrap
msgid "fund"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:650
msgid ""
"Discover how to help fund the maintenance of your dependencies. This lists "
"all funding links from the installed dependencies. Use `--format=json` to "
"get machine-readable output."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:655
#, no-wrap
msgid "depends / why"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:660
msgid ""
"The `depends` command tells you which other packages depend on a certain "
"package. As with installation `require-dev` relationships are only "
"considered for the root package."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:661
#, no-wrap
msgid "php composer.phar depends doctrine/lexer\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:664
#, no-wrap
msgid ""
"doctrine/annotations  1.13.3 requires doctrine/lexer (1.*)\n"
"doctrine/common       2.13.3 requires doctrine/lexer (^1.0)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:671
msgid ""
"You can optionally specify a version constraint after the package to limit "
"the search."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:674
msgid ""
"Add the `--tree` or `-t` flag to show a recursive tree of why the package is "
"depended upon, for example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:675
#, no-wrap
msgid "php composer.phar depends psr/log -t\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:678
#, no-wrap
msgid ""
"psr/log 1.1.4 Common interface for logging libraries\n"
"├──composer/composer 2.4.x-dev (requires psr/log ^1.0 || ^2.0 || ^3.0)\n"
"├──composer/composer dev-main (requires psr/log ^1.0 || ^2.0 || ^3.0)\n"
"├──composer/xdebug-handler 3.0.3 (requires psr/log ^1 || ^2 || ^3)\n"
"│  ├──composer/composer 2.4.x-dev (requires composer/xdebug-handler ^2.0.2 || ^3.0.3)\n"
"│  └──composer/composer dev-main (requires composer/xdebug-handler ^2.0.2 || ^3.0.3)\n"
"└──symfony/console v5.4.11 (conflicts psr/log >=3) (circular dependency aborted here)\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:692 ../doc/03-cli.md:726
msgid "**--recursive (-r):** Recursively resolves up to the root package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:692 ../doc/03-cli.md:726
msgid "**--tree (-t):** Prints the results as a nested tree, implies -r."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:693
#, no-wrap
msgid "prohibits / why-not"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:699
msgid ""
"The `prohibits` command tells you which packages are blocking a given "
"package from being installed. Specify a version constraint to verify whether "
"upgrades can be performed in your project, and if not why not. See the "
"following example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:700
#, no-wrap
msgid "php composer.phar prohibits symfony/symfony 3.1\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:703
#, no-wrap
msgid "laravel/framework v5.2.16 requires symfony/var-dumper (2.8.*|3.0.*)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:709
msgid ""
"Note that you can also specify platform requirements, for example to check "
"whether you can upgrade your server to PHP 8.0:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:710
#, no-wrap
msgid "php composer.phar prohibits php 8\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:713
#, no-wrap
msgid ""
"doctrine/cache        v1.6.0 requires php (~5.5|~7.0)\n"
"doctrine/common       v2.6.1 requires php (~5.5|~7.0)\n"
"doctrine/instantiator 1.0.5  requires php (>=5.3,<8.0-DEV)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:721
msgid ""
"As with `depends` you can request a recursive lookup, which will list all "
"packages depending on the packages that cause the conflict."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:727
#, no-wrap
msgid "validate"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:732
msgid ""
"You should always run the `validate` command before you commit your "
"`composer.json` file, and before you tag a release. It will check if your "
"`composer.json` is valid."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:733
#, no-wrap
msgid "php composer.phar validate\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:744
msgid ""
"**--no-check-all:** Do not emit a warning if requirements in `composer.json` "
"use unbound or overly strict version constraints."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:744
msgid ""
"**--no-check-lock:** Do not emit an error if `composer.lock` exists and is "
"not up to date."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:744
msgid ""
"**--no-check-publish:** Do not emit an error if `composer.json` is "
"unsuitable for publishing as a package on Packagist but is otherwise valid."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:744
msgid ""
"**--with-dependencies:** Also validate the composer.json of all installed "
"dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:744
msgid ""
"**--strict:** Return a non-zero exit code for warnings as well as errors."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:745
#, no-wrap
msgid "status"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:750
msgid ""
"If you often need to modify the code of your dependencies and they are "
"installed from source, the `status` command allows you to check if you have "
"local changes in any of them."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:751
#, no-wrap
msgid "php composer.phar status\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:757
msgid ""
"With the `--verbose` option you get some more information about what was "
"changed:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:758
#, no-wrap
msgid "php composer.phar status -v\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:761
#, no-wrap
msgid ""
"You have changes in the following dependencies:\n"
"vendor/seld/jsonlint:\n"
"    M README.mdown\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:767
#, no-wrap
msgid "self-update / selfupdate"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:771
msgid ""
"To update Composer itself to the latest version, run the `self-update` "
"command. It will replace your `composer.phar` with the latest version."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:772
#, no-wrap
msgid "php composer.phar self-update\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:777
msgid "If you would like to instead update to a specific release specify it:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:778
#, no-wrap
msgid "php composer.phar self-update 2.4.0-RC1\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:784
msgid ""
"If you have installed Composer for your entire system (see [global "
"installation](00-intro.md#globally)), you may have to run the command with "
"`root` privileges"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:785
#, no-wrap
msgid "sudo -H composer self-update\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:791
msgid ""
"If Composer was not installed as a PHAR, this command is not available.  "
"(This is sometimes the case when Composer was installed by an operating "
"system package manager.)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--rollback (-r):** Rollback to the last version you had installed."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid ""
"**--clean-backups:** Delete old backups during an update. This makes the "
"current version of Composer the only backup available after the update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--no-progress:** Do not output download progress."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--update-keys:** Prompt user for a key update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--stable:** Force an update to the stable channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--preview:** Force an update to the preview channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid "**--snapshot:** Force an update to the snapshot channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid ""
"**--1:** Force an update to the stable channel, but only use 1.x versions"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid ""
"**--2:** Force an update to the stable channel, but only use 2.x versions"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:805
msgid ""
"**--set-channel-only:** Only store the channel as the default one and then "
"exit"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:806
#, no-wrap
msgid "config"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:810
msgid ""
"The `config` command allows you to edit Composer config settings and "
"repositories in either the local `composer.json` file or the global `config."
"json` file."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:812
msgid ""
"Additionally it lets you edit most properties in the local `composer.json`."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:813
#, no-wrap
msgid "php composer.phar config --list\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:817 ../doc/faqs/how-to-use-composer-behind-a-proxy.md:15
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:820
msgid "`config [options] [setting-key] [setting-value1] ... [setting-valueN]`"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:824
msgid ""
"`setting-key` is a configuration option name and `setting-value1` is a "
"configuration value.  For settings that can take an array of values (like "
"`github-protocols`), multiple setting-value arguments are allowed."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:826
msgid "You can also edit the values of the following properties:"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:829
msgid ""
"`description`, `homepage`, `keywords`, `license`, `minimum-stability`, "
"`name`, `prefer-stable`, `type` and `version`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:831
msgid "See the [Config](06-config.md) chapter for valid configuration options."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--global (-g):** Operate on the global config file located at "
"`$COMPOSER_HOME/config.json` by default.  Without this option, this command "
"affects the local composer.json file or a file specified by `--file`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--editor (-e):** Open the local composer.json file using in a text editor "
"as defined by the `EDITOR` env variable.  With the `--global` option, this "
"opens the global config file."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid "**--auth (-a):** Affect auth config file (only used for --editor)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid "**--unset:** Remove the configuration element named by `setting-key`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--list (-l):** Show the list of current config variables.  With the `--"
"global` option this lists the global configuration only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--file=\"...\" (-f):** Operate on a specific file instead of composer."
"json. Note that this cannot be used in conjunction with the `--global` "
"option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--absolute:** Returns absolute paths when fetching `*-dir` config values "
"instead of relative."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--json:** JSON decode the setting value, to be used with `extra.*` keys."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--merge:** Merge the setting value with the current value, to be used with "
"`extra.*` keys in combination with `--json`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid ""
"**--append:** When adding a repository, append it (lowest priority) to the "
"existing ones instead of prepending it (highest priority)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:852
msgid "**--source:** Display where the config value is loaded from."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:853
#, no-wrap
msgid "Modifying Repositories"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:857
msgid ""
"In addition to modifying the config section, the `config` command also "
"supports making changes to the repositories section by using it the "
"following way:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:858
#, no-wrap
msgid "php composer.phar config repositories.foo vcs https://github.com/foo/bar\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:863
msgid ""
"If your repository requires more configuration options, you can instead pass "
"its JSON representation :"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:864
#, no-wrap
msgid "php composer.phar config repositories.foo '{\"type\": \"vcs\", \"url\": \"http://svn.example.org/my-project/\", \"trunk-path\": \"master\"}'\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:868
#, no-wrap
msgid "Modifying Extra Values"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:872
msgid ""
"In addition to modifying the config section, the `config` command also "
"supports making changes to the extra section by using it the following way:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:873
#, no-wrap
msgid "php composer.phar config extra.foo.bar value\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:879
msgid ""
"The dots indicate array nesting, a max depth of 3 levels is allowed though. "
"The above would set `\"extra\": { \"foo\": { \"bar\": \"value\" } }`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:882
msgid ""
"If you have a complex value to add/modify, you can use the `--json` and `--"
"merge` flags to edit extra fields as json:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:883
#, no-wrap
msgid "php composer.phar config --json extra.foo.bar '{\"baz\": true, \"qux\": []}'\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:887
#, no-wrap
msgid "create-project"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:892
msgid ""
"You can use Composer to create new projects from an existing package. This "
"is the equivalent of doing a git clone/svn checkout followed by a `composer "
"install` of the vendors."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:894
msgid "There are several applications for this:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/03-cli.md:899
msgid "You can deploy application packages."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/03-cli.md:899
msgid ""
"You can check out any package and start developing on patches for example."
msgstr ""

#. type: Bullet: '3. '
#: ../doc/03-cli.md:899
msgid ""
"Projects with multiple developers can use this feature to bootstrap the "
"initial application for development."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:903
msgid ""
"To create a new project using Composer you can use the `create-project` "
"command.  Pass it a package name, and the directory to create the project "
"in. You can also provide a version as a third argument, otherwise the latest "
"version is used."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:905
msgid ""
"If the directory does not currently exist, it will be created during "
"installation."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:906
#, no-wrap
msgid "php composer.phar create-project doctrine/orm path \"2.2.*\"\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:912
msgid ""
"It is also possible to run the command without params in a directory with an "
"existing `composer.json` file to bootstrap a project."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:914
msgid "By default the command checks for the packages on packagist.org."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--stability (-s):** Minimum stability of package. Defaults to `stable`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--repository:** Provide a custom repository to search for the package, "
"which will be used instead of packagist. Can be either an HTTP URL pointing "
"to a `composer` repository, a path to a local `packages.json` file, or a "
"JSON string which similar to what the [repositories](04-schema."
"md#repositories)  key accepts. You can use this multiple times to configure "
"multiple repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--add-repository:** Add the custom repository in the composer.json. If a "
"lock file is present, it will be deleted and an update will be run instead "
"of an install."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid "**--dev:** Install packages listed in `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid "**--no-dev:** Disables installation of require-dev packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--no-scripts:** Disables the execution of the scripts defined in the root "
"package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--no-secure-http:** Disable the secure-http config option temporarily "
"while installing the root package. Use at your own risk. Using this flag is "
"a bad idea."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--keep-vcs:** Skip the deletion of the VCS metadata for the created "
"project. This is mostly useful if you run the command in non-interactive "
"mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid "**--remove-vcs:** Force-remove the VCS metadata without prompting."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid "**--no-install:** Disables installation of the vendors."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:957
msgid ""
"**--ask:** Ask the user to provide a target directory for the new project."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:958
#, no-wrap
msgid "dump-autoload / dumpautoload"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:963
msgid ""
"If you need to update the autoloader because of new classes in a classmap "
"package for example, you can use `dump-autoload` to do that without having "
"to go through an install or update."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:970
msgid ""
"Additionally, it can dump an optimized autoloader that converts PSR-0/4 "
"packages into classmap ones for performance reasons. In large applications "
"with many classes, the autoloader can take up a substantial portion of every "
"request's time. Using classmaps for everything is less convenient in "
"development, but using this option you can still use PSR-0/4 for convenience "
"and classmaps for performance."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--optimize (-o):** Convert PSR-0/4 autoloading to classmap to get a faster "
"autoloader. This is recommended especially for production, but can take a "
"bit of time to run, so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--classmap-authoritative (-a):** Autoload classes from the classmap only.  "
"Implicitly enables `--optimize`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid "**--apcu:** Use APCu to cache found/not-found classes."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--apcu-prefix:** Use a custom prefix for the APCu autoloader cache.  "
"Implicitly enables `--apcu`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--no-dev:** Disables autoload-dev rules. Composer will by default infer "
"this automatically according to the last `install` or `update` `--no-dev` "
"state."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--dev:** Enables autoload-dev rules. Composer will by default infer this "
"automatically according to the last `install` or `update` `--no-dev` state."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--ignore-platform-reqs:** ignore all `php`, `hhvm`, `lib-*` and `ext-*` "
"requirements and skip the [platform check](07-runtime.md#platform-check) for "
"these.  See also the [`platform`](06-config.md#platform) config option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement (`php`, "
"`hhvm`, `lib-*` and `ext-*`) and skip the [platform check](07-runtime."
"md#platform-check) for it.  Multiple requirements can be ignored via "
"wildcard."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:992
msgid ""
"**--strict-psr:** Return a failed exit code (1) if PSR-4 or PSR-0 mapping "
"errors are present. Requires --optimize to work."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:993
#, no-wrap
msgid "clear-cache / clearcache / cc"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:996
msgid "Deletes all content from Composer's cache directories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1000
msgid "**--gc:** Only run garbage collection, not a full cache clear"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1001
#, no-wrap
msgid "licenses"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1005
msgid ""
"Lists the name, version and license of every package installed. Use `--"
"format=json` to get machine-readable output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1010
msgid ""
"**--format:** Format of the output: text, json or summary (default: \"text\")"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1010
msgid "**--no-dev:** Remove dev dependencies from the output"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1011
#, no-wrap
msgid "run-script / run"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1019
msgid "**--timeout:** Set the script timeout in seconds, or 0 for no timeout."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1019
msgid "**--dev:** Sets the dev mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1019
msgid "**--no-dev:** Disable dev mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1019
msgid "**--list (-l):** List user defined scripts."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1022
msgid ""
"To run [scripts](articles/scripts.md) manually you can use this command, "
"give it the script name and optionally any required arguments."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1023
#, no-wrap
msgid "exec"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1028
msgid ""
"Executes a vendored binary/script. You can execute any command and this will "
"ensure that the Composer bin-dir is pushed on your PATH before the command "
"runs."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1032
msgid "**--list (-l):** List the available Composer binaries."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1033
#, no-wrap
msgid "diagnose"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1038
msgid ""
"If you think you found a bug, or something is behaving strangely, you might "
"want to run the `diagnose` command to perform automated checks for many "
"common problems."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1039
#, no-wrap
msgid "php composer.phar diagnose\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1043 ../doc/04-schema.md:920
#, no-wrap
msgid "archive"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1048
msgid ""
"This command is used to generate a zip/tar archive for a given package in a "
"given version. It can also be used to archive your entire project without "
"excluded/ignored files."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1049
#, no-wrap
msgid "php composer.phar archive vendor/package 2.0.21 --format=zip\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
msgid ""
"**--format (-f):** Format of the resulting archive: tar, tar.gz, tar.bz2 or "
"zip (default: \"tar\")."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
msgid "**--dir:** Write the archive to this directory (default: \".\")"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
msgid "**--file:** Write the archive with the given file name."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1060 ../doc/06-config.md:104
#, no-wrap
msgid "audit"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1066
msgid ""
"This command is used to audit the packages you have installed for possible "
"security issues. It checks for and lists security vulnerability advisories "
"according to the [Packagist.org api](https://packagist.org/apidoc#list-"
"security-advisories)."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1068
msgid ""
"The audit command returns the amount of vulnerabilities found. `0` if "
"successful, and up to `255` otherwise."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1069
#, no-wrap
msgid "php composer.phar audit\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1078
msgid "**--no-dev:** Disables auditing of require-dev packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1078
msgid ""
"**--format (-f):** Audit output format. Must be \"table\" (default), "
"\"plain\", \"json\", or \"summary\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1078
msgid ""
"**--locked:** Audit packages from the lock file, regardless of what is "
"currently in vendor dir."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1079
#, no-wrap
msgid "help"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1082
msgid "To get more information about a certain command, you can use `help`."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1083
#, no-wrap
msgid "php composer.phar help install\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1087
#, no-wrap
msgid "Command-line completion"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1091
msgid ""
"Command-line completion can be enabled by following instructions [on this "
"page](https://github.com/bamarni/symfony-console-autocomplete)."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1092
#, no-wrap
msgid "Environment variables"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1098
msgid ""
"You can set a number of environment variables that override certain "
"settings.  Whenever possible it is recommended to specify these settings in "
"the `config` section of `composer.json` instead. It is worth noting that the "
"env vars will always take precedence over the values specified in `composer."
"json`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1099
#, no-wrap
msgid "COMPOSER"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1103
msgid ""
"By setting the `COMPOSER` env variable it is possible to set the filename of "
"`composer.json` to something else."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1105
msgid "For example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1106
#, no-wrap
msgid "COMPOSER=composer-other.json php composer.phar install\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1111
msgid ""
"The generated lock file will use the same name: `composer-other.lock` in "
"this example."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1112
#, no-wrap
msgid "COMPOSER_ALLOW_SUPERUSER"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1117
msgid ""
"If set to 1, this env disables the warning about running commands as root/"
"super user.  It also disables automatic clearing of sudo sessions, so you "
"should really only set this if you use Composer as a super user at all times "
"like in docker containers."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1118
#, no-wrap
msgid "COMPOSER_ALLOW_XDEBUG"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1121
msgid ""
"If set to 1, this env allows running Composer when the Xdebug extension is "
"enabled, without restarting PHP without it."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1122
#, no-wrap
msgid "COMPOSER_AUTH"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1129
msgid ""
"The `COMPOSER_AUTH` var allows you to set up authentication as an "
"environment variable.  The contents of the variable should be a JSON "
"formatted object containing [http-basic, github-oauth, bitbucket-oauth, ... "
"objects as needed](articles/authentication-for-private-packages.md), and "
"following the [spec from the config](06-config.md)."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1130
#, no-wrap
msgid "COMPOSER_BIN_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1134
msgid ""
"By setting this option you can change the `bin` ([Vendor Binaries](articles/"
"vendor-binaries.md))  directory to something other than `vendor/bin`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1135
#, no-wrap
msgid "COMPOSER_CACHE_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1139
msgid ""
"The `COMPOSER_CACHE_DIR` var allows you to change the Composer cache "
"directory, which is also configurable via the [`cache-dir`](06-config."
"md#cache-dir) option."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1145
#, no-wrap
msgid ""
"By default, it points to `C:\\Users\\<user>\\AppData\\Local\\Composer` (or `%LOCALAPPDATA%/Composer`) on Windows.\n"
"On \\*nix systems that follow the [XDG Base\n"
"Directory Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html),\n"
"it points to `$XDG_CACHE_HOME/composer`. On other \\*nix systems and on macOS, it points to\n"
"`$COMPOSER_HOME/cache`.\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1146
#, no-wrap
msgid "COMPOSER_CAFILE"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1150
msgid ""
"By setting this environmental value, you can set a path to a certificate "
"bundle file to be used during SSL/TLS peer verification."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1151
#, no-wrap
msgid "COMPOSER_DISABLE_XDEBUG_WARN"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1154
msgid ""
"If set to 1, this env suppresses a warning when Composer is running with the "
"Xdebug extension enabled."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1155
#, no-wrap
msgid "COMPOSER_DISCARD_CHANGES"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1158
msgid ""
"This env var controls the [`discard-changes`](06-config.md#discard-changes) "
"config option."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1159
#, no-wrap
msgid "COMPOSER_FUND"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1162
msgid "If set to 0, this env suppresses funding notices when installing."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1163
#, no-wrap
msgid "COMPOSER_HOME"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1168
msgid ""
"The `COMPOSER_HOME` var allows you to change the Composer home directory. "
"This is a hidden, global (per-user on the machine) directory that is shared "
"between all projects."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1170
msgid ""
"Use `composer config --global home` to see the location of the home "
"directory."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1176
#, no-wrap
msgid ""
"By default, it points to `C:\\Users\\<user>\\AppData\\Roaming\\Composer` on Windows\n"
"and `/Users/<user>/.composer` on macOS. On \\*nix systems that follow the [XDG Base\n"
"Directory Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html),\n"
"it points to `$XDG_CONFIG_HOME/composer`. On other \\*nix systems, it points to\n"
"`/home/<user>/.composer`.\n"
msgstr ""

#. type: Title ####
#: ../doc/03-cli.md:1177
#, no-wrap
msgid "COMPOSER_HOME/config.json"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1183
msgid ""
"You may put a `config.json` file into the location which `COMPOSER_HOME` "
"points to. Composer will partially (only `config` and `repositories` keys) "
"merge this configuration with your project's `composer.json` when you run "
"the `install` and `update` commands."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1186
msgid ""
"This file allows you to set [repositories](05-repositories.md) and "
"[configuration](06-config.md) for the user's projects."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1189
msgid ""
"In case global configuration matches _local_ configuration, the _local_ "
"configuration in the project's `composer.json` always wins."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1190
#, no-wrap
msgid "COMPOSER_HTACCESS_PROTECT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1194
msgid ""
"Defaults to `1`. If set to `0`, Composer will not create `.htaccess` files "
"in the Composer home, cache, and data directories."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1195
#, no-wrap
msgid "COMPOSER_MEMORY_LIMIT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1198
msgid "If set, the value is used as php's memory_limit."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1199
#, no-wrap
msgid "COMPOSER_MIRROR_PATH_REPOS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1204
msgid ""
"If set to 1, this env changes the default path repository strategy to "
"`mirror` instead of `symlink`. As it is the default strategy being set it "
"can still be overwritten by repository options."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1205
#, no-wrap
msgid "COMPOSER_NO_INTERACTION"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1209
msgid ""
"If set to 1, this env var will make Composer behave as if you passed the `--"
"no-interaction` flag to every command. This can be set on build boxes/CI."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1210
#, no-wrap
msgid "COMPOSER_PROCESS_TIMEOUT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1214
msgid ""
"This env var controls the time Composer waits for commands (such as git "
"commands) to finish executing. The default value is 300 seconds (5 minutes)."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1215
#, no-wrap
msgid "COMPOSER_ROOT_VERSION"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1219
msgid ""
"By setting this var you can specify the version of the root package, if it "
"cannot be guessed from VCS info and is not present in `composer.json`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1220
#, no-wrap
msgid "COMPOSER_VENDOR_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1224
msgid ""
"By setting this var you can make Composer install the dependencies into a "
"directory other than `vendor`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1225
#, no-wrap
msgid "COMPOSER_RUNTIME_ENV"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1233
msgid ""
"This lets you hint under which environment Composer is running, which can "
"help Composer work around some environment specific issues. The only value "
"currently supported is `virtualbox`, which then enables some short `sleep()` "
"calls to wait for the filesystem to have written files properly before we "
"attempt reading them. You can set the environment variable if you use "
"Vagrant or VirtualBox and experience issues with files not being found "
"during installation even though they should be present."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1234
#, no-wrap
msgid "http_proxy or HTTP_PROXY"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1235
#, no-wrap
msgid "HTTP_PROXY_REQUEST_FULLURI"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1236
#, no-wrap
msgid "HTTPS_PROXY_REQUEST_FULLURI"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1237
#, no-wrap
msgid "no_proxy or NO_PROXY"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1241
msgid ""
"See the [proxy documentation](faqs/how-to-use-composer-behind-a-proxy.md) "
"for more details on how to use proxy env vars."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1242
#, no-wrap
msgid "COMPOSER_AUDIT_ABANDONED"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1246
msgid ""
"Set to `ignore`, `report` or `fail` to override the [audit.abandoned](06-"
"config.md#abandoned)  config option."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1247
#, no-wrap
msgid "COMPOSER_MAX_PARALLEL_HTTP"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1253
msgid ""
"Set to an integer to configure how many files can be downloaded in parallel. "
"This defaults to 12 and must be between 1 and 50. If your proxy has issues "
"with concurrency maybe you want to lower this. Increasing it should "
"generally not result in performance gains."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1254
#, no-wrap
msgid "COMPOSER_IPRESOLVE"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1258
msgid ""
"Set to `4` or `6` to force IPv4 or IPv6 DNS resolution. This only works when "
"the curl extension is used for downloads."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1259
#, no-wrap
msgid "COMPOSER_SELF_UPDATE_TARGET"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1262
msgid ""
"If set, makes the self-update command write the new Composer phar file into "
"that path instead of overwriting itself. Useful for updating Composer on a "
"read-only filesystem."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1263
#, no-wrap
msgid "COMPOSER_DISABLE_NETWORK"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1267
msgid ""
"If set to `1`, disables network access (best effort). This can be used for "
"debugging or to run Composer on a plane or a starship with poor connectivity."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1270
msgid ""
"If set to `prime`, GitHub VCS repositories will prime the cache, so it can "
"then be used fully offline with `1`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1271
#, no-wrap
msgid "COMPOSER_DEBUG_EVENTS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1275
msgid ""
"If set to `1`, outputs information about events being dispatched, which can "
"be useful for plugin authors to identify what is firing when exactly."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1276
#, no-wrap
msgid "COMPOSER_NO_AUDIT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1279
msgid ""
"If set to `1`, it is the equivalent of passing the `--no-audit` option to "
"`require`, `update`, `remove` or `create-project` command."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1280
#, no-wrap
msgid "COMPOSER_NO_DEV"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1285
#, no-wrap
msgid ""
"If set to `1`, it is the equivalent of passing the `--update-no-dev` option to `require`\n"
" or the `--no-dev` option to `install` or `update`.  You can override this for a single\n"
"command by setting `COMPOSER_NO_DEV=0`.\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1286
#, no-wrap
msgid "COMPOSER_PREFER_STABLE"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1290
msgid ""
"If set to `1`, it is the equivalent of passing the `--prefer-stable` option "
"to `update` or `require`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1291
#, no-wrap
msgid "COMPOSER_PREFER_LOWEST"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1295
msgid ""
"If set to `1`, it is the equivalent of passing the `--prefer-lowest` option "
"to `update` or `require`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1296
#, no-wrap
msgid "COMPOSER_MINIMAL_CHANGES"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1300
msgid ""
"If set to `1`, it is the equivalent of passing the `--minimal-changes` "
"option to `update`, `require` or `remove`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1301
#, no-wrap
msgid "COMPOSER_IGNORE_PLATFORM_REQ or COMPOSER_IGNORE_PLATFORM_REQS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1305
msgid ""
"If `COMPOSER_IGNORE_PLATFORM_REQS` set to `1`, it is the equivalent of "
"passing the `--ignore-platform-reqs` argument.  Otherwise, specifying a "
"comma separated list in `COMPOSER_IGNORE_PLATFORM_REQ` will ignore those "
"specific requirements."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1307
msgid ""
"For example, if a development workstation will never run database queries, "
"this can be used to ignore the requirement for the database extensions to be "
"available. If you set `COMPOSER_IGNORE_PLATFORM_REQ=ext-oci8`, then composer "
"will allow packages to be installed even if the `oci8` PHP extension is not "
"enabled."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1308
msgid "&larr; [Libraries](02-libraries.md)  | [Schema](04-schema.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/04-schema.md:1
#, no-wrap
msgid "The composer.json schema"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:4
msgid ""
"This chapter will explain all of the fields available in `composer.json`."
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:5
#, no-wrap
msgid "JSON schema"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:10
msgid ""
"We have a [JSON schema](https://json-schema.org) that documents the format "
"and can also be used to validate your `composer.json`. In fact, it is used "
"by the `validate` command. You can find it at: https://getcomposer.org/"
"schema.json"
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:11
#, no-wrap
msgid "Root Package"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:16
msgid ""
"The root package is the package defined by the `composer.json` at the root "
"of your project. It is the main `composer.json` that defines your project "
"requirements."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:21
msgid ""
"Certain fields only apply when in the root package context. One example of "
"this is the `config` field. Only the root package can define configuration.  "
"The config of dependencies is ignored. This makes the `config` field `root-"
"only`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:26
#, no-wrap
msgid ""
"> **Note:** A package can be the root package or not, depending on the context.\n"
"> For example, if your project depends on the `monolog` library, your project\n"
"> is the root package. However, if you clone `monolog` from GitHub in order to\n"
"> fix a bug in it, then `monolog` is the root package.\n"
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:27
#, no-wrap
msgid "Properties"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:29 ../doc/05-repositories.md:105
#, no-wrap
msgid "name"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:33
msgid ""
"The name of the package. It consists of vendor name and project name, "
"separated by `/`. Examples:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:36
msgid "monolog/monolog"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:36
msgid "igorw/event-source"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:39
msgid ""
"The name must be lowercase and consist of words separated by `-`, `.` or "
"`_`.  The complete name should match `^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9]"
"(([_.]|-{1,2})?[a-z0-9]+)*$`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:41
msgid "The `name` property is required for published packages (libraries)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:43
#, no-wrap
msgid "> **Note:** Before Composer version 2.0, a name could contain any character, including white spaces.\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:44
#, no-wrap
msgid "description"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:47
msgid "A short description of the package. Usually this is one line long."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:49
msgid "Required for published packages (libraries)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:50 ../doc/05-repositories.md:105
#, no-wrap
msgid "version"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:54
msgid ""
"The version of the package. In most cases this is not required and should be "
"omitted (see below)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:58
msgid ""
"This must follow the format of `X.Y.Z` or `vX.Y.Z` with an optional suffix "
"of `-dev`, `-patch` (`-p`), `-alpha` (`-a`), `-beta` (`-b`) or `-RC`.  The "
"patch, alpha, beta and RC suffixes can also be followed by a number."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:60 ../doc/04-schema.md:118 ../doc/04-schema.md:969
#: ../doc/articles/versions.md:139 ../doc/articles/versions.md:213
msgid "Examples:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.2"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.1.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "0.2.5"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.0-dev"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.0-alpha3"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.0-beta2"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "1.0.0-RC5"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
msgid "v2.0.4-p1"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:74
msgid ""
"Optional if the package repository can infer the version from somewhere, "
"such as the VCS tag name in the VCS repository. In that case it is also "
"recommended to omit it."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:78
#, no-wrap
msgid ""
"> **Note:** Packagist uses VCS repositories, so the statement above is very\n"
"> much true for Packagist as well. Specifying the version yourself will\n"
"> most likely end up creating problems at some point due to human error.\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:79
#, no-wrap
msgid "type"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:82
msgid "The type of the package. It defaults to `library`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:88
msgid ""
"Package types are used for custom installation logic. If you have a package "
"that needs some special logic, you can define a custom type. This could be a "
"`symfony-bundle`, a `wordpress-plugin` or a `typo3-cms-extension`. These "
"types will all be specific to certain projects, and they will need to "
"provide an installer capable of installing packages of that type."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:90
msgid "Out of the box, Composer supports four types:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:108
msgid "**library:** This is the default. It will copy the files to `vendor`."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:108
msgid ""
"**project:** This denotes a project rather than a library. For example "
"application shells like the [Symfony standard edition](https://github.com/"
"symfony/symfony-standard), CMSs like the [Silverstripe installer](https://"
"github.com/silverstripe/silverstripe-installer)  or full fledged "
"applications distributed as packages. This can for example be used by IDEs "
"to provide listings of projects to initialize when creating a new workspace."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:108
msgid ""
"**metapackage:** An empty package that contains requirements and will "
"trigger their installation, but contains no files and will not write "
"anything to the filesystem. As such, it does not require a dist or source "
"key to be installable."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:108
msgid ""
"**composer-plugin:** A package of type `composer-plugin` may provide an "
"installer for other packages that have a custom type. Read more in the "
"[dedicated article](articles/custom-installers.md)."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:108
msgid ""
"**php-ext** and **php-ext-zend**: These names are reserved for PHP extension "
"packages which are written in C. Do not use these types for packages written "
"in PHP."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:111
msgid ""
"Only use a custom type if you need custom logic during installation. It is "
"recommended to omit this field and have it default to `library`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:112
#, no-wrap
msgid "keywords"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:116
msgid ""
"An array of keywords that the package is related to. These can be used for "
"searching and filtering."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:124
msgid "logging"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:124
msgid "events"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:124
msgid "database"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:124
msgid "redis"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:124
msgid "templating"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:128
#, no-wrap
msgid ""
"> **Note**: Some special keywords trigger `composer require` without the\n"
"> `--dev` option to prompt users if they would like to add these packages to\n"
"> `require-dev` instead of `require`. These are: `dev`, `testing`, `static analysis`.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:133
#, no-wrap
msgid ""
"> **Note**: The range of characters allowed inside the string is restricted to\n"
"> unicode letters or numbers, space `\" \"`, dot `.`, underscore `_` and dash `-`. (Regex: `'{^[\\p{N}\\p{L} ._-]+$}u'`)\n"
"> Using other characters will emit a warning when running `composer validate` and\n"
"> will cause the package to fail updating on Packagist.org.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:135 ../doc/04-schema.md:141 ../doc/04-schema.md:149
#: ../doc/04-schema.md:157 ../doc/04-schema.md:275 ../doc/04-schema.md:308
#: ../doc/04-schema.md:743 ../doc/04-schema.md:774 ../doc/04-schema.md:910
#: ../doc/04-schema.md:919 ../doc/04-schema.md:961 ../doc/04-schema.md:977
#: ../doc/04-schema.md:994 ../doc/04-schema.md:1029
msgid "Optional."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:136
#, no-wrap
msgid "homepage"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:139
msgid "A URL to the website of the project."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:142
#, no-wrap
msgid "readme"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:145
msgid "A relative path to the readme document. Defaults to `README.md`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:147
msgid ""
"This is mainly useful for packages not on GitHub, as for GitHub packages "
"Packagist.org will use the readme API to fetch the one detected by GitHub."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:150
#, no-wrap
msgid "time"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:153
msgid "Release date of the version."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:155
msgid "Must be in `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS` format."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:158
#, no-wrap
msgid "license"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:161
msgid ""
"The license of the package. This can be either a string or an array of "
"strings."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:163
msgid ""
"The recommended notation for the most common licenses is (alphabetical):"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "Apache-2.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "BSD-2-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "BSD-3-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "BSD-4-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "GPL-2.0-only / GPL-2.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "GPL-3.0-only / GPL-3.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "LGPL-2.1-only / LGPL-2.1-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "LGPL-3.0-only / LGPL-3.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:173
msgid "MIT"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:176
msgid ""
"Optional, but it is highly recommended to supply this. More identifiers are "
"listed at the [SPDX Open Source License Registry](https://spdx.org/"
"licenses/)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:178
#, no-wrap
msgid "> **Note:** For closed-source software, you may use `\"proprietary\"` as the license identifier.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:180
msgid "An Example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:181
#, no-wrap
msgid ""
"{\n"
"    \"license\": \"MIT\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:189
msgid ""
"For a package, when there is a choice between licenses (\"disjunctive "
"license\"), multiple can be specified as an array."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:191
msgid "An Example for disjunctive licenses:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:192
#, no-wrap
msgid ""
"{\n"
"    \"license\": [\n"
"        \"LGPL-2.1-only\",\n"
"        \"GPL-3.0-or-later\"\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:202
msgid ""
"Alternatively they can be separated with \"or\" and enclosed in parentheses;"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:203
#, no-wrap
msgid ""
"{\n"
"    \"license\": \"(LGPL-2.1-only or GPL-3.0-or-later)\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:211
msgid ""
"Similarly, when multiple licenses need to be applied (\"conjunctive "
"license\"), they should be separated with \"and\" and enclosed in "
"parentheses."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:212
#, no-wrap
msgid "authors"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:215
msgid "The authors of the package. This is an array of objects."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:217
msgid "Each author object can have following properties:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:222
msgid "**name:** The author's name. Usually their real name."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:222
msgid "**email:** The author's email address."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:222
msgid "**homepage:** URL to the author's website."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:222
msgid ""
"**role:** The author's role in the project (e.g. developer or translator)"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:224 ../doc/04-schema.md:264 ../doc/04-schema.md:287
#: ../doc/04-schema.md:1014 ../doc/05-repositories.md:165
#: ../doc/05-repositories.md:262
msgid "An example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:225
#, no-wrap
msgid ""
"{\n"
"    \"authors\": [\n"
"        {\n"
"            \"name\": \"Nils Adermann\",\n"
"            \"email\": \"naderman@naderman.de\",\n"
"            \"homepage\": \"https://www.naderman.de\",\n"
"            \"role\": \"Developer\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Jordi Boggiano\",\n"
"            \"email\": \"j.boggiano@seld.be\",\n"
"            \"homepage\": \"https://seld.be\",\n"
"            \"role\": \"Developer\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:245
msgid "Optional, but highly recommended."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:246
#, no-wrap
msgid "support"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:249
msgid "Various information to get support about the project."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:251
msgid "Support information includes the following:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**email:** Email address for support."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**issues:** URL to the issue tracker."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**forum:** URL to the forum."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**wiki:** URL to the wiki."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**irc:** IRC channel for support, as irc://server/channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**source:** URL to browse or download the sources."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**docs:** URL to the documentation."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**rss:** URL to the RSS feed."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**chat:** URL to the chat channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:262
msgid "**security:** URL to the vulnerability disclosure policy (VDP)."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:265
#, no-wrap
msgid ""
"{\n"
"    \"support\": {\n"
"        \"email\": \"support@example.org\",\n"
"        \"irc\": \"irc://irc.freenode.org/composer\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:276
#, no-wrap
msgid "funding"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:280
msgid ""
"A list of URLs to provide funding to the package authors for maintenance and "
"development of new functionality."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:282
msgid "Each entry consists of the following"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:285
msgid ""
"**type:** The type of funding, or the platform through which funding can be "
"provided, e.g. patreon, opencollective, tidelift or github."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:285
msgid "**url:** URL to a website with details, and a way to fund the package."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:288
#, no-wrap
msgid ""
"{\n"
"    \"funding\": [\n"
"        {\n"
"            \"type\": \"patreon\",\n"
"            \"url\": \"https://www.patreon.com/phpdoctrine\"\n"
"        },\n"
"        {\n"
"            \"type\": \"tidelift\",\n"
"            \"url\": \"https://tidelift.com/subscription/pkg/packagist-doctrine_doctrine-bundle\"\n"
"        },\n"
"        {\n"
"            \"type\": \"other\",\n"
"            \"url\": \"https://www.doctrine-project.org/sponsorship.html\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:309
#, no-wrap
msgid "Package links"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:314
msgid ""
"All of the following take an object which maps package names to versions of "
"the package via version constraints. Read more about versions [here]"
"(articles/versions.md)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:316 ../doc/04-schema.md:335 ../doc/04-schema.md:349
#: ../doc/04-schema.md:371 ../doc/04-schema.md:396 ../doc/04-schema.md:483
#: ../doc/04-schema.md:520 ../doc/04-schema.md:567 ../doc/04-schema.md:627
#: ../doc/04-schema.md:639 ../doc/04-schema.md:655 ../doc/04-schema.md:686
#: ../doc/04-schema.md:714 ../doc/04-schema.md:735 ../doc/04-schema.md:826
#: ../doc/04-schema.md:931 ../doc/04-schema.md:948 ../doc/06-config.md:446
msgid "Example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:317
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:326
msgid "All links are optional fields."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:333
msgid ""
"`require` and `require-dev` additionally support _stability flags_ ([root-"
"only](04-schema.md#root-package)).  They take the form "
"\"_constraint_@_stability flag_\".  These allow you to further restrict or "
"expand the stability of a package beyond the scope of the [minimum-stability]"
"(#minimum-stability) setting. You can apply them to a constraint, or apply "
"them to an empty _constraint_ if you want to allow unstable packages of a "
"dependency for example."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:336
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*@beta\",\n"
"        \"acme/foo\": \"@dev\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:347
msgid ""
"If one of your dependencies has a dependency on an unstable package you need "
"to explicitly require it as well, along with its sufficient stability flag."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:353
msgid ""
"Assuming `doctrine/doctrine-fixtures-bundle` requires `\"doctrine/data-"
"fixtures\": \"dev-master\"` then inside the root composer.json you need to "
"add the second line below to allow dev releases for the `doctrine/data-"
"fixtures` package :"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:354
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"doctrine/doctrine-fixtures-bundle\": \"dev-master\",\n"
"        \"doctrine/data-fixtures\": \"@dev\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:369
#, no-wrap
msgid ""
"`require` and `require-dev` additionally support explicit references (i.e.\n"
"commit) for dev versions to make sure they are locked to a given state, even\n"
"when you run update. These only work if you explicitly require a dev version\n"
"and append the reference with `#<ref>`. This is also a\n"
"[root-only](04-schema.md#root-package) feature and will be ignored in\n"
"dependencies.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:372
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\",\n"
"        \"acme/foo\": \"1.0.x-dev#abc123\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:387
#, no-wrap
msgid ""
"> **Note:** This feature has severe technical limitations, as the\n"
"> composer.json metadata will still be read from the branch name you specify\n"
"> before the hash. You should therefore only use this as a temporary solution\n"
"> during development to remediate transient issues, until you can switch to\n"
"> tagged releases. The Composer team does not actively support this feature\n"
"> and will not accept bug reports related to it.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:391
msgid ""
"It is also possible to inline-alias a package constraint so that it matches "
"a constraint that it otherwise would not. For more information [see the "
"aliases article](articles/aliases.md)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:394
msgid ""
"`require` and `require-dev` also support references to specific PHP versions "
"and PHP extensions your project needs to run successfully."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:397
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"php\": \">=7.4\",\n"
"        \"ext-mbstring\": \"*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:416
#, no-wrap
msgid ""
"> **Note:** It is important to list PHP extensions your project requires.\n"
"> Not all PHP installations are created equal: some may miss extensions you\n"
"> may consider as standard (such as `ext-mysqli` which is not installed by\n"
"> default in Fedora/CentOS minimal installation systems). Failure to list\n"
"> required PHP extensions may lead to a bad user experience: Composer will\n"
"> install your package without any errors but it will then fail at run-time.\n"
"> The `composer show --platform` command lists all PHP extensions available on\n"
"> your system. You may use it to help you compile the list of extensions you\n"
"> use and require. Alternatively you may use third party tools to analyze\n"
"> your project for the list of extensions used.\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:417
#, no-wrap
msgid "require"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:421
msgid ""
"Map of packages required by this package. The package will not be installed "
"unless those requirements can be met."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:422
#, no-wrap
msgid "require-dev <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:428
msgid ""
"Map of packages required for developing this package, or running tests, etc. "
"The dev requirements of the root package are installed by default.  Both "
"`install` or `update` support the `--no-dev` option that prevents dev "
"dependencies from being installed."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:429
#, no-wrap
msgid "conflict"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:433
msgid ""
"Map of packages that conflict with this version of this package. They will "
"not be allowed to be installed together with your package."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:438
#, no-wrap
msgid ""
"Note that when specifying ranges like `<1.0 >=1.1` in a `conflict` link,\n"
"this will state a conflict with all versions that are less than 1.0 *and* equal\n"
"or newer than 1.1 at the same time, which is probably not what you want. You\n"
"probably want to go for `<1.0 || >=1.1` in this case.\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:439
#, no-wrap
msgid "replace"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:445
msgid ""
"Map of packages that are replaced by this package. This allows you to fork a "
"package, publish it under a different name with its own version numbers, "
"while packages requiring the original package continue to work with your "
"fork because it replaces the original package."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:451
msgid ""
"This is also useful for packages that contain sub-packages, for example the "
"main symfony/symfony package contains all the Symfony Components which are "
"also available as individual packages. If you require the main package it "
"will automatically fulfill any requirement of one of the individual "
"components, since it replaces them."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:456
msgid ""
"Caution is advised when using replace for the sub-package purpose explained "
"above. You should then typically only replace using `self.version` as a "
"version constraint, to make sure the main package only replaces the sub-"
"packages of that exact version, and not any other version, which would be "
"incorrect."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:457
#, no-wrap
msgid "provide"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:464
msgid ""
"Map of packages that are provided by this package. This is mostly useful for "
"implementations of common interfaces. A package could depend on some virtual "
"package e.g. `psr/log-implementation`, any library that implements this "
"logger interface would list it in `provide`. Implementors can then be [found "
"on Packagist.org](https://packagist.org/providers/psr/log-implementation)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:471
msgid ""
"Using `provide` with the name of an actual package rather than a virtual one "
"implies that the code of that package is also shipped, in which case "
"`replace` is generally a better choice. A common convention for packages "
"providing an interface and relying on other packages to provide an "
"implementation (for instance the PSR interfaces) is to use a `-"
"implementation` suffix for the name of the virtual package corresponding to "
"the interface package."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:472
#, no-wrap
msgid "suggest"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:478
msgid ""
"Suggested packages that can enhance or work well with this package. These "
"are informational and are displayed after the package is installed, to give "
"your users a hint that they could add more packages, even though they are "
"not strictly required."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:481
msgid ""
"The format is like package links above, except that the values are free text "
"and not version constraints."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:484
#, no-wrap
msgid ""
"{\n"
"    \"suggest\": {\n"
"        \"monolog/monolog\": \"Allows more advanced logging of the application flow\",\n"
"        \"ext-xml\": \"Needed to support XML format in class Foo\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:493
#, no-wrap
msgid "autoload"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:496
msgid "Autoload mapping for a PHP autoloader."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:499
msgid ""
"[`PSR-4`](https://www.php-fig.org/psr/psr-4/) and [`PSR-0`](http://www.php-"
"fig.org/psr/psr-0/)  autoloading, `classmap` generation and `files` includes "
"are supported."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:502
msgid ""
"PSR-4 is the recommended way since it offers greater ease of use (no need to "
"regenerate the autoloader when you add classes)."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:503
#, no-wrap
msgid "PSR-4"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:510
msgid ""
"Under the `psr-4` key you define a mapping from namespaces to paths, "
"relative to the package root. When autoloading a class like `Foo\\\\Bar\\"
"\\Baz` a namespace prefix `Foo\\\\` pointing to a directory `src/` means "
"that the autoloader will look for a file named `src/Bar/Baz.php` and include "
"it if present. Note that as opposed to the older PSR-0 style, the prefix "
"(`Foo\\\\`) is **not** present in the file path."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:514
msgid ""
"Namespace prefixes must end in `\\\\` to avoid conflicts between similar "
"prefixes.  For example `Foo` would match classes in the `FooBar` namespace "
"so the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` "
"are distinct."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:518
#, no-wrap
msgid ""
"The PSR-4 references are all combined, during install/update, into a single\n"
"key => value array which may be found in the generated file\n"
"`vendor/composer/autoload_psr4.php`.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:521
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": {\n"
"            \"Monolog\\\\\": \"src/\",\n"
"            \"Vendor\\\\Namespace\\\\\": \"\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:534 ../doc/04-schema.md:582
msgid ""
"If you need to search for a same prefix in multiple directories, you can "
"specify them as an array as such:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:535
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:545
msgid ""
"If you want to have a fallback directory where any namespace will be looked "
"for, you can use an empty prefix like:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:546
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"\": \"src/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:554
#, no-wrap
msgid "PSR-0"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:558
msgid ""
"Under the `psr-0` key you define a mapping from namespaces to paths, "
"relative to the package root. Note that this also supports the PEAR-style "
"non-namespaced convention."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:562
msgid ""
"Please note namespace declarations should end in `\\\\` to make sure the "
"autoloader responds exactly. For example `Foo` would match in `FooBar` so "
"the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` are "
"distinct."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:565
#, no-wrap
msgid ""
"The PSR-0 references are all combined, during install/update, into a single key => value\n"
"array which may be found in the generated file `vendor/composer/autoload_namespaces.php`.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:568
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": {\n"
"            \"Monolog\\\\\": \"src/\",\n"
"            \"Vendor\\\\Namespace\\\\\": \"src/\",\n"
"            \"Vendor_Namespace_\": \"src/\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:583
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:595
msgid ""
"The PSR-0 style is not limited to namespace declarations only but may be "
"specified right down to the class level. This can be useful for libraries "
"with only one class in the global namespace. If the php source file is also "
"located in the root of the package, for example, it may be declared like "
"this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:596
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"UniqueGlobalClass\": \"\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:606
msgid ""
"If you want to have a fallback directory where any namespace can be, you can "
"use an empty prefix like:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:607
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"\": \"src/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:615
#, no-wrap
msgid "Classmap"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:621
#, no-wrap
msgid ""
"The `classmap` references are all combined, during install/update, into a single\n"
"key => value array which may be found in the generated file\n"
"`vendor/composer/autoload_classmap.php`. This map is built by scanning for\n"
"classes in all `.php` and `.inc` files in the given directories/files.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:625
msgid ""
"You can use the classmap generation support to define autoloading for all "
"libraries that do not follow PSR-0/4. To configure this you specify all "
"directories or files to search for classes."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:628
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:637
msgid ""
"Wildcards (`*`) are also supported in a classmap paths, and expand to match "
"any directory name:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:640
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"classmap\": [\"src/addons/*/lib/\", \"3rd-party/*\", \"Something.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:648
#, no-wrap
msgid "Files"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:653
msgid ""
"If you want to require certain files explicitly on every request then you "
"can use the `files` autoloading mechanism. This is useful if your package "
"includes PHP functions that cannot be autoloaded by PHP."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:656
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"files\": [\"src/MyLibrary/functions.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:668
msgid ""
"Files autoload rules are included whenever `vendor/autoload.php` is "
"included, right after the autoloader is registered. The order of inclusion "
"depends on package dependencies so that if package A depends on B, files in "
"package B will be included first to ensure package B is fully initialized "
"and ready to be used when files from package A are included."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:670
msgid ""
"If two packages have the same amount of dependents or no dependencies, the "
"order is alphabetical."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:674
msgid ""
"Files from the root package are always loaded last, and you cannot use files "
"autoloading yourself to override functions from your dependencies. If you "
"want to achieve that we recommend you include your own functions *before* "
"including Composer's `vendor/autoload.php`."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:675
#, no-wrap
msgid "Exclude files from classmaps"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:680
msgid ""
"If you want to exclude some files or folders from the classmap you can use "
"the `exclude-from-classmap` property.  This might be useful to exclude test "
"classes in your live environment, for example, as those will be skipped from "
"the classmap even when building an optimized autoloader."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:684
msgid ""
"The classmap generator will ignore all files in the paths configured here. "
"The paths are absolute from the package root directory (i.e. composer.json "
"location), and support `*` to match anything but a slash, and `**` to match "
"anything. `**` is implicitly added to the end of the paths."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:687
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"exclude-from-classmap\": [\"/Tests/\", \"/test/\", \"/tests/\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:695
#, no-wrap
msgid "Optimizing the autoloader"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:701
msgid ""
"The autoloader can have quite a substantial impact on your request time "
"(50-100ms per request in large frameworks using a lot of classes). See the "
"[article about optimizing the autoloader](articles/autoloader-optimization."
"md)  for more details on how to reduce this impact."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:702
#, no-wrap
msgid "autoload-dev <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:705
msgid "This section allows defining autoload rules for development purposes."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:709
msgid ""
"Classes needed to run the test suite should not be included in the main "
"autoload rules to avoid polluting the autoloader in production and when "
"other people use your package as a dependency."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:712
msgid ""
"Therefore, it is a good idea to rely on a dedicated path for your unit tests "
"and to add it within the autoload-dev section."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:715
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"MyLibrary\\\\\": \"src/\" }\n"
"    },\n"
"    \"autoload-dev\": {\n"
"        \"psr-4\": { \"MyLibrary\\\\Tests\\\\\": \"tests/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:726
#, no-wrap
msgid "include-path"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:731
#, no-wrap
msgid ""
"> **DEPRECATED**: This is only present to support legacy projects, and all new code\n"
"> should preferably use autoloading. As such it is a deprecated practice, but the\n"
"> feature itself will not likely disappear from Composer.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:733
msgid "A list of paths which should get appended to PHP's `include_path`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:736
#, no-wrap
msgid ""
"{\n"
"    \"include-path\": [\"lib/\"]\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:744
#, no-wrap
msgid "target-dir"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:749
#, no-wrap
msgid ""
"> **DEPRECATED**: This is only present to support legacy PSR-0 style autoloading,\n"
"> and all new code should preferably use PSR-4 without target-dir and projects\n"
"> using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:751
msgid "Defines the installation target."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:754
msgid ""
"In case the package root is below the namespace declaration you cannot "
"autoload properly. `target-dir` solves this problem."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:761
msgid ""
"An example is Symfony. There are individual packages for the components. The "
"Yaml component is under `Symfony\\Component\\Yaml`. The package root is that "
"`Yaml` directory. To make autoloading possible, we need to make sure that it "
"is not installed into `vendor/symfony/yaml`, but instead into `vendor/"
"symfony/yaml/Symfony/Component/Yaml`, so that the autoloader can load it "
"from `vendor/symfony/yaml`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:763
msgid "To do that, `autoload` and `target-dir` are defined as follows:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:764
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" }\n"
"    },\n"
"    \"target-dir\": \"Symfony/Component/Yaml\"\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:775
#, no-wrap
msgid "minimum-stability <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:780
msgid ""
"This defines the default behavior for filtering packages by stability. This "
"defaults to `stable`, so if you rely on a `dev` package, you should specify "
"it in your file to avoid surprises."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:786
msgid ""
"All versions of each package are checked for stability, and those that are "
"less stable than the `minimum-stability` setting will be ignored when "
"resolving your project dependencies. (Note that you can also specify "
"stability requirements on a per-package basis using stability flags in the "
"version constraints that you specify in a `require` block (see [package "
"links](#package-links) for more details)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:789
msgid ""
"Available options (in order of stability) are `dev`, `alpha`, `beta`, `RC`, "
"and `stable`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:790
#, no-wrap
msgid "prefer-stable <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:796
msgid ""
"When this is enabled, Composer will prefer more stable packages over "
"unstable ones when finding compatible stable packages is possible. If you "
"require a dev version or only alphas are available for a package, those will "
"still be selected granted that the minimum-stability allows for it."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:798
msgid "Use `\"prefer-stable\": true` to enable."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:799
#, no-wrap
msgid "repositories <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:802
msgid "Custom package repositories to use."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:805
msgid ""
"By default Composer only uses the packagist repository. By specifying "
"repositories you can get packages from elsewhere."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:809
msgid ""
"Repositories are not resolved recursively. You can only add them to your "
"main `composer.json`. Repository declarations of dependencies' `composer."
"json`s are ignored."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:811
msgid "The following repository types are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:822
msgid ""
"**composer:** A Composer repository is a `packages.json` file served via the "
"network (HTTP, FTP, SSH), that contains a list of `composer.json` objects "
"with additional `dist` and/or `source` information. The `packages.json` file "
"is loaded using a PHP stream. You can set extra options on that stream using "
"the `options` parameter."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:822
msgid ""
"**vcs:** The version control system repository can fetch packages from git, "
"svn, fossil and hg repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:822
msgid ""
"**package:** If you depend on a project that does not have any support for "
"Composer whatsoever you can define the package inline using a `package` "
"repository. You basically inline the `composer.json` object."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:824
msgid ""
"For more information on any of these, see [Repositories](05-repositories.md)."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:827
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"http://packages.example.com\"\n"
"        },\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://packages.example.com\",\n"
"            \"options\": {\n"
"                \"ssl\": {\n"
"                    \"verify_peer\": \"true\"\n"
"                }\n"
"            }\n"
"        },\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/Seldaek/monolog\"\n"
"        },\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": {\n"
"                \"name\": \"smarty/smarty\",\n"
"                \"version\": \"3.1.7\",\n"
"                \"dist\": {\n"
"                    \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"                    \"type\": \"zip\"\n"
"                },\n"
"                \"source\": {\n"
"                    \"url\": \"https://smarty-php.googlecode.com/svn/\",\n"
"                    \"type\": \"svn\",\n"
"                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n"
"                }\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:871
#, no-wrap
msgid ""
"> **Note:** Order is significant here. When looking for a package, Composer\n"
"will look from the first to the last repository, and pick the first match.\n"
"By default Packagist is added last which means that custom repositories can\n"
"override packages from it.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:874
msgid ""
"Using JSON object notation is also possible. However, JSON key/value pairs "
"are to be considered unordered so consistent behaviour cannot be guaranteed."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:875
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": {\n"
"        \"foo\": {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"http://packages.foo.com\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:886
#, no-wrap
msgid "config <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:890
msgid ""
"A set of configuration options. It is only used for projects. See [Config]"
"(06-config.md) for a description of each individual option."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:891
#, no-wrap
msgid "scripts <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:895
msgid ""
"Composer allows you to hook into various parts of the installation process "
"through the use of scripts."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:897
msgid "See [Scripts](articles/scripts.md) for events details and examples."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:898
#, no-wrap
msgid "extra"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:901
msgid "Arbitrary extra data for consumption by `scripts`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:904
msgid ""
"This can be virtually anything. To access it from within a script event "
"handler, you can do:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/04-schema.md:905
#, no-wrap
msgid "$extra = $event->getComposer()->getPackage()->getExtra();\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:911
#, no-wrap
msgid "bin"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:915
msgid ""
"A set of files that should be treated as binaries and made available into "
"the `bin-dir` (from config)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:917
msgid "See [Vendor Binaries](articles/vendor-binaries.md) for more details."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:923
msgid "A set of options for creating package archives."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:925
msgid "The following options are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:929
msgid ""
"**name:** Allows configuring base name for archive.  By default (if not "
"configured, and `--file` is not passed as command-line argument), "
"`preg_replace('#[^a-z0-9-_]#i', '-', name)` is used."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:932
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"org/strangeName\",\n"
"    \"archive\": {\n"
"        \"name\": \"Strange_name\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:946
msgid ""
"**exclude:** Allows configuring a list of patterns for excluded paths. The "
"pattern syntax matches .gitignore files. A leading exclamation mark (!) will "
"result in any matching files to be included even if a previous pattern "
"excluded them. A leading slash will only match at the beginning of the "
"project relative path. An asterisk will not expand to a directory separator."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:949
#, no-wrap
msgid ""
"{\n"
"    \"archive\": {\n"
"        \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:959
msgid ""
"The example will include `/dir/foo/bar/file`, `/foo/bar/baz`, `/file.php`, `/"
"foo/my.test` but it will exclude `/foo/bar/any`, `/foo/baz`, and `/my.test`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:962 ../doc/06-config.md:138
#, no-wrap
msgid "abandoned"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:965
msgid "Indicates whether this package has been abandoned."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:967
msgid ""
"It can be boolean or a package name/URL pointing to a recommended "
"alternative."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:973
msgid ""
"Use `\"abandoned\": true` to indicate this package is abandoned.  Use "
"`\"abandoned\": \"monolog/monolog\"` to indicate this package is abandoned, "
"and that the recommended alternative is `monolog/monolog`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:975
msgid "Defaults to false."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:978
#, no-wrap
msgid "_comment"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:981
msgid ""
"Top level key used as a place to store comments (it can be a string or array "
"of strings)."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:982
#, no-wrap
msgid ""
"{\n"
"    \"_comment\": [\n"
"        \"The package foo/bar was required for business logic\",\n"
"        \"Remove package foo/baz when removing foo/bar\"\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:992
msgid "Defaults to empty."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:995
#, no-wrap
msgid "non-feature-branches"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:999
msgid ""
"A list of regex patterns of branch names that are non-numeric (e.g. "
"\"latest\" or something), that will NOT be handled as feature branches. This "
"is an array of strings."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1005
msgid ""
"If you have non-numeric branch names, for example like \"latest\", "
"\"current\", \"latest-stable\" or something, that do not look like a version "
"number, then Composer handles such branches as feature branches. This means "
"it searches for parent branches, that look like a version or ends at special "
"branches (like master), and the root package version number becomes the "
"version of the parent branch or at least master or something."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1009
msgid ""
"To handle non-numeric named branches as versions instead of searching for a "
"parent branch with a valid version or special branch name like master, you "
"can set patterns for branch names that should be handled as dev version "
"branches."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1012
msgid ""
"This is really helpful when you have dependencies using \"self.version\", so "
"that not dev-master, but the same branch is installed (in the example: "
"latest-testing)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1017
msgid ""
"If you have a testing branch, that is heavily maintained during a testing "
"phase and is deployed to your staging environment, normally `composer show -"
"s` will give you `versions : * dev-master`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1019
msgid ""
"If you configure `latest-.*` as a pattern for non-feature-branches like this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:1020
#, no-wrap
msgid ""
"{\n"
"    \"non-feature-branches\": [\"latest-.*\"]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1027
msgid ""
"Then `composer show -s` will give you `versions : * dev-latest-testing`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1030
msgid ""
"&larr; [Command-line interface](03-cli.md)  | [Repositories](05-repositories."
"md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/05-repositories.md:1
#, no-wrap
msgid "Repositories"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:5
msgid ""
"This chapter will explain the concept of packages and repositories, what "
"kinds of repositories are available, and how they work."
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:6
#, no-wrap
msgid "Concepts"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:10
msgid ""
"Before we look at the different types of repositories that exist, we need to "
"understand some basic concepts that Composer is built on."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:11 ../doc/05-repositories.md:507
#, no-wrap
msgid "Package"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:18
msgid ""
"Composer is a dependency manager. It installs packages locally. A package is "
"essentially a directory containing something. In this case it is PHP code, "
"but in theory it could be anything. And it contains a package description "
"which has a name and a version. The name and the version are used to "
"identify the package."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:22
msgid ""
"In fact, internally, Composer sees every version as a separate package. "
"While this distinction does not matter when you are using Composer, it's "
"quite important when you want to change it."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:27
msgid ""
"In addition to the name and the version, there is useful metadata. The "
"information most relevant for installation is the source definition, which "
"describes where to get the package contents. The package data points to the "
"contents of the package. And there are two options here: dist and source."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:30
#, no-wrap
msgid ""
"**Dist:** The dist is a packaged version of the package data. Usually a\n"
"released version, usually a stable release.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:34
#, no-wrap
msgid ""
"**Source:** The source is used for development. This will usually originate\n"
"from a source code repository, such as git. You can fetch this when you want\n"
"to modify the downloaded package.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:38
msgid ""
"Packages can supply either of these, or even both. Depending on certain "
"factors, such as user-supplied options and stability of the package, one "
"will be preferred."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:39
#, no-wrap
msgid "Repository"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:43
msgid ""
"A repository is a package source. It's a list of packages/versions. Composer "
"will look in all your repositories to find the packages your project "
"requires."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:46
msgid ""
"By default, only the Packagist.org repository is registered in Composer. You "
"can add more repositories to your project by declaring them in `composer."
"json`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:51
msgid ""
"Repositories are only available to the root package and the repositories "
"defined in your dependencies will not be loaded. Read the [FAQ entry](faqs/"
"why-cant-composer-load-repositories-recursively.md) if you want to learn why."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:57
msgid ""
"When resolving dependencies, packages are looked up from repositories from "
"top to bottom, and by default, as soon as a package is found in one, "
"Composer stops looking in other repositories. Read the [repository "
"priorities](articles/repository-priorities.md) article for more details and "
"to see how to change this behavior."
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:58
#, no-wrap
msgid "Types"
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:60
#, no-wrap
msgid "Composer"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:64
msgid ""
"The main repository type is the `composer` repository. It uses a single "
"`packages.json` file that contains all of the package metadata."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:70
msgid ""
"This is also the repository type that packagist uses. To reference a "
"`composer` repository, supply the path before the `packages.json` file.  In "
"the case of packagist, that file is located at `/packages.json`, so the URL "
"of the repository would be `repo.packagist.org`. For `example.org/packages."
"json` the repository URL would be `example.org`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:71
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://example.org\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:82
#, no-wrap
msgid "packages"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:85
msgid ""
"The only required field is `packages`. The JSON structure is as follows:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:86
#, no-wrap
msgid ""
"{\n"
"    \"packages\": {\n"
"        \"vendor/package-name\": {\n"
"            \"dev-master\": { @composer.json },\n"
"            \"1.0.x-dev\": { @composer.json },\n"
"            \"0.0.1\": { @composer.json },\n"
"            \"1.0.0\": { @composer.json }\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:101
msgid ""
"The `@composer.json` marker would be the contents of the `composer.json` "
"from that package version including as a minimum:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:105
msgid "dist or source"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:107
msgid "Here is a minimal package definition:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:108
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"smarty/smarty\",\n"
"    \"version\": \"3.1.7\",\n"
"    \"dist\": {\n"
"        \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"        \"type\": \"zip\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:120
msgid ""
"It may include any of the other fields specified in the [schema](04-schema."
"md)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:121
#, no-wrap
msgid "notify-batch"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:126
msgid ""
"The `notify-batch` field allows you to specify a URL that will be called "
"every time a user installs a package. The URL can be either an absolute path "
"(that will use the same domain as the repository), or a fully qualified URL."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:128
msgid "An example value:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:129
#, no-wrap
msgid ""
"{\n"
"    \"notify-batch\": \"/downloads/\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:138
msgid ""
"For `example.org/packages.json` containing a `monolog/monolog` package, this "
"would send a `POST` request to `example.org/downloads/` with following JSON "
"request body:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:139
#, no-wrap
msgid ""
"{\n"
"    \"downloads\": [\n"
"        {\"name\": \"monolog/monolog\", \"version\": \"1.2.1.0\"}\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:149
msgid ""
"The version field will contain the normalized representation of the version "
"number."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:151 ../doc/05-repositories.md:206
#: ../doc/05-repositories.md:224 ../doc/05-repositories.md:247
msgid "This field is optional."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:152
#, no-wrap
msgid "metadata-url, available-packages and available-package-patterns"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:157
msgid ""
"The `metadata-url` field allows you to provide a URL template to serve all "
"packages which are in the repository. It must contain the placeholder "
"`%package%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:163
msgid ""
"This field is new in Composer v2, and is prioritised over the `provider-"
"includes` and `providers-url` fields if both are present.  For compatibility "
"with both Composer v1 and v2 you ideally want to provide both. New "
"repository implementations may only need to support v2 however."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:166
#, no-wrap
msgid ""
"{\n"
"    \"metadata-url\": \"/p2/%package%.json\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:176
msgid ""
"Whenever Composer looks for a package, it will replace `%package%` by the "
"package name, and fetch that URL. If dev stability is allowed for the "
"package, it will also load the URL again with `$packageName~dev` (e.g.  `/p2/"
"foo/bar~dev.json` to look for `foo/bar`'s dev versions)."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:180
msgid ""
"The `foo/bar.json` and `foo/bar~dev.json` files containing package versions "
"MUST contain only versions for the foo/bar package, as `{\"packages\":{\"foo/"
"bar\":[ ... versions here ... ]}}`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:183
msgid ""
"Caching is done via the use of If-Modified-Since header, so make sure you "
"return Last-Modified headers and that they are accurate."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:191
msgid ""
"The array of versions can also optionally be minified using "
"`Composer\\MetadataMinifier\\MetadataMinifier::minify()` from [composer/"
"metadata-minifier](https://packagist.org/packages/composer/metadata-"
"minifier).  If you do that, you should add a `\"minified\": "
"\"composer/2.0\"` key at the top level to indicate to Composer it must "
"expand the version list back into the original data. See https://repo."
"packagist.org/p2/monolog/monolog.json for an example."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:196
msgid ""
"Any requested package which does not exist MUST return a 404 status code, "
"which will indicate to Composer that this package does not exist in your "
"repository. Make sure the 404 response is fast to avoid blocking Composer.  "
"Avoid redirects to alternative 404 pages."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:204
msgid ""
"If your repository only has a small number of packages, and you want to "
"avoid the 404-requests, you can also specify an `\"available-packages\"` key "
"in `packages.json` which should be an array with all the package names that "
"your repository contains. Alternatively you can specify an `\"available-"
"package-patterns\"` key which is an array of package name patterns (with `*` "
"matching any string, e.g. `vendor/*` would make Composer look up every "
"matching package name in this repository)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:207
#, no-wrap
msgid "providers-api"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:212
msgid ""
"The `providers-api` field allows you to provide a URL template to serve all "
"packages which provide a given package name, but not the package which has "
"that name. It must contain the placeholder `%package%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:216
msgid ""
"For example https://packagist.org/providers/monolog/monolog.json lists some "
"package which have a \"provide\" rule for monolog/monolog, but it does not "
"list monolog/monolog itself."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:217
#, no-wrap
msgid ""
"{\n"
"    \"providers-api\": \"https://packagist.org/providers/%package%.json\",\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:225
#, no-wrap
msgid "list"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:231
msgid ""
"The `list` field allows you to return the names of packages which match a "
"given filter (or all names if no filter is present). It should accept an "
"optional `?filter=xx` query param, which can contain `*` as wildcards "
"matching any substring."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:233
msgid "Replace/provide rules should not be considered here."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:235
msgid "It must return an array of package names:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:235
#, no-wrap
msgid ""
"{\n"
"    \"packageNames\": [\n"
"        \"a/b\",\n"
"        \"c/d\"\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:245
msgid ""
"See <https://packagist.org/packages/list.json?filter=composer/*> for example."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:248
#, no-wrap
msgid "provider-includes and providers-url"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:253
msgid ""
"The `provider-includes` field allows you to list a set of files that list "
"package names provided by this repository. The hash should be a sha256 of "
"the files in this case."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:257
msgid ""
"The `providers-url` describes how provider files are found on the server. It "
"is an absolute path from the repository root. It must contain the "
"placeholders `%package%` and `%hash%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:260
msgid ""
"These fields are used by Composer v1, or if your repository does not have "
"the `metadata-url` field set."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:263
#, no-wrap
msgid ""
"{\n"
"    \"provider-includes\": {\n"
"        \"providers-a.json\": {\n"
"            \"sha256\": \"f5b4bc0b354108ef08614e569c1ed01a2782e67641744864a74e788982886f4c\"\n"
"        },\n"
"        \"providers-b.json\": {\n"
"            \"sha256\": \"b38372163fac0573053536f5b8ef11b86f804ea8b016d239e706191203f6efac\"\n"
"        }\n"
"    },\n"
"    \"providers-url\": \"/p/%package%$%hash%.json\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:279
msgid ""
"Those files contain lists of package names and hashes to verify the file "
"integrity, for example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:280
#, no-wrap
msgid ""
"{\n"
"    \"providers\": {\n"
"        \"acme/foo\": {\n"
"            \"sha256\": \"38968de1305c2e17f4de33aea164515bc787c42c7e2d6e25948539a14268bb82\"\n"
"        },\n"
"        \"acme/bar\": {\n"
"            \"sha256\": \"4dd24c930bd6e1103251306d6336ac813b563a220d9ca14f4743c032fb047233\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:298
msgid ""
"The file above declares that acme/foo and acme/bar can be found in this "
"repository, by loading the file referenced by `providers-url`, replacing "
"`%package%` by the vendor namespaced package name and `%hash%` by the sha256 "
"field. Those files themselves contain package definitions as described "
"[above](#packages)."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:301
msgid ""
"These fields are optional. You probably don't need them for your own custom "
"repository."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:302
#, no-wrap
msgid "cURL or stream options"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:310
msgid ""
"The repository is accessed either using cURL (Composer 2 with ext-curl "
"enabled)  or PHP streams. You can set extra options using the `options` "
"parameter. For PHP streams, you can set any valid PHP stream context option. "
"See [Context options and parameters](https://php.net/manual/en/context.php) "
"for more information. When cURL is used, only a limited set of `http` and "
"`ssl` options can be configured."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:311
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://example.org\",\n"
"            \"options\": {\n"
"                \"http\": {\n"
"                    \"timeout\": 60\n"
"                }\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/package\": \"^1.0\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:330
#, no-wrap
msgid "VCS"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:335
msgid ""
"VCS stands for version control system. This includes versioning systems like "
"git, svn, fossil or hg. Composer has a repository type for installing "
"packages from these systems."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:336
#, no-wrap
msgid "Loading a package from a VCS repository"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:349
msgid ""
"There are a few use cases for this. The most common one is maintaining your "
"own fork of a third party library. If you are using a certain library for "
"your project, and you decide to change something in the library, you will "
"want your project to use the patched version. If the library is on GitHub "
"(this is the case most of the time), you can fork it there and push your "
"changes to your fork. After that you update the project's `composer.json`. "
"All you have to do is add your fork as a repository and update the version "
"constraint to point to your custom branch. In `composer.json` only, you "
"should prefix your custom branch name with `\"dev-\"` (without making it "
"part of the actual branch name). For version constraint naming conventions "
"see [Libraries](02-libraries.md) for more information."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:351
msgid ""
"Example assuming you patched monolog to fix a bug in the `bugfix` branch:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:352
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/igorw/monolog\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"dev-bugfix\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:368
msgid ""
"When you run `php composer.phar update`, you should get your modified "
"version of `monolog/monolog` instead of the one from packagist."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:375
msgid ""
"Note that you should not rename the package unless you really intend to fork "
"it in the long term, and completely move away from the original package.  "
"Composer will correctly pick your package over the original one since the "
"custom repository has priority over packagist. If you want to rename the "
"package, you should do so in the default (often master) branch and not in a "
"feature branch, since the package name is taken from the default branch."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:379
msgid ""
"Also note that the override will not work if you change the `name` property "
"in your forked repository's `composer.json` file as this needs to match the "
"original for the override to work."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:383
msgid ""
"If other dependencies rely on the package you forked, it is possible to "
"inline-alias it so that it matches a constraint that it otherwise would "
"not.  For more information [see the aliases article](articles/aliases.md)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:384
#, no-wrap
msgid "Using private repositories"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:388
msgid ""
"Exactly the same solution allows you to work with your private repositories "
"at GitHub and Bitbucket:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:389
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\":  \"git@bitbucket.org:vendor/my-private-repo.git\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"vendor/my-private-repo\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:404
msgid "The only requirement is the installation of SSH keys for a git client."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:405
#, no-wrap
msgid "Git alternatives"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:409
msgid ""
"Git is not the only version control system supported by the VCS repository.  "
"The following are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
msgid "**Git:** [git-scm.com](https://git-scm.com)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
msgid "**Subversion:** [subversion.apache.org](https://subversion.apache.org)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
msgid "**Mercurial:** [mercurial-scm.org](https://www.mercurial-scm.org)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
msgid "**Fossil**: [fossil-scm.org](https://www.fossil-scm.org/)"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:420
msgid ""
"To get packages from these systems you need to have their respective clients "
"installed. That can be inconvenient. And for this reason there is special "
"support for GitHub and Bitbucket that use the APIs provided by these sites, "
"to fetch the packages without having to install the version control system. "
"The VCS repository provides `dist`s for them that fetch the packages as zips."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:423
msgid "**GitHub:** [github.com](https://github.com) (Git)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:423
msgid "**Bitbucket:** [bitbucket.org](https://bitbucket.org) (Git)"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:428
msgid ""
"The VCS driver to be used is detected automatically based on the URL. "
"However, should you need to specify one for whatever reason, you can use "
"`bitbucket`, `github`, `gitlab`, `perforce`, `fossil`, `git`, `svn` or `hg` "
"as the repository type instead of `vcs`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:433
msgid ""
"If you set the `no-api` key to `true` on a github repository it will clone "
"the repository as it would with any other git repository instead of using "
"the GitHub API. But unlike using the `git` driver directly, Composer will "
"still attempt to use github's zip files."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:438
msgid ""
"Please note: * **To let Composer choose which driver to use** the repository "
"type needs to be defined as \"vcs\" * **If you already used a private "
"repository**, this means Composer should have cloned it in cache. If you "
"want to install the same package with drivers, remember to launch the "
"command `composer clearcache` followed by the command `composer update` to "
"update Composer cache and install the package from dist.  * VCS driver `git-"
"bitbucket` is deprecated in favor of `bitbucket`"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:439
#, no-wrap
msgid "Bitbucket Driver Configuration"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:442
#, no-wrap
msgid "> **Note that the repository endpoint for Bitbucket needs to be https rather than git.**\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:445
msgid ""
"After setting up your bitbucket repository, you will also need to [set up "
"authentication](articles/authentication-for-private-packages.md#bitbucket-"
"oauth)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:446
#, no-wrap
msgid "Subversion Options"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:453
msgid ""
"Since Subversion has no native concept of branches and tags, Composer "
"assumes by default that code is located in `$url/trunk`, `$url/branches` and "
"`$url/tags`. If your repository has a different layout you can change those "
"values. For example if you used capitalized names you could configure the "
"repository like this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:454
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"http://svn.example.org/projectA/\",\n"
"            \"trunk-path\": \"Trunk\",\n"
"            \"branches-path\": \"Branches\",\n"
"            \"tags-path\": \"Tags\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:470
msgid ""
"If you have no branches or tags directory you can disable them entirely by "
"setting the `branches-path` or `tags-path` to `false`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:475
msgid ""
"If the package is in a subdirectory, e.g. `/trunk/foo/bar/composer.json` and "
"`/tags/1.0/foo/bar/composer.json`, then you can make Composer access it by "
"setting the `\"package-path\"` option to the sub-directory, in this example "
"it would be `\"package-path\": \"foo/bar/\"`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:478
msgid ""
"If you have a private Subversion repository you can save credentials in the "
"http-basic section of your config (See [Schema](04-schema.md)):"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:479
#, no-wrap
msgid ""
"{\n"
"    \"http-basic\": {\n"
"        \"svn.example.org\": {\n"
"            \"username\": \"username\",\n"
"            \"password\": \"password\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:494
msgid ""
"If your Subversion client is configured to store credentials by default "
"these credentials will be saved for the current user and existing saved "
"credentials for this server will be overwritten. To change this behavior by "
"setting the `\"svn-cache-credentials\"` option in your repository "
"configuration:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:495
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"http://svn.example.org/projectA/\",\n"
"            \"svn-cache-credentials\": false\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:512
msgid ""
"If you want to use a project that does not support Composer through any of "
"the means above, you still can define the package yourself by using a "
"`package` repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:517
msgid ""
"Basically, you define the same information that is included in the "
"`composer` repository's `packages.json`, but only for a single package. "
"Again, the minimum required fields are `name`, `version`, and either of "
"`dist` or `source`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:519
msgid "Here is an example for the smarty template engine:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:520
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": {\n"
"                \"name\": \"smarty/smarty\",\n"
"                \"version\": \"3.1.7\",\n"
"                \"dist\": {\n"
"                    \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"                    \"type\": \"zip\"\n"
"                },\n"
"                \"source\": {\n"
"                    \"url\": \"http://smarty-php.googlecode.com/svn/\",\n"
"                    \"type\": \"svn\",\n"
"                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n"
"                },\n"
"                \"autoload\": {\n"
"                    \"classmap\": [\"libs/\"]\n"
"                }\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"smarty/smarty\": \"3.1.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:550
msgid ""
"Typically, you would leave the source part off, as you don't really need it."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:553
msgid ""
"If a source key is included, the reference field should be a reference to "
"the version that will be installed.  Where the type field is `git`, this "
"will the be the commit id, branch or tag name."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:556
#, no-wrap
msgid ""
"> **Note**: It is not recommended to use a git branch name for the reference field. While this is valid since it is supported by `git checkout`,\n"
"> branch names are mutable so cannot be locked.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:558
msgid ""
"Where the type field is `svn`, the reference field should contain the "
"reference that gets appended to the URL when running `svn co`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:566
#, no-wrap
msgid ""
"> **Note**: This repository type has a few limitations and should be avoided\n"
"> whenever possible:\n"
">\n"
"> - Composer will not update the package unless you change the `version` field.\n"
"> - Composer will not update the commit references, so if you use `master` as\n"
">   reference you will have to delete the package to force an update, and will\n"
">   have to deal with an unstable lock file.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:568
msgid ""
"The `\"package\"` key in a `package` repository may be set to an array to "
"define multiple versions of a package:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:569
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": [\n"
"                {\n"
"                    \"name\": \"foo/bar\",\n"
"                    \"version\": \"1.0.0\",\n"
"                    ...\n"
"                },\n"
"                {\n"
"                    \"name\": \"foo/bar\",\n"
"                    \"version\": \"2.0.0\",\n"
"                    ...\n"
"                }\n"
"            ]\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:591
#, no-wrap
msgid "Hosting your own"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:595
msgid ""
"While you will probably want to put your packages on packagist most of the "
"time, there are some use cases for hosting your own repository."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:598
msgid ""
"**Private company packages:** If you are part of a company that uses "
"Composer for their packages internally, you might want to keep those "
"packages private."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:603
msgid ""
"**Separate ecosystem:** If you have a project which has its own ecosystem, "
"and the packages aren't really reusable by the greater PHP community, you "
"might want to keep them separate to packagist. An example of this would be "
"WordPress plugins."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:606
msgid ""
"For hosting your own packages, a native `composer` type of repository is "
"recommended, which provides the best performance."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:608
msgid "There are a few tools that can help you create a `composer` repository."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:609
#, no-wrap
msgid "Private Packagist"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:614
msgid ""
"[Private Packagist](https://packagist.com/) is a hosted or self-hosted "
"application providing private package hosting as well as mirroring of "
"GitHub, Packagist.org and other package repositories."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:616
msgid "Check out [Packagist.com](https://packagist.com/) for more information."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:617
#, no-wrap
msgid "Satis"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:621
msgid ""
"Satis is a static `composer` repository generator. It is a bit like an "
"ultra- lightweight, static file-based version of packagist."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:625
msgid ""
"You give it a `composer.json` containing repositories, typically VCS and "
"package repository definitions. It will fetch all the packages that are "
"`require`d and dump a `packages.json` that is your `composer` repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:629
msgid ""
"Check [the satis GitHub repository](https://github.com/composer/satis) and "
"the [handling private packages article](articles/handling-private-packages."
"md) for more information."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:630
#, no-wrap
msgid "Artifact"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:638
msgid ""
"There are some cases, when there is no ability to have one of the previously "
"mentioned repository types online, even the VCS one. A typical example could "
"be cross-organisation library exchange through build artifacts. Of course, "
"most of the time these are private. To use these archives as-is, one can use "
"a repository of type `artifact` with a folder containing ZIP or TAR archives "
"of those private packages:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:639
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"artifact\",\n"
"            \"url\": \"path/to/directory/with/zips/\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"private-vendor-one/core\": \"15.6.2\",\n"
"        \"private-vendor-two/connectivity\": \"*\",\n"
"        \"acme-corp/parser\": \"10.3.5\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:656
msgid "Each zip artifact is a ZIP archive with `composer.json` in root folder:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/05-repositories.md:657
#, no-wrap
msgid "unzip -l acme-corp-parser-10.3.5.zip\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/05-repositories.md:660
#, no-wrap
msgid ""
"composer.json\n"
"...\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:669
msgid ""
"If there are two archives with different versions of a package, they are "
"both imported. When an archive with a newer version is added in the artifact "
"folder and you run `update`, that version will be imported as well and "
"Composer will update to the latest version."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:670
#, no-wrap
msgid "Path"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:675
msgid ""
"In addition to the artifact repository, you can use the path one, which "
"allows you to depend on a local directory, either absolute or relative. This "
"can be especially useful when dealing with monolithic repositories."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:677
msgid ""
"For instance, if you have the following directory structure in your "
"repository:"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/05-repositories.md:677
#, no-wrap
msgid ""
"...\n"
"├── apps\n"
"│   └── my-app\n"
"│       └── composer.json\n"
"├── packages\n"
"│   └── my-package\n"
"│       └── composer.json\n"
"...\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:690
msgid ""
"Then, to add the package `my/package` as a dependency, in your `apps/my-app/"
"composer.json` file, you can use the following configuration:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:691
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"my/package\": \"*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:709
msgid ""
"If the package is a local VCS repository, the version may be inferred by the "
"branch or tag that is currently checked out. Otherwise, the version should "
"be explicitly defined in the package's `composer.json` file. If the version "
"cannot be resolved by these means, it is assumed to be `dev-master`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:713
msgid ""
"When the version cannot be inferred from the local VCS repository, or when "
"you want to override the version, you can use the `versions` option when "
"declaring the repository:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:714
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\",\n"
"            \"options\": {\n"
"                \"versions\": {\n"
"                    \"my/package\": \"4.2-dev\"\n"
"                }\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:734
msgid ""
"The local package will be symlinked if possible, in which case the output in "
"the console will read `Symlinking from ../../packages/my-package`. If "
"symlinking is _not_ possible the package will be copied. In that case, the "
"console will output `Mirrored from ../../packages/my-package`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:739
msgid ""
"Instead of default fallback strategy you can force to use symlink with "
"`\"symlink\": true` or mirroring with `\"symlink\": false` option. Forcing "
"mirroring can be useful when deploying or generating package from a "
"monolithic repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:743
#, no-wrap
msgid ""
"> **Note:** On Windows, directory symlinks are implemented using NTFS junctions\n"
"> because they can be created by non-admin users. Mirroring will always be used\n"
"> on versions below Windows 7 or if `proc_open` has been disabled.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:744
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/*\",\n"
"            \"options\": {\n"
"                \"symlink\": false\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:763
#, no-wrap
msgid ""
"Leading tildes are expanded to the current user's home folder, and environment\n"
"variables are parsed in both Windows and Linux/Mac notations. For example\n"
"`~/git/mypackage` will automatically load the mypackage clone from\n"
"`/home/<username>/git/mypackage`, equivalent to `$HOME/git/mypackage` or\n"
"`%USERPROFILE%/git/mypackage`.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:766
#, no-wrap
msgid ""
"> **Note:** Repository paths can also contain wildcards like `*` and `?`.\n"
"> For details, see the [PHP glob function](https://php.net/glob).\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:769
msgid ""
"You can configure the way the package's dist reference (which appears in the "
"composer.lock file) is built."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:777
#, no-wrap
msgid ""
"The following modes exist:\n"
"- `none` - reference will be always null. This can help reduce lock file conflicts\n"
"  in the lock file but reduces clarity as to when the last update happened and whether\n"
"  the package is in the latest state.\n"
"- `config` - reference is built based on a hash of the package's composer.json and repo config\n"
"- `auto` (used by default) - reference is built basing on the hash like with `config`, but if\n"
"  the package folder contains a git repository, the HEAD commit's hash is used as reference instead.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:778
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/*\",\n"
"            \"options\": {\n"
"                \"reference\": \"config\"\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:792
#, no-wrap
msgid "Disabling Packagist.org"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:796
msgid ""
"You can disable the default Packagist.org repository by adding this to your "
"`composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:797
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"packagist.org\": false\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:808
msgid "You can disable Packagist.org globally by using the global config flag:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/05-repositories.md:809
#, no-wrap
msgid "php composer.phar config -g repo.packagist false\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:813
msgid "&larr; [Schema](04-schema.md)  | [Config](06-config.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/06-config.md:1
#, no-wrap
msgid "Config"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:5
msgid ""
"This chapter will describe the `config` section of the `composer.json` "
"[schema](04-schema.md)."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:6
#, no-wrap
msgid "process-timeout"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:12
msgid ""
"The timeout in seconds for process executions, defaults to 300 (5mins).  The "
"duration processes like git clones can run before Composer assumes they died "
"out. You may need to make this higher if you have a slow connection or huge "
"vendors."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:15
msgid ""
"To disable the process timeout on a custom command under `scripts`, a static "
"helper is available:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:16
#, no-wrap
msgid ""
"{\n"
"    \"scripts\": {\n"
"        \"test\": [\n"
"            \"Composer\\\\Config::disableProcessTimeout\",\n"
"            \"phpunit\"\n"
"        ]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:27
#, no-wrap
msgid "allow-plugins"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:30
msgid "Defaults to `{}` which does not allow any plugins to be loaded."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:34
msgid ""
"As of Composer 2.2.0, the `allow-plugins` option adds a layer of security "
"allowing you to restrict which Composer plugins are able to execute code "
"during a Composer run."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:38
msgid ""
"When a new plugin is first activated, which is not yet listed in the config "
"option, Composer will print a warning. If you run Composer interactively it "
"will prompt you to decide if you want to execute the plugin or not."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:42
msgid ""
"Use this setting to allow only packages you trust to execute code. Set it to "
"an object with package name patterns as keys. The values are **true** to "
"allow and **false** to disallow while suppressing further warnings and "
"prompts."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:43
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"allow-plugins\": {\n"
"            \"third-party/required-plugin\": true,\n"
"            \"my-organization/*\": true,\n"
"            \"unnecessary/plugin\": false\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:56
msgid ""
"You can also set the config option itself to `false` to disallow all "
"plugins, or `true` to allow all plugins to run (NOT recommended). For "
"example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:57
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"allow-plugins\": false\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:65
#, no-wrap
msgid "use-include-path"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:69
msgid ""
"Defaults to `false`. If `true`, the Composer autoloader will also look for "
"classes in the PHP include path."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:70
#, no-wrap
msgid "preferred-install"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:75
msgid ""
"Defaults to `dist` and can be any of `source`, `dist` or `auto`. This option "
"allows you to set the install method Composer will prefer to use. Can "
"optionally be an object with package name patterns for keys for more "
"granular install preferences."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:76
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"preferred-install\": {\n"
"            \"my-organization/stable-package\": \"dist\",\n"
"            \"my-organization/*\": \"source\",\n"
"            \"partner-organization/*\": \"auto\",\n"
"            \"*\": \"dist\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:98
msgid ""
"`source` means Composer will install packages from their `source` if there "
"is one. This is typically a git clone or equivalent checkout of the version "
"control system the package uses. This is useful if you want to make a bugfix "
"to a project and get a local git clone of the dependency directly."
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:98
msgid ""
"`auto` is the legacy behavior where Composer uses `source` automatically for "
"dev versions, and `dist` otherwise."
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:98
msgid ""
"`dist` (the default as of Composer 2.1) means Composer installs from `dist`, "
"where possible. This is typically a zip file download, which is faster than "
"cloning the entire repository."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:103
#, no-wrap
msgid ""
"> **Note:** Order matters. More specific patterns should be earlier than\n"
"> more relaxed patterns. When mixing the string notation with the hash\n"
"> configuration in global and package configurations the string notation\n"
"> is translated to a `*` package pattern.\n"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:107
msgid "Security audit configuration options"
msgstr ""

#. type: Title ###
#: ../doc/06-config.md:108
#, no-wrap
msgid "ignore"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:111
msgid ""
"A list of advisory ids, remote ids or CVE ids that are reported but let the "
"audit command pass."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:112
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"audit\": {\n"
"            \"ignore\": {\n"
"                \"CVE-1234\": \"The affected component is not in use.\",\n"
"                \"GHSA-xx\": \"The security fix was applied as a patch.\",\n"
"                \"PKSA-yy\": \"Due to mitigations in place the update can be delayed.\"\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:127
msgid "or"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:128
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"audit\": {\n"
"            \"ignore\": [\"CVE-1234\", \"GHSA-xx\", \"PKSA-yy\"]\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:141
msgid ""
"Defaults to `report` in Composer 2.6, and defaults to `fail` from Composer "
"2.7 on. Defines whether the audit command reports abandoned packages or not, "
"this has three possible values:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:145
msgid ""
"`ignore` means the audit command does not consider abandoned packages at all."
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:145
msgid ""
"`report` means abandoned packages are reported as an error but do not cause "
"the command to exit with a non-zero code."
msgstr ""

#. type: Bullet: '- '
#: ../doc/06-config.md:145
msgid ""
"`fail` means abandoned packages will cause audits to fail with a non-zero "
"code."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:146
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"audit\": {\n"
"            \"abandoned\": \"report\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:157
msgid ""
"Since Composer 2.7 the option can be overridden via the "
"[`COMPOSER_AUDIT_ABANDONED`](03-cli.md#composer-audit-abandoned) environment "
"variable."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:158
#, no-wrap
msgid "use-parent-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:163
msgid ""
"When running Composer in a directory where there is no composer.json, if "
"there is one present in a directory above Composer will by default ask you "
"whether you want to use that directory's composer.json instead."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:166
msgid ""
"If you always want to answer yes to this prompt, you can set this config "
"value to `true`. To never be prompted, set it to `false`. The default is "
"`\"prompt\"`."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:170
#, no-wrap
msgid ""
"> **Note:** This config must be set in your global user-wide config for it\n"
"> to work. Use for example `php composer.phar config --global use-parent-dir true`\n"
"> to set it.\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:171
#, no-wrap
msgid "store-auths"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:175
msgid ""
"What to do after prompting for authentication, one of: `true` (always "
"store), `false` (do not store) and `\"prompt\"` (ask every time), defaults "
"to `\"prompt\"`."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:176
#, no-wrap
msgid "github-protocols"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:184
msgid ""
"Defaults to `[\"https\", \"ssh\", \"git\"]`. A list of protocols to use when "
"cloning from github.com, in priority order. By default `git` is present but "
"only if [secure-http](#secure-http)  is disabled, as the git protocol is not "
"encrypted. If you want your origin remote push URLs to be using https and "
"not ssh (`git@github.com:...`), then set the protocol list to be only "
"`[\"https\"]` and Composer will stop overwriting the push URL to an ssh URL."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:185
#, no-wrap
msgid "github-oauth"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:193
msgid ""
"A list of domain names and oauth keys. For example using `{\"github.com\": "
"\"oauthtoken\"}` as the value of this option will use `oauthtoken` to access "
"private repositories on github and to circumvent the low IP-based rate "
"limiting of their API. Composer may prompt for credentials when needed, but "
"these can also be manually set. Read more on how to get an OAuth token for "
"GitHub and cli syntax [here](articles/authentication-for-private-packages."
"md#github-oauth)."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:194
#, no-wrap
msgid "gitlab-domains"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:198
msgid ""
"Defaults to `[\"gitlab.com\"]`. A list of domains of GitLab servers.  This "
"is used if you use the `gitlab` repository type."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:199
#, no-wrap
msgid "gitlab-oauth"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:207
msgid ""
"A list of domain names and oauth keys. For example using `{\"gitlab.com\": "
"\"oauthtoken\"}` as the value of this option will use `oauthtoken` to access "
"private repositories on gitlab. Please note: If the package is not hosted at "
"gitlab.com the domain names must be also specified with the [`gitlab-"
"domains`](06-config.md#gitlab-domains) option.  Further info can also be "
"found [here](articles/authentication-for-private-packages.md#gitlab-oauth)"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:208
#, no-wrap
msgid "gitlab-token"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:221
#, no-wrap
msgid ""
"A list of domain names and private tokens. Private token can be either simple\n"
"string, or array with username and token. For example using `{\"gitlab.com\":\n"
"\"privatetoken\"}` as the value of this option will use `privatetoken` to access\n"
"private repositories on gitlab. Using `{\"gitlab.com\": {\"username\": \"gitlabuser\",\n"
" \"token\": \"privatetoken\"}}` will use both username and token for gitlab deploy\n"
"token functionality (https://docs.gitlab.com/ee/user/project/deploy_tokens/)\n"
"Please note: If the package is not hosted at\n"
"gitlab.com the domain names must be also specified with the\n"
"[`gitlab-domains`](06-config.md#gitlab-domains) option. The token must have\n"
"`api` or `read_api` scope.\n"
"Further info can also be found [here](articles/authentication-for-private-packages.md#gitlab-token)\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:222
#, no-wrap
msgid "gitlab-protocol"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:231
msgid ""
"A protocol to force use of when creating a repository URL for the `source` "
"value of the package metadata. One of `git` or `http`. (`https` is treated "
"as a synonym for `http`.) Helpful when working with projects referencing "
"private repositories which will later be cloned in GitLab CI jobs with a "
"[GitLab CI_JOB_TOKEN](https://docs.gitlab.com/ee/ci/variables/"
"predefined_variables.html#predefined-variables-reference)  using HTTP basic "
"auth. By default, Composer will generate a git-over-SSH URL for private "
"repositories and HTTP(S) only for public."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:232
#, no-wrap
msgid "disable-tls"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:239
msgid ""
"Defaults to `false`. If set to true all HTTPS URLs will be tried with HTTP "
"instead and no network level encryption is performed. Enabling this is a "
"security risk and is NOT recommended. The better way is to enable the "
"php_openssl extension in php.ini. Enabling this will implicitly disable the "
"`secure-http` option."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:240
#, no-wrap
msgid "secure-http"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:246
msgid ""
"Defaults to `true`. If set to true only HTTPS URLs are allowed to be "
"downloaded via Composer. If you really absolutely need HTTP access to "
"something then you can disable it, but using [Let's Encrypt](https://"
"letsencrypt.org/) to get a free SSL certificate is generally a better "
"alternative."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:247
#, no-wrap
msgid "bitbucket-oauth"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:252
msgid ""
"A list of domain names and consumers. For example using `{\"bitbucket.org\": "
"{\"consumer-key\": \"myKey\", \"consumer-secret\": \"mySecret\"}}`.  Read "
"more [here](articles/authentication-for-private-packages.md#bitbucket-oauth)."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:253
#, no-wrap
msgid "cafile"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:258
msgid ""
"Location of Certificate Authority file on local filesystem. In PHP 5.6+ you "
"should rather set this via openssl.cafile in php.ini, although PHP 5.6+ "
"should be able to detect your system CA file automatically."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:259
#, no-wrap
msgid "capath"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:264
msgid ""
"If cafile is not specified or if the certificate is not found there, the "
"directory pointed to by capath is searched for a suitable certificate.  "
"capath must be a correctly hashed certificate directory."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:265
#, no-wrap
msgid "http-basic"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:271
msgid ""
"A list of domain names and username/passwords to authenticate against them. "
"For example using `{\"example.org\": {\"username\": \"alice\", \"password\": "
"\"foo\"}}` as the value of this option will let Composer authenticate "
"against example.org.  More info can be found [here](articles/authentication-"
"for-private-packages.md#http-basic)."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:272
#, no-wrap
msgid "bearer"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:277
msgid ""
"A list of domain names and tokens to authenticate against them. For example "
"using `{\"example.org\": \"foo\"}` as the value of this option will let "
"Composer authenticate against example.org using an `Authorization: Bearer "
"foo` header."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:278
#, no-wrap
msgid "platform"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:283
msgid ""
"Lets you fake platform packages (PHP and extensions) so that you can emulate "
"a production env or define your target platform in the config. Example: "
"`{\"php\": \"7.0.3\", \"ext-something\": \"4.0.3\"}`."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:289
msgid ""
"This will make sure that no package requiring more than PHP 7.0.3 can be "
"installed regardless of the actual PHP version you run locally. However it "
"also means the dependencies are not checked correctly anymore, if you run "
"PHP 5.6 it will install fine as it assumes 7.0.3, but then it will fail at "
"runtime. This also means if `{\"php\":\"7.4\"}` is specified; no packages "
"will be used that define `7.4.1` as minimum."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:293
msgid ""
"Therefore if you use this it is recommended, and safer, to also run the "
"[`check-platform-reqs`](03-cli.md#check-platform-reqs) command as part of "
"your deployment strategy."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:299
msgid ""
"If a dependency requires some extension that you do not have installed "
"locally you may ignore it instead by passing `--ignore-platform-req=ext-foo` "
"to `update`, `install` or `require`. In the long run though you should "
"install required extensions as if you ignore one now and a new package you "
"add a month later also requires it, you may introduce issues in production "
"unknowingly."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:302
msgid ""
"If you have an extension installed locally but *not* on production, you may "
"want to artificially hide it from Composer using `{\"ext-foo\": false}`."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:303
#, no-wrap
msgid "vendor-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:308
msgid ""
"Defaults to `vendor`. You can install dependencies into a different "
"directory if you want to. `$HOME` and `~` will be replaced by your home "
"directory's path in vendor-dir and all `*-dir` options below."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:309
#, no-wrap
msgid "bin-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:313
msgid ""
"Defaults to `vendor/bin`. If a project includes binaries, they will be "
"symlinked into this directory."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:314
#, no-wrap
msgid "data-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:321
#, no-wrap
msgid ""
"Defaults to `C:\\Users\\<user>\\AppData\\Roaming\\Composer` on Windows,\n"
"`$XDG_DATA_HOME/composer` on unix systems that follow the XDG Base Directory\n"
"Specifications, and `$COMPOSER_HOME` on other unix systems. Right now it is only\n"
"used for storing past composer.phar files to be able to roll back to older\n"
"versions. See also [COMPOSER_HOME](03-cli.md#composer-home).\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:322
#, no-wrap
msgid "cache-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:329
#, no-wrap
msgid ""
"Defaults to `C:\\Users\\<user>\\AppData\\Local\\Composer` on Windows,\n"
"`/Users/<user>/Library/Caches/composer` on macOS, `$XDG_CACHE_HOME/composer`\n"
"on unix systems that follow the XDG Base Directory Specifications, and\n"
"`$COMPOSER_HOME/cache` on other unix systems. Stores all the caches used by\n"
"Composer. See also [COMPOSER_HOME](03-cli.md#composer-home).\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:330
#, no-wrap
msgid "cache-files-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:333
msgid "Defaults to `$cache-dir/files`. Stores the zip archives of packages."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:334
#, no-wrap
msgid "cache-repo-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:338
msgid ""
"Defaults to `$cache-dir/repo`. Stores repository metadata for the `composer` "
"type and the VCS repos of type `svn`, `fossil`, `github` and `bitbucket`."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:339
#, no-wrap
msgid "cache-vcs-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:343
msgid ""
"Defaults to `$cache-dir/vcs`. Stores VCS clones for loading VCS repository "
"metadata for the `git`/`hg` types and to speed up installs."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:344
#, no-wrap
msgid "cache-files-ttl"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:350
msgid ""
"Defaults to `15552000` (6 months). Composer caches all dist (zip, tar, ...)  "
"packages that it downloads. Those are purged after six months of being "
"unused by default. This option allows you to tweak this duration (in "
"seconds) or disable it completely by setting it to 0."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:351
#, no-wrap
msgid "cache-files-maxsize"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:357
msgid ""
"Defaults to `300MiB`. Composer caches all dist (zip, tar, ...) packages that "
"it downloads. When the garbage collection is periodically ran, this is the "
"maximum size the cache will be able to use. Older (less used) files will be "
"removed first until the cache fits."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:358
#, no-wrap
msgid "cache-read-only"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:361
msgid ""
"Defaults to `false`. Whether to use the Composer cache in read-only mode."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:362
#, no-wrap
msgid "bin-compat"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:371
msgid ""
"Defaults to `auto`. Determines the compatibility of the binaries to be "
"installed.  If it is `auto` then Composer only installs .bat proxy files "
"when on Windows or WSL. If set to `full` then both .bat files for Windows "
"and scripts for Unix-based operating systems will be installed for each "
"binary. This is mainly useful if you run Composer inside a linux VM but "
"still want the `.bat` proxies available for use in the Windows host OS. If "
"set to `proxy` Composer will only create bash/Unix-style proxy files and no ."
"bat files even on Windows/WSL."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:372
#, no-wrap
msgid "prepend-autoloader"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:377
msgid ""
"Defaults to `true`. If `false`, the Composer autoloader will not be "
"prepended to existing autoloaders. This is sometimes required to fix "
"interoperability issues with other autoloaders."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:378
#, no-wrap
msgid "autoloader-suffix"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:384
msgid ""
"Defaults to `null`. When set to a non-empty string, this value will be used "
"as a suffix for the generated Composer autoloader. If set to `null`, the "
"`content-hash` value from the `composer.lock` file will be used if "
"available; otherwise, a random suffix will be generated."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:385
#, no-wrap
msgid "optimize-autoloader"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:388
msgid ""
"Defaults to `false`. If `true`, always optimize when dumping the autoloader."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:389
#, no-wrap
msgid "sort-packages"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:393
msgid ""
"Defaults to `false`. If `true`, the `require` command keeps packages sorted "
"by name in `composer.json` when adding a new package."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:394
#, no-wrap
msgid "classmap-authoritative"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:398
msgid ""
"Defaults to `false`. If `true`, the Composer autoloader will only load "
"classes from the classmap. Implies `optimize-autoloader`."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:399
#, no-wrap
msgid "apcu-autoloader"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:403
msgid ""
"Defaults to `false`. If `true`, the Composer autoloader will check for APCu "
"and use it to cache found/not-found classes when the extension is enabled."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:404
#, no-wrap
msgid "github-domains"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:408
msgid ""
"Defaults to `[\"github.com\"]`. A list of domains to use in github mode. "
"This is used for GitHub Enterprise setups."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:409
#, no-wrap
msgid "github-expose-hostname"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:413
msgid ""
"Defaults to `true`. If `false`, the OAuth tokens created to access the "
"github API will have a date instead of the machine hostname."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:414
#, no-wrap
msgid "use-github-api"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:421
msgid ""
"Defaults to `true`.  Similar to the `no-api` key on a specific repository, "
"setting `use-github-api` to `false` will define the global behavior for all "
"GitHub repositories to clone the repository as it would with any other git "
"repository instead of using the GitHub API. But unlike using the `git` "
"driver directly, Composer will still attempt to use GitHub's zip files."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:422
#, no-wrap
msgid "notify-on-install"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:427
msgid ""
"Defaults to `true`. Composer allows repositories to define a notification "
"URL, so that they get notified whenever a package from that repository is "
"installed.  This option allows you to disable that behavior."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:428
#, no-wrap
msgid "discard-changes"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:435
msgid ""
"Defaults to `false` and can be any of `true`, `false` or `\"stash\"`. This "
"option allows you to set the default style of handling dirty updates when in "
"non-interactive mode. `true` will always discard changes in vendors, while "
"`\"stash\"` will try to stash and reapply. Use this for CI servers or deploy "
"scripts if you tend to have modified vendors."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:436
#, no-wrap
msgid "archive-format"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:439
msgid ""
"Defaults to `tar`. Overrides the default format used by the archive command."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:440
#, no-wrap
msgid "archive-dir"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:444
msgid ""
"Defaults to `.`. Default destination for archives created by the archive "
"command."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/06-config.md:447
#, no-wrap
msgid ""
"{\n"
"    \"config\": {\n"
"        \"archive-dir\": \"/home/user/.composer/repo\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:455
#, no-wrap
msgid "htaccess-protect"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:459
msgid ""
"Defaults to `true`. If set to `false`, Composer will not create `.htaccess` "
"files in the Composer home, cache, and data directories."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:460
#, no-wrap
msgid "lock"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:464
msgid ""
"Defaults to `true`. If set to `false`, Composer will not create a `composer."
"lock` file and will ignore it if one is present."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:465
#, no-wrap
msgid "platform-check"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:470
msgid ""
"Defaults to `php-only` which only checks the PHP version. Set to `true` to "
"also check the presence of extension. If set to `false`, Composer will not "
"create and require a `platform_check.php` file as part of the autoloader "
"bootstrap."
msgstr ""

#. type: Title ##
#: ../doc/06-config.md:471
#, no-wrap
msgid "secure-svn-domains"
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:478
msgid ""
"Defaults to `[]`. Lists domains which should be trusted/marked as using a "
"secure Subversion/SVN transport. By default svn:// protocol is seen as "
"insecure and will throw, but you can set this config option to `[\"example."
"org\"]` to allow using svn URLs on that hostname. This is a better/safer "
"alternative to disabling `secure-http` altogether."
msgstr ""

#. type: Plain text
#: ../doc/06-config.md:479
msgid ""
"&larr; [Repositories](05-repositories.md)  | [Runtime](07-runtime.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/07-runtime.md:1
#, no-wrap
msgid "Runtime Composer utilities"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:5
msgid ""
"While Composer is mostly used around your project to install its "
"dependencies, there are a few things which are made available to you at "
"runtime."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:8
msgid ""
"If you need to rely on some of these in a specific version, you can require "
"the `composer-runtime-api` package."
msgstr ""

#. type: Title ##
#: ../doc/07-runtime.md:9
#, no-wrap
msgid "Autoload"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:14
msgid ""
"The autoloader is the most used one, and is already covered in our [basic "
"usage guide](01-basic-usage.md#autoloading). It is available in all Composer "
"versions."
msgstr ""

#. type: Title ##
#: ../doc/07-runtime.md:15
#, no-wrap
msgid "Installed versions"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:20
msgid ""
"composer-runtime-api 2.0 introduced a new `Composer\\InstalledVersions` "
"class which offers a few static methods to inspect which versions are "
"currently installed. This is automatically available to your code as long as "
"you include the Composer autoloader."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:22
msgid "The main use cases for this class are the following:"
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:23
#, no-wrap
msgid "Knowing whether package X (or virtual package) is present"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:25
#, no-wrap
msgid ""
"\\Composer\\InstalledVersions::isInstalled('vendor/package'); // returns bool\n"
"\\Composer\\InstalledVersions::isInstalled('psr/log-implementation'); // returns bool\n"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:32
msgid ""
"As of Composer 2.1, you may also check if something was installed via "
"require-dev or not by passing false as second argument:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:33
#, no-wrap
msgid ""
"\\Composer\\InstalledVersions::isInstalled('vendor/package'); // returns true assuming this package is installed\n"
"\\Composer\\InstalledVersions::isInstalled('vendor/package', false); // returns true if vendor/package is in require, false if in require-dev\n"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:39
msgid ""
"Note that this can not be used to check whether platform packages are "
"installed."
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:40
#, no-wrap
msgid "Knowing whether package X is installed in version Y"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:43
#, no-wrap
msgid "> **Note:** To use this, your package must require `\"composer/semver\": \"^3.0\"`.\n"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:44
#, no-wrap
msgid ""
"use Composer\\Semver\\VersionParser;\n"
"\n"
"\\Composer\\InstalledVersions::satisfies(new VersionParser, 'vendor/package', '2.0.*');\n"
"\\Composer\\InstalledVersions::satisfies(new VersionParser, 'psr/log-implementation', '^1.0');\n"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:54
msgid ""
"This will return true if e.g. vendor/package is installed in a version "
"matching `2.0.*`, but also if the given package name is replaced or provided "
"by some other package."
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:55
#, no-wrap
msgid "Knowing the version of package X"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:61
#, no-wrap
msgid ""
"> **Note:** This will return `null` if the package name you ask for is not itself installed\n"
"> but merely provided or replaced by another package. We therefore recommend using satisfies()\n"
"> in library code at least. In application code you have a bit more control and it is less\n"
"> important.\n"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:62
#, no-wrap
msgid ""
"// returns a normalized version (e.g. 1.2.3.0) if vendor/package is installed,\n"
"// or null if it is provided/replaced,\n"
"// or throws OutOfBoundsException if the package is not installed at all\n"
"\\Composer\\InstalledVersions::getVersion('vendor/package');\n"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:69
#, no-wrap
msgid ""
"// returns the original version (e.g. v1.2.3) if vendor/package is installed,\n"
"// or null if it is provided/replaced,\n"
"// or throws OutOfBoundsException if the package is not installed at all\n"
"\\Composer\\InstalledVersions::getPrettyVersion('vendor/package');\n"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:76
#, no-wrap
msgid ""
"// returns the package dist or source reference (e.g. a git commit hash) if vendor/package is installed,\n"
"// or null if it is provided/replaced,\n"
"// or throws OutOfBoundsException if the package is not installed at all\n"
"\\Composer\\InstalledVersions::getReference('vendor/package');\n"
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:83
#, no-wrap
msgid "Knowing a package's own installed version"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:88
msgid ""
"If you are only interested in getting a package's own version, e.g. in the "
"source of acme/foo you want to know which version acme/foo is currently "
"running to display that to the user, then it is acceptable to use getVersion/"
"getPrettyVersion/getReference."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:91
msgid ""
"The warning in the section above does not apply in this case as you are sure "
"the package is present and not being replaced if your code is running."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:94
msgid ""
"It is nonetheless a good idea to make sure you handle the `null` return "
"value as gracefully as possible for safety."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:99
msgid ""
"A few other methods are available for more complex usages, please refer to "
"the source/docblocks of [the class itself](https://github.com/composer/"
"composer/blob/main/src/Composer/InstalledVersions.php)."
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:100
#, no-wrap
msgid "Knowing the path in which a package is installed"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:103
msgid ""
"The `getInstallPath` method to retrieve a package's absolute install path."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:107
#, no-wrap
msgid ""
"> **Note:** The path, while absolute, may contain `../` or symlinks. It is\n"
"> not guaranteed to be equivalent to a `realpath()` so you should run a\n"
"> realpath on it if that matters to you.\n"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:108
#, no-wrap
msgid ""
"// returns an absolute path to the package installation location if vendor/package is installed,\n"
"// or null if it is provided/replaced, or the package is a metapackage\n"
"// or throws OutOfBoundsException if the package is not installed at all\n"
"\\Composer\\InstalledVersions::getInstallPath('vendor/package');\n"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:116 ../doc/07-runtime.md:132
#, no-wrap
msgid "> Available as of Composer 2.1 (i.e. `composer-runtime-api ^2.1`)\n"
msgstr ""

#. type: Title ###
#: ../doc/07-runtime.md:117
#, no-wrap
msgid "Knowing which packages of a given type are installed"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:122
msgid ""
"The `getInstalledPackagesByType` method accepts a package type (e.g. foo-"
"plugin) and lists the packages of that type which are installed. You can "
"then use the methods above to retrieve more information about each package "
"if needed."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:126
msgid ""
"This method should alleviate the need for custom installers placing plugins "
"in a specific path instead of leaving them in the vendor dir. You can then "
"find plugins to initialize at runtime via InstalledVersions, including their "
"paths via getInstallPath if needed."
msgstr ""

#. type: Fenced code block (php)
#: ../doc/07-runtime.md:127
#, no-wrap
msgid "\\Composer\\InstalledVersions::getInstalledPackagesByType('foo-plugin');\n"
msgstr ""

#. type: Title ##
#: ../doc/07-runtime.md:133
#, no-wrap
msgid "Platform check"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:137
msgid ""
"composer-runtime-api 2.0 introduced a new `vendor/composer/platform_check."
"php` file, which is included automatically when you include the Composer "
"autoloader."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:141
msgid ""
"It verifies that platform requirements (i.e. php and php extensions) are "
"fulfilled by the PHP process currently running. If the requirements are not "
"met, the script prints a warning with the missing requirements and exits "
"with code 104."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:145
msgid ""
"To avoid an unexpected white page of death with some obscure PHP extension "
"warning in production, you can run `composer check-platform-reqs` as part of "
"your deployment/build and if that returns a non-0 code you should abort."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:147
msgid "The default value is `php-only` which only checks the PHP version."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:151
msgid ""
"If you for some reason do not want to use this safety check, and would "
"rather risk runtime errors when your code executes, you can disable this by "
"setting the [`platform-check`](06-config.md#platform-check) config option to "
"`false`."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:156
msgid ""
"If you want the check to include verifying the presence of PHP extensions, "
"set the config option to `true`. `ext-*` requirements will then be verified "
"but for performance reasons Composer only checks the extension is present, "
"not its exact version."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:158
msgid ""
"`lib-*` requirements are never supported/checked by the platform check "
"feature."
msgstr ""

#. type: Title ##
#: ../doc/07-runtime.md:159
#, no-wrap
msgid "Autoloader path in binaries"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:164
msgid ""
"composer-runtime-api 2.2 introduced a new `$_composer_autoload_path` global "
"variable set when running binaries installed with Composer. Read more about "
"this [on the vendor binaries docs](articles/vendor-binaries.md#finding-the-"
"composer-autoloader-from-a-binary)."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:168
msgid ""
"This is set by the binary proxy and as such is not made available to "
"projects by Composer's `vendor/autoload.php`, which would be useless as it "
"would point back to itself."
msgstr ""

#. type: Title ##
#: ../doc/07-runtime.md:169
#, no-wrap
msgid "Binary (bin-dir) path in binaries"
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:174
msgid ""
"composer-runtime-api 2.2.2 introduced a new `$_composer_bin_dir` global "
"variable set when running binaries installed with Composer. Read more about "
"this [on the vendor binaries docs](articles/vendor-binaries.md#finding-the-"
"composer-bin-dir-from-a-binary)."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:177
msgid ""
"This is set by the binary proxy and as such is not made available to "
"projects by Composer's `vendor/autoload.php`."
msgstr ""

#. type: Plain text
#: ../doc/07-runtime.md:178
msgid "&larr; [Config](06-config.md)  | [Community](08-community.md) &rarr;"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:5
msgid ""
"There are many people using Composer already, and quite a few of them are "
"contributing."
msgstr ""

#. type: Title ##
#: ../doc/08-community.md:6
#, no-wrap
msgid "Contributing"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:12
msgid ""
"If you would like to contribute to Composer, please read the [README]"
"(https://github.com/composer/composer) and [CONTRIBUTING](https://github.com/"
"composer/composer/blob/main/.github/CONTRIBUTING.md)  documents."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:14
msgid "The most important guidelines are described as follows:"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:23
#, no-wrap
msgid ""
"> All code contributions - including those of people having commit access - must\n"
"> go through a pull request and approved by a core developer before being\n"
"> merged. This is to ensure proper review of all the code.\n"
">\n"
"> Fork the project, create a feature branch, and send us a pull request.\n"
">\n"
"> To ensure a consistent code base, you should make sure the code follows\n"
"> the [PSR-12 Coding Standards](https://www.php-fig.org/psr/psr-12/).\n"
msgstr ""

#. type: Title ##
#: ../doc/08-community.md:24
#, no-wrap
msgid "Support"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:27
msgid ""
"The IRC channel is on irc.libera.chat: [#composer](ircs://irc.libera."
"chat:6697/composer)."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:31
msgid ""
"[Stack Overflow](https://stackoverflow.com/questions/tagged/composer-php) "
"and [GitHub Discussions](https://github.com/composer/composer/discussions) "
"both have a collection of Composer related questions."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:34
msgid ""
"For paid support, we do provide Composer-related support via chat and email "
"to [Private Packagist](https://packagist.com) customers."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:36
msgid "&larr; [Runtime](07-runtime.md)"
msgstr ""

#. type: Title #
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:1
#, no-wrap
msgid "Why are version constraints combining comparisons and wildcards a bad idea?"
msgstr ""

#. type: Plain text
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:5
#, no-wrap
msgid ""
"This is a fairly common mistake people make, defining version constraints in\n"
"their package requires like `>=2.*` or `>=1.1.*`.\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:9
#, no-wrap
msgid ""
"If you think about it and what it really means though, you will quickly\n"
"realize that it does not make much sense. If we decompose `>=2.*`, you\n"
"have two parts:\n"
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:13
msgid "`>=2` which says the package should be in version 2.0.0 or above."
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:13
msgid ""
"`2.*` which says the package should be between version 2.0.0 (inclusive)  "
"and 3.0.0 (exclusive)."
msgstr ""

#. type: Plain text
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:18
#, no-wrap
msgid ""
"As you see, both rules agree on the fact that the package must be >=2.0.0,\n"
"but it is not possible to determine if when you wrote that you were thinking\n"
"of a package in version 3.0.0 or not. Should it match because you asked for\n"
"`>=2` or should it not match because you asked for a `2.*`?\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md:21
msgid ""
"For this reason, Composer throws an error and says that this is invalid.  "
"The way to fix it is to think about what you really mean, and use only one "
"of those rules."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:4
#, no-wrap
msgid ""
"<!--\n"
"    tagline: Versions explained.\n"
"-->\n"
msgstr ""

#. type: Title #
#: ../doc/articles/versions.md:5
#, no-wrap
msgid "Versions and constraints"
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:7
#, no-wrap
msgid "Composer Versions vs VCS Versions"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:16
msgid ""
"Because Composer is heavily geared toward utilizing version control systems "
"like git, the term \"version\" can be a little ambiguous. In the sense of a "
"version control system, a \"version\" is a specific set of files that "
"contain specific data. In git terminology, this is a \"ref\", or a specific "
"commit, which may be represented by a branch HEAD or a tag. When you check "
"out that version in your VCS -- for example, tag `v1.1` or commit `e35fa0d` "
"--, you're asking for a single, known set of files, and you always get the "
"same files back."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:24
msgid ""
"In Composer, what's often referred to casually as a version -- that is, the "
"string that follows the package name in a require line (e.g., `~1.1` or `1.2."
"*`) -- is actually more specifically a version constraint. Composer uses "
"version constraints to figure out which refs in a VCS it should be checking "
"out (or to verify that a given library is acceptable in the case of a "
"statically-maintained library with a `version` specification in `composer."
"json`)."
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:25
#, no-wrap
msgid "VCS Tags and Branches"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:29
#, no-wrap
msgid ""
"*For the following discussion, let's assume the following sample library\n"
"repository:*\n"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/articles/versions.md:30
#, no-wrap
msgid "~/my-library$ git branch\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/articles/versions.md:33
#, no-wrap
msgid ""
"v1\n"
"v2\n"
"my-feature\n"
"another-feature\n"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/articles/versions.md:40
#, no-wrap
msgid "~/my-library$ git tag\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/articles/versions.md:43
#, no-wrap
msgid ""
"v1.0\n"
"v1.0.1\n"
"v1.0.2\n"
"v1.1-BETA\n"
"v1.1-RC1\n"
"v1.1-RC2\n"
"v1.1\n"
"v1.1.1\n"
"v2.0-BETA\n"
"v2.0-RC1\n"
"v2.0\n"
"v2.0.1\n"
"v2.0.2\n"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:59
#, no-wrap
msgid "Tags"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:73
#, no-wrap
msgid ""
"Normally, Composer deals with tags (as opposed to branches -- if you don't\n"
"know what this means, read up on\n"
"[version control systems](https://en.wikipedia.org/wiki/Version_control#Common_terminology)).\n"
"When you write a version constraint, it may reference a specific tag (e.g.,\n"
"`1.1`) or it may reference a valid range of tags (e.g., `>=1.1 <2.0`, or\n"
"`~4.0`). To resolve these constraints, Composer first asks the VCS to list\n"
"all available tags, then creates an internal list of available versions based\n"
"on these tags. In the above example, composer's internal list includes versions\n"
"`1.0`, `1.0.1`, `1.0.2`, the beta release of `1.1`, the first and second\n"
"release candidates of `1.1`, the final release version `1.1`, etc.... (Note\n"
"that Composer automatically removes the 'v' prefix in the actual tagname to\n"
"get a valid final version number.)\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:80
msgid ""
"When Composer has a complete list of available versions from your VCS, it "
"then finds the highest version that matches all version constraints in your "
"project (it's possible that other packages require more specific versions of "
"the library than you do, so the version it chooses may not always be the "
"highest available version) and it downloads a zip archive of that tag to "
"unpack in the correct location in your `vendor` directory."
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:81
#, no-wrap
msgid "Branches"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:84
msgid ""
"If you want Composer to check out a branch instead of a tag, you need to "
"point it to the branch using the special `dev-*` prefix (or sometimes "
"suffix; see below). If you're checking out a branch, it's assumed that you "
"want to *work* on the branch and Composer actually clones the repo into the "
"correct place in your `vendor` directory. For tags, it copies the right "
"files without actually cloning the repo. (You can modify this behavior with "
"--prefer-source and --prefer-dist, see [install options](../03-cli."
"md#install).)"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:86
msgid ""
"In the above example, if you wanted to check out the `my-feature` branch, "
"you would specify `dev-my-feature` as the version constraint in your "
"`require` clause. This would result in Composer cloning the `my-library` "
"repository into my `vendor` directory and checking out the `my-feature` "
"branch."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:88
msgid ""
"When branch names look like versions, we have to clarify for Composer that "
"we're trying to check out a branch and not a tag. In the above example, we "
"have two version branches: `v1` and `v2`. To get Composer to check out one "
"of these branches, you must specify a version constraint that looks like "
"this: `v1.x-dev`. The `.x` is an arbitrary string that Composer requires to "
"tell it that we're talking about the `v1` branch and not a `v1` tag "
"(alternatively, you can name the branch `v1.x` instead of `v1`). In the case "
"of a branch with a version-like name (`v1`, in this case), you append `-dev` "
"as a suffix, rather than using `dev-` as a prefix."
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:89
#, no-wrap
msgid "Stabilities"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:99
msgid ""
"Composer recognizes the following stabilities (in order of stability): dev, "
"alpha, beta, RC, and stable where RC stands for release candidate. The "
"stability of a version is defined by its suffix e.g version `v1.1-BETA` has "
"a stability of `beta` and `v1.1-RC1` has a stability of `RC`. If such a "
"suffix is missing e.g. version `v1.1` then Composer considers that version "
"`stable`. In addition to that Composer automatically adds a `-dev` suffix to "
"all numeric branches and prefixes all other branches imported from a VCS "
"repository with `dev-`. In both cases the stability `dev` gets assigned."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:101
msgid "Keeping this in mind will help you in the next section."
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:102
#, no-wrap
msgid "Minimum Stability"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:105
msgid ""
"There's one more thing that will affect which files are checked out of a "
"library's VCS and added to your project: Composer allows you to specify "
"stability constraints to limit which tags are considered valid. In the above "
"example, note that the library released a beta and two release candidates "
"for version `1.1` before the final official release. To receive these "
"versions when running `composer install` or `composer update`, we have to "
"explicitly tell Composer that we are ok with release candidates and beta "
"releases (and alpha releases, if we want those). This can be done using "
"either a project-wide `minimum-stability` value in `composer.json` or using "
"\"stability flags\" in version constraints. Read more on the [schema page]"
"(../04-schema.md#minimum-stability)."
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:106
#, no-wrap
msgid "Writing Version Constraints"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:110
msgid ""
"Now that you have an idea of how Composer sees versions, let's talk about "
"how to specify version constraints for your project dependencies."
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:111
#, no-wrap
msgid "Exact Version Constraint"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:117
msgid ""
"You can specify the exact version of a package. This will tell Composer to "
"install this version and this version only. If other dependencies require a "
"different version, the solver will ultimately fail and abort any install or "
"update procedures."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:119
msgid "Example: `1.0.2`"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:120
#, no-wrap
msgid "Version Range"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:124
#, no-wrap
msgid ""
"By using comparison operators you can specify ranges of valid versions. Valid\n"
"operators are `>`, `>=`, `<`, `<=`, `!=`.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:128
#, no-wrap
msgid ""
"You can define multiple ranges. Ranges separated by a space (<code>&nbsp;</code>)\n"
"or comma (`,`) will be treated as a **logical AND**. A double pipe (`||`)\n"
"will be treated as a **logical OR**. AND has higher precedence than OR.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:132
#, no-wrap
msgid ""
"> **Note:** Be careful when using unbounded ranges as you might end up\n"
"> unexpectedly installing versions that break backwards compatibility.\n"
"> Consider using the [caret](#caret-version-range-) operator instead for safety.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:137
#, no-wrap
msgid ""
"<!--blank line followed by comment markup to separate the block quotes-->\n"
"> **Note:** In older versions of Composer the single pipe (`|`) was the\n"
"> recommended alternative to the **logical OR**. Thus for backwards compatibility\n"
"> the single pipe (`|`) will still be treated as a **logical OR**.\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/articles/versions.md:143
msgid "`>=1.0`"
msgstr ""

#. type: Bullet: '* '
#: ../doc/articles/versions.md:143
msgid "`>=1.0 <2.0`"
msgstr ""

#. type: Bullet: '* '
#: ../doc/articles/versions.md:143
msgid "`>=1.0 <1.1 || >=1.2`"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:144
#, no-wrap
msgid "Hyphenated Version Range (` - `)"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:150
#, no-wrap
msgid ""
"Inclusive set of versions. Partial versions on the right include are completed\n"
"with a wildcard. For example `1.0 - 2.0` is equivalent to `>=1.0.0 <2.1` as the\n"
"`2.0` becomes `2.0.*`. On the other hand `1.0.0 - 2.1.0` is equivalent to\n"
"`>=1.0.0 <=2.1.0`.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:152
msgid "Example: `1.0 - 2.0`"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:153
#, no-wrap
msgid "Wildcard Version Range (`.*`)"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:157
#, no-wrap
msgid ""
"You can specify a pattern with a `*` wildcard. `1.0.*` is the equivalent of\n"
"`>=1.0 <1.1`.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:159
msgid "Example: `1.0.*`"
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:160
#, no-wrap
msgid "Next Significant Release Operators"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:162
#, no-wrap
msgid "Tilde Version Range (`~`)"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:172
#, no-wrap
msgid ""
"The `~` operator is best explained by example: `~1.2` is equivalent to\n"
"`>=1.2 <2.0.0`, while `~1.2.3` is equivalent to `>=1.2.3 <1.3.0`. As you can see\n"
"it is mostly useful for projects respecting [semantic\n"
"versioning](https://semver.org/). A common usage would be to mark the minimum\n"
"minor version you depend on, like `~1.2` (which allows anything up to, but not\n"
"including, 2.0). Since in theory there should be no backwards compatibility\n"
"breaks until 2.0, that works well. Another way of looking at it is that using\n"
"`~` specifies a minimum version, but allows the last digit specified to go up.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:174
msgid "Example: `~1.2`"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:178
#, no-wrap
msgid ""
"> **Note:** Although `2.0-beta.1` is strictly before `2.0`, a version constraint\n"
"> like `~1.2` would not install it. As said above `~1.2` only means the `.2`\n"
"> can change but the `1.` part is fixed.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:183
#, no-wrap
msgid ""
"> **Note:** The `~` operator has an exception on its behavior for the major\n"
"> release number. This means for example that `~1` is the same as `~1.0` as\n"
"> it will not allow the major number to increase trying to keep backwards\n"
"> compatibility.\n"
msgstr ""

#. type: Title ###
#: ../doc/articles/versions.md:184
#, no-wrap
msgid "Caret Version Range (`^`)"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:191
#, no-wrap
msgid ""
"The `^` operator behaves very similarly, but it sticks closer to semantic\n"
"versioning, and will always allow non-breaking updates. For example `^1.2.3`\n"
"is equivalent to `>=1.2.3 <2.0.0` as none of the releases until 2.0 should\n"
"break backwards compatibility. For pre-1.0 versions it also acts with safety\n"
"in mind and treats `^0.3` as `>=0.3.0 <0.4.0` and `^0.0.3` as `>=0.0.3 <0.0.4`.\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:194
msgid ""
"This is the recommended operator for maximum interoperability when writing "
"library code."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:196
msgid "Example: `^1.2.3`"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:202
#, no-wrap
msgid ""
"> **Note:** If you are using PowerShell on Windows, you have to escape\n"
"> carets when using them as argument on the CLI for example when using the\n"
"> `composer require` command. You have to use four\n"
"> subsequent caret operators, e.g. `^^^^1.2.3`, to ensure the caret operator gets\n"
"> passed to Composer correctly.\n"
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:203
#, no-wrap
msgid "Stability Constraints"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:208
msgid ""
"If you are using a constraint that does not explicitly define a stability, "
"Composer will default internally to `-dev` or `-stable`, depending on the "
"operator(s) used. This happens transparently."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:211
msgid ""
"If you wish to explicitly consider only the stable release in the "
"comparison, add the suffix `-stable`."
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:225
#, no-wrap
msgid ""
" Constraint         | Internally\n"
"------------------- | ------------------------\n"
" `1.2.3`            | `=1.2.3.0-stable`\n"
" `>1.2`             | `>1.2.0.0-stable`\n"
" `>=1.2`            | `>=1.2.0.0-dev`\n"
" `>=1.2-stable`     | `>=1.2.0.0-stable`\n"
" `<1.3`             | `<1.3.0.0-dev`\n"
" `<=1.3`            | `<=1.3.0.0-stable`\n"
" `1 - 2`            | `>=1.0.0.0-dev <3.0.0.0-dev`\n"
" `~1.3`             | `>=1.3.0.0-dev <2.0.0.0-dev`\n"
" `1.4.*`            | `>=1.4.0.0-dev <1.5.0.0-dev`\n"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:232
#, no-wrap
msgid ""
"To allow various stabilities without enforcing them at the constraint level\n"
"however, you may use [stability-flags](../04-schema.md#package-links) like\n"
"`@<stability>` (e.g. `@dev`) to let Composer know that a given package\n"
"can be installed in a different stability than your default minimum-stability\n"
"setting. All available stability flags are listed on the minimum-stability\n"
"section of the [schema page](../04-schema.md#minimum-stability).\n"
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:233
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Fenced code block (jsonc)
#: ../doc/articles/versions.md:234
#, no-wrap
msgid ""
"\"require\": {\n"
"    \"vendor/package\": \"1.3.2\", // exactly 1.3.2\n"
"\n"
"    // >, <, >=, <= | specify upper / lower bounds\n"
"    \"vendor/package\": \">=1.3.2\", // anything above or equal to 1.3.2\n"
"    \"vendor/package\": \"<1.3.2\", // anything below 1.3.2\n"
"\n"
"    // * | wildcard\n"
"    \"vendor/package\": \"1.3.*\", // >=1.3.0 <1.4.0\n"
"\n"
"    // ~ | allows last digit specified to go up\n"
"    \"vendor/package\": \"~1.3.2\", // >=1.3.2 <1.4.0\n"
"    \"vendor/package\": \"~1.3\", // >=1.3.0 <2.0.0\n"
"\n"
"    // ^ | doesn't allow breaking changes (major version fixed - following semver)\n"
"    \"vendor/package\": \"^1.3.2\", // >=1.3.2 <2.0.0\n"
"    \"vendor/package\": \"^0.3.2\", // >=0.3.2 <0.4.0 // except if major version is 0\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/articles/versions.md:255
#, no-wrap
msgid "Testing Version Constraints"
msgstr ""

#. type: Plain text
#: ../doc/articles/versions.md:260
msgid ""
"You can test version constraints using [semver.madewithlove.com](https://"
"semver.madewithlove.com).  Fill in a package name and it will autofill the "
"default version constraint which Composer would add to your `composer.json` "
"file. You can adjust the version constraint and the tool will highlight all "
"releases that match."
msgstr ""

#. type: Title #
#: ../doc/faqs/how-to-install-composer-programmatically.md:1
#, no-wrap
msgid "How do I install Composer programmatically?"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-install-composer-programmatically.md:6
msgid ""
"As noted on the download page, the installer script contains a checksum "
"which changes when the installer code changes and as such it should not be "
"relied upon in the long term."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-install-composer-programmatically.md:8
msgid ""
"An alternative is to use this script which only works with UNIX utilities:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/faqs/how-to-install-composer-programmatically.md:9
#, no-wrap
msgid ""
"#!/bin/sh\n"
"\n"
"EXPECTED_CHECKSUM=\"$(php -r 'copy(\"https://composer.github.io/installer.sig\", \"php://stdout\");')\"\n"
"php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n"
"ACTUAL_CHECKSUM=\"$(php -r \"echo hash_file('sha384', 'composer-setup.php');\")\"\n"
"\n"
"if [ \"$EXPECTED_CHECKSUM\" != \"$ACTUAL_CHECKSUM\" ]\n"
"then\n"
"    >&2 echo 'ERROR: Invalid installer checksum'\n"
"    rm composer-setup.php\n"
"    exit 1\n"
"fi\n"
"\n"
"php composer-setup.php --quiet\n"
"RESULT=$?\n"
"rm composer-setup.php\n"
"exit $RESULT\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-install-composer-programmatically.md:31
msgid ""
"The script will exit with 1 in case of failure, or 0 on success, and is "
"quiet if no error occurs."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-install-composer-programmatically.md:36
msgid ""
"Alternatively, if you want to rely on an exact copy of the installer, you "
"can fetch a specific version from GitHub's history. The commit hash should "
"be enough to give it uniqueness and authenticity as long as you can trust "
"the GitHub servers.  For example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/faqs/how-to-install-composer-programmatically.md:37
#, no-wrap
msgid "wget https://raw.githubusercontent.com/composer/getcomposer.org/76a7060ccb93902cd7576b67264ad91c8a2700e2/web/installer -O - -q | php -- --quiet\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-install-composer-programmatically.md:42
msgid ""
"You may replace the commit hash by whatever the last commit hash is on "
"https://github.com/composer/getcomposer.org/commits/main"
msgstr ""

#. type: Title #
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:1
#, no-wrap
msgid "How to use Composer behind a proxy"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:5
msgid ""
"Composer, like many other tools, uses environment variables to control the "
"use of a proxy server and supports:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:10
msgid "`http_proxy` - the proxy to use for HTTP requests"
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:10
msgid "`https_proxy` - the proxy to use for HTTPS requests"
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:10
msgid ""
"`CGI_HTTP_PROXY` - the proxy to use for HTTP requests in a non-CLI context"
msgstr ""

#. type: Bullet: '- '
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:10
msgid "`no_proxy` - domains that do not require a proxy"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:14
msgid ""
"These named variables are a convention, rather than an official standard, "
"and their evolution and usage across different operating systems and tools "
"is complex. Composer prefers the use of lowercase names, but accepts "
"uppercase names where appropriate."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:18
msgid ""
"Composer requires specific environment variables for HTTP and HTTPS "
"requests. For example:"
msgstr ""

#. type: Fenced code block
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:19
#, no-wrap
msgid ""
"http_proxy=http://proxy.com:80\n"
"https_proxy=http://proxy.com:80\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:25
msgid "Uppercase names can also be used."
msgstr ""

#. type: Title ###
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:26
#, no-wrap
msgid "Non-CLI usage"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:31
msgid ""
"Composer does not look for `http_proxy` or `HTTP_PROXY` in a non-CLI "
"context. If you are running it this way (i.e. integration into a CMS or "
"similar use case) you must use `CGI_HTTP_PROXY` for HTTP requests:"
msgstr ""

#. type: Fenced code block
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:32
#, no-wrap
msgid ""
"CGI_HTTP_PROXY=http://proxy.com:80\n"
"https_proxy=http://proxy.com:80\n"
"\n"
"# cgi_http_proxy can also be used\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:41
#, no-wrap
msgid ""
"> **Note:** CGI_HTTP_PROXY was introduced by Perl in 2001 to prevent request header manipulation and\n"
"was popularized in 2016 when this vulnerability was widely reported: https://httpoxy.org\n"
msgstr ""

#. type: Title ##
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:42
#, no-wrap
msgid "Syntax"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:46
msgid ""
"Use `scheme://host:port` as in the examples above. Although a missing scheme "
"defaults to http and a missing port defaults to 80/443 for http/https "
"schemes, other tools might require these values."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:49
msgid ""
"The host can be specified as an IP address using dotted quad notation for "
"IPv4, or enclosed in square brackets for IPv6."
msgstr ""

#. type: Title ###
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:50
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:54
msgid ""
"Composer supports Basic authorization, using the `scheme://user:pass@host:"
"port` syntax. Reserved url characters in either the user name or password "
"must be percent-encoded. For example:"
msgstr ""

#. type: Fenced code block
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:55
#, no-wrap
msgid ""
"user:  me@company\n"
"pass:  p@ssw$rd\n"
"proxy: http://proxy.com:80\n"
"\n"
"# percent-encoded authorization\n"
"me%40company:p%40ssw%24rd\n"
"\n"
"scheme://me%40company:p%40ssw%24rd@proxy.com:80\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:69
#, no-wrap
msgid ""
"> **Note:** The user name and password components must be percent-encoded individually and then\n"
"combined with the colon separator. The user name cannot contain a colon (even if percent-encoded),\n"
"because the proxy will split the components on the first colon it finds.\n"
msgstr ""

#. type: Title ##
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:70
#, no-wrap
msgid "HTTPS proxy servers"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:74
msgid ""
"Composer supports HTTPS proxy servers, where HTTPS is the scheme used to "
"connect to the proxy, but only from PHP 7.3 with curl version 7.52.0 and "
"above."
msgstr ""

#. type: Fenced code block
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:75
#, no-wrap
msgid ""
"http_proxy=https://proxy.com:443\n"
"https_proxy=https://proxy.com:443\n"
msgstr ""

#. type: Title ##
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:80
#, no-wrap
msgid "Bypassing the proxy for specific domains"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:84
msgid ""
"Use the `no_proxy` (or `NO_PROXY`) environment variable to set a comma-"
"separated list of domains that the proxy should **not** be used for."
msgstr ""

#. type: Fenced code block
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:85
#, no-wrap
msgid ""
"no_proxy=example.com\n"
"# Bypasses the proxy for example.com and its sub-domains\n"
"\n"
"no_proxy=www.example.com\n"
"# Bypasses the proxy for www.example.com and its sub-domains, but not for example.com\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:95
msgid ""
"A domain can be restricted to a particular port (e.g. `:80`) and can also be "
"specified as an IP address or an IP address block in CIDR notation."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:98
msgid ""
"IPv6 addresses do not need to be enclosed in square brackets, like they are "
"for http_proxy/https_proxy values, although this format is accepted."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:100
msgid "Setting the value to `*` will bypass the proxy for all requests."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:102
#, no-wrap
msgid "> **Note:** A leading dot in the domain name has no significance and is removed prior to processing.\n"
msgstr ""

#. type: Title ##
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:103
#, no-wrap
msgid "Deprecated environment variables"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:107
msgid ""
"Composer originally provided `HTTP_PROXY_REQUEST_FULLURI` and "
"`HTTPS_PROXY_REQUEST_FULLURI` to help mitigate issues with misbehaving "
"proxies. These are no longer required or used."
msgstr ""

#. type: Title ##
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:108
#, no-wrap
msgid "Requirement changes"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:112
#, no-wrap
msgid ""
"Composer <2.8 used `http_proxy` for both HTTP and HTTPS requests if `https_proxy` was not set,\n"
"but as of Composer 2.8.0 it requires [scheme-specific](#usage) environment variables.\n"
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:116
msgid ""
"The reason for this change is to align Composer with current practice across "
"other popular tools. To help with the transition, as of Composer 2.7.3 the "
"original behaviour remains but a warning message is shown instructing the "
"user to add an `https_proxy` environment variable."
msgstr ""

#. type: Plain text
#: ../doc/faqs/how-to-use-composer-behind-a-proxy.md:118
msgid ""
"To prevent the original behaviour during the transition period, set an empty "
"environment variable (`https_proxy=`)."
msgstr ""
