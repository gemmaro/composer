# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-29 10:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: ../doc/00-intro.md:1 ../doc/01-basic-usage.md:3
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:6
#, markdown-text
msgid ""
"Composer is a tool for dependency management in PHP. It allows you to "
"declare the libraries your project depends on and it will manage "
"(install/update) them for you."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:7
#, markdown-text, no-wrap
msgid "Dependency management"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:15
#, markdown-text
msgid ""
"Composer is **not** a package manager in the same sense as Yum or Apt "
"are. Yes, it deals with \"packages\" or libraries, but it manages them on a "
"per-project basis, installing them in a directory (e.g. `vendor`) inside "
"your project. By default, it does not install anything globally. Thus, it is "
"a dependency manager. It does however support a \"global\" project for "
"convenience via the [global](03-cli.md#global) command."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:18
#, markdown-text
msgid ""
"This idea is not new and Composer is strongly inspired by node's "
"[npm](https://www.npmjs.com/) and ruby's [bundler](https://bundler.io/)."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:20
#, markdown-text
msgid "Suppose:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/00-intro.md:23
#, markdown-text
msgid "You have a project that depends on a number of libraries."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/00-intro.md:23
#, markdown-text
msgid "Some of those libraries depend on other libraries."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:25
#, markdown-text
msgid "Composer:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/00-intro.md:30
#, markdown-text
msgid "Enables you to declare the libraries you depend on."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/00-intro.md:30
#, markdown-text
msgid ""
"Finds out which versions of which packages can and need to be installed, and "
"installs them (meaning it downloads them into your project)."
msgstr ""

#. type: Bullet: '3. '
#: ../doc/00-intro.md:30
#, markdown-text
msgid "You can update all your dependencies in one command."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:33
#, markdown-text
msgid ""
"See the [Basic usage](01-basic-usage.md) chapter for more details on "
"declaring dependencies."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:34
#, markdown-text, no-wrap
msgid "System Requirements"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:41
#, markdown-text
msgid ""
"Composer in its latest version requires PHP 7.2.5 to run. A "
"long-term-support version (2.2.x) still offers support for PHP 5.3.2+ in "
"case you are stuck with a legacy PHP version. A few sensitive php settings "
"and compile flags are also required, but when using the installer you will "
"be warned about any incompatibilities."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:44
#, markdown-text
msgid ""
"To install packages from sources instead of plain zip archives, you will "
"need git, svn, fossil or hg depending on how the package is "
"version-controlled."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:47
#, markdown-text
msgid ""
"Composer is multi-platform and we strive to make it run equally well on "
"Windows, Linux and macOS."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:48
#, markdown-text, no-wrap
msgid "Installation - Linux / Unix / macOS"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:50
#, markdown-text, no-wrap
msgid "Downloading the Composer Executable"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:57
#, markdown-text
msgid ""
"Composer offers a convenient installer that you can execute directly from "
"the command line. Feel free to [download this "
"file](https://getcomposer.org/installer)  or review it on "
"[GitHub](https://github.com/composer/getcomposer.org/blob/main/web/installer)  "
"if you wish to know more about the inner workings of the installer. The "
"source is plain PHP."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:60
#, markdown-text
msgid ""
"There are, in short, two ways to install Composer. Locally as part of your "
"project, or globally as a system wide executable."
msgstr ""

#. type: Title ####
#: ../doc/00-intro.md:61
#, markdown-text, no-wrap
msgid "Locally"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:65
#, markdown-text
msgid ""
"To install Composer locally, run the installer in your project "
"directory. See [the Download page](https://getcomposer.org/download/) for "
"instructions."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:70
#, markdown-text
msgid ""
"The installer will check a few PHP settings and then download "
"`composer.phar` to your working directory. This file is the Composer "
"binary. It is a PHAR (PHP archive), which is an archive format for PHP which "
"can be run on the command line, amongst other things."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:72
#, markdown-text
msgid "Now run `php composer.phar` in order to run Composer."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:78
#, markdown-text
msgid ""
"You can install Composer to a specific directory by using the "
"`--install-dir` option and additionally (re)name it as well using the "
"`--filename` option. When running the installer when following [the Download "
"page instructions](https://getcomposer.org/download/) add the following "
"parameters:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:79
#, no-wrap
msgid "php composer-setup.php --install-dir=bin --filename=composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:84
#, markdown-text
msgid "Now run `php bin/composer` in order to run Composer."
msgstr ""

#. type: Title ####
#: ../doc/00-intro.md:85
#, markdown-text, no-wrap
msgid "Globally"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:91
#, markdown-text
msgid ""
"You can place the Composer PHAR anywhere you wish. If you put it in a "
"directory that is part of your `PATH`, you can access it globally. On Unix "
"systems you can even make it executable and invoke it without directly using "
"the `php` interpreter."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:94
#, markdown-text
msgid ""
"After running the installer following [the Download page "
"instructions](https://getcomposer.org/download/)  you can run this to move "
"composer.phar to a directory that is in your path:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:95
#, no-wrap
msgid "mv composer.phar /usr/local/bin/composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:102
#, markdown-text
msgid ""
"If you like to install it only for your user and avoid requiring root "
"permissions, you can use `~/.local/bin` instead which is available by "
"default on some Linux distributions."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:105
#, markdown-text, no-wrap
msgid ""
"> **Note:** If the above fails due to permissions, you may need to run it "
"again\n"
"> with `sudo`.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:110
#, markdown-text, no-wrap
msgid ""
"> **Note:** On some versions of macOS the `/usr` directory does not exist "
"by\n"
"> default. If you receive the error \"/usr/local/bin/composer: No such file "
"or\n"
"> directory\" then you must create the directory manually before "
"proceeding:\n"
"> `mkdir -p /usr/local/bin`.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:114
#, markdown-text, no-wrap
msgid ""
"> **Note:** For information on changing your PATH, please read the\n"
"> [Wikipedia article](https://en.wikipedia.org/wiki/PATH_(variable)) and/or "
"use\n"
"> your search engine of choice.\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:116
#, markdown-text
msgid "Now run `composer` in order to run Composer instead of `php composer.phar`."
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:117
#, markdown-text, no-wrap
msgid "Installation - Windows"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:119
#, markdown-text, no-wrap
msgid "Using the Installer"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:122
#, markdown-text
msgid "This is the easiest way to get Composer set up on your machine."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:127
#, markdown-text
msgid ""
"Download and run "
"[Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe). It will "
"install the latest Composer version and set up your PATH so that you can "
"call `composer` from any directory in your command line."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:130
#, markdown-text, no-wrap
msgid ""
"> **Note:** Close your current terminal. Test usage with a new terminal: "
"This is\n"
"> important since the PATH only gets loaded when the terminal starts.\n"
msgstr ""

#. type: Title ###
#: ../doc/00-intro.md:131
#, markdown-text, no-wrap
msgid "Manual Installation"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:136
#, markdown-text
msgid ""
"Change to a directory on your `PATH` and run the installer following [the "
"Download page instructions](https://getcomposer.org/download/)  to download "
"`composer.phar`."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:138
#, markdown-text
msgid "Create a new `composer.bat` file alongside `composer.phar`:"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:140
#, markdown-text
msgid "Using cmd.exe:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:141
#, no-wrap
msgid "C:\\bin> echo @php \"%~dp0composer.phar\" %*>composer.bat\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:146
#, markdown-text
msgid "Using PowerShell:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:147
#, no-wrap
msgid "PS C:\\bin> Set-Content composer.bat '@php \"%~dp0composer.phar\" %*'\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:155
#, markdown-text
msgid ""
"Add the directory to your PATH environment variable if it isn't already.  "
"For information on changing your PATH variable, please see [this "
"article](https://www.computerhope.com/issues/ch000549.htm) and/or use your "
"search engine of choice."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:157
#, markdown-text
msgid "Close your current terminal. Test usage with a new terminal:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:158
#, no-wrap
msgid "C:\\Users\\username>composer -V\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/00-intro.md:161
#, no-wrap
msgid "Composer version 2.4.0 2022-08-16 16:10:48\n"
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:165
#, markdown-text, no-wrap
msgid "Docker Image"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:168
#, markdown-text
msgid ""
"Composer is published as Docker container in a few places, see the list in "
"the [composer/docker README](https://github.com/composer/docker)."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:170
#, markdown-text
msgid "Example usage:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/00-intro.md:171
#, no-wrap
msgid ""
"docker pull composer/composer\n"
"docker run --rm -it -v \"$(pwd):/app\" composer/composer install\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:177
#, markdown-text
msgid ""
"To add Composer to an existing **Dockerfile** you can simply copy binary "
"file from pre-built, low-size images:"
msgstr ""

#. type: Fenced code block (Dockerfile)
#: ../doc/00-intro.md:178
#, no-wrap
msgid ""
"# Latest release\n"
"COPY --from=composer/composer:latest-bin /composer /usr/bin/composer\n"
"\n"
"# Specific release\n"
"COPY --from=composer/composer:2-bin /composer /usr/bin/composer\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:187
#, markdown-text
msgid ""
"Read the [image description](https://hub.docker.com/r/composer/composer) for "
"further usage information."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:189
#, markdown-text, no-wrap
msgid ""
"**Note:** Docker specific issues should be filed [on the composer/docker "
"repository](https://github.com/composer/docker/issues).\n"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:191
#, markdown-text, no-wrap
msgid ""
"**Note:** You may also use `composer` instead of `composer/composer` as "
"image name above. It is shorter and is a Docker official image but is not "
"published directly by us and thus usually receives new releases with a delay "
"of a few days. **Important**: short-aliased images don't have binary-only "
"equivalents, so for `COPY --from` approach it's better to use "
"`composer/composer` ones.\n"
msgstr ""

#. type: Title ##
#: ../doc/00-intro.md:192
#, markdown-text, no-wrap
msgid "Using Composer"
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:196
#, markdown-text
msgid ""
"Now that you've installed Composer, you are ready to use it! Head on over to "
"the next chapter for a short demonstration."
msgstr ""

#. type: Plain text
#: ../doc/00-intro.md:197
#, markdown-text
msgid "[Basic usage](01-basic-usage.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/01-basic-usage.md:1
#, markdown-text, no-wrap
msgid "Basic usage"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:8
#, markdown-text
msgid ""
"For our basic usage introduction, we will be installing `monolog/monolog`, a "
"logging library. If you have not yet installed Composer, refer to the "
"[Intro](00-intro.md) chapter."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:11
#, markdown-text, no-wrap
msgid ""
"> **Note:** for the sake of simplicity, this introduction will assume you\n"
"> have performed a [local](00-intro.md#locally) install of Composer.\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:12
#, markdown-text, no-wrap
msgid "`composer.json`: Project setup"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:20
#, markdown-text
msgid ""
"To start using Composer in your project, all you need is a `composer.json` "
"file. This file describes the dependencies of your project and may contain "
"other metadata as well. It typically should go in the top-most directory of "
"your project/VCS repository. You can technically run Composer anywhere but "
"if you want to publish a package to Packagist.org, it will have to be able "
"to find the file at the top of your VCS repository."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:21
#, markdown-text, no-wrap
msgid "The `require` key"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:26
#, markdown-text
msgid ""
"The first thing you specify in `composer.json` is the "
"[`require`](04-schema.md#require) key. You are telling Composer which "
"packages your project depends on."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:27
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"2.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:38
#, markdown-text
msgid ""
"As you can see, [`require`](04-schema.md#require) takes an object that maps "
"**package names** (e.g. `monolog/monolog`) to **version constraints** (e.g.  "
"`1.0.*`)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:46
#, markdown-text
msgid ""
"Composer uses this information to search for the right set of files in "
"package \"repositories\" that you register using the "
"[`repositories`](04-schema.md#repositories)  key, or in "
"[Packagist.org](https://packagist.org), the default package repository.  In "
"the above example, since no other repository has been registered in the "
"`composer.json` file, it is assumed that the `monolog/monolog` package is "
"registered on Packagist.org. (Read more [about Packagist](#packagist), and "
"[about repositories](05-repositories.md))."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:47
#, markdown-text, no-wrap
msgid "Package names"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:53
#, markdown-text
msgid ""
"The package name consists of a vendor name and the project's name. Often "
"these will be identical - the vendor name only exists to prevent naming "
"clashes. For example, it would allow two different people to create a "
"library named `json`.  One might be named `igorw/json` while the other might "
"be `seldaek/json`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:58
#, markdown-text
msgid ""
"Read more about [publishing packages and package naming](02-libraries.md).  "
"(Note that you can also specify \"platform packages\" as dependencies, "
"allowing you to require certain versions of server software. See [platform "
"packages](#platform-packages) below.)"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:59
#, markdown-text, no-wrap
msgid "Package version constraints"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:65
#, markdown-text, no-wrap
msgid ""
"In our example, we are requesting the Monolog package with the version "
"constraint\n"
"[`2.0.*`](https://semver.mwl.be/#?package=monolog%2Fmonolog&version=2.0.*).\n"
"This means any version in the `2.0` development branch, or any version that "
"is\n"
"greater than or equal to 2.0 and less than 2.1 (`>=2.0 <2.1`).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:68
#, markdown-text
msgid ""
"Please read [versions](articles/versions.md) for more in-depth information "
"on versions, how versions relate to each other, and on version constraints."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:80
#, markdown-text, no-wrap
msgid ""
"> **How does Composer download the right files?** When you specify a "
"dependency in\n"
"> `composer.json`, Composer first takes the name of the package that you "
"have requested\n"
"> and searches for it in any repositories that you have registered using "
"the\n"
"> [`repositories`](04-schema.md#repositories) key. If you have not "
"registered\n"
"> any extra repositories, or it does not find a package with that name in "
"the\n"
"> repositories you have specified, it falls back to Packagist.org (more "
"[below](#packagist)).\n"
">\n"
"> When Composer finds the right package, either in Packagist.org or in a "
"repo you have specified,\n"
"> it then uses the versioning features of the package's VCS (i.e., branches "
"and tags)\n"
"> to attempt to find the best match for the version constraint you have "
"specified. Be sure to read\n"
"> about versions and package resolution in the [versions "
"article](articles/versions.md).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:89
#, markdown-text, no-wrap
msgid ""
"> **Note:** If you are trying to require a package but Composer throws an "
"error\n"
"> regarding package stability, the version you have specified may not meet "
"your\n"
"> default minimum stability requirements. By default, only stable releases "
"are taken\n"
"> into consideration when searching for valid package versions in your "
"VCS.\n"
">\n"
"> You might run into this if you are trying to require dev, alpha, beta, or "
"RC\n"
"> versions of a package. Read more about stability flags and the "
"`minimum-stability`\n"
"> key on the [schema page](04-schema.md).\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:90
#, markdown-text, no-wrap
msgid "Installing dependencies"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:94
#, markdown-text
msgid ""
"To initially install the defined dependencies for your project, you should "
"run the [`update`](03-cli.md#update-u) command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:95 ../doc/01-basic-usage.md:163
#: ../doc/03-cli.md:145
#, no-wrap
msgid "php composer.phar update\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:100
#, markdown-text
msgid "This will make Composer do two things:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
#, markdown-text
msgid ""
"It resolves all dependencies listed in your `composer.json` file and writes "
"all of the packages and their exact versions to the `composer.lock` file, "
"locking the project to those specific versions. You should commit the "
"`composer.lock` file to your project repo so that all people working on the "
"project are locked to the same versions of dependencies (more below). This "
"is the main role of the `update` command."
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
#, markdown-text
msgid ""
"It then implicitly runs the [`install`](03-cli.md#install-i) command. This "
"will download the dependencies' files into the `vendor` directory in your "
"project. (The `vendor` directory is the conventional location for all "
"third-party code in a project). In our example from above, you would end up "
"with the Monolog source files in `vendor/monolog/monolog/`. As Monolog has a "
"dependency on `psr/log`, that package's files can also be found inside "
"`vendor/`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:116
#, markdown-text, no-wrap
msgid ""
"> **Tip:** If you are using git for your project, you probably want to add\n"
"> `vendor` in your `.gitignore`. You really don't want to add all of that\n"
"> third-party code to your versioned repository.\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:117
#, markdown-text, no-wrap
msgid "Commit your `composer.lock` file to version control"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:128
#, markdown-text
msgid ""
"Committing this file to version control is important because it will cause "
"anyone who sets up the project to use the exact same versions of the "
"dependencies that you are using. Your CI server, production machines, other "
"developers in your team, everything and everyone runs on the same "
"dependencies, which mitigates the potential for bugs affecting only some "
"parts of the deployments. Even if you develop alone, in six months when "
"reinstalling the project you can feel confident the dependencies installed "
"are still working even if your dependencies released many new versions since "
"then.  (See note below about using the `update` command.)"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:131
#, markdown-text, no-wrap
msgid ""
"> **Note:** For libraries it is not necessary to commit the lock\n"
"> file, see also: [Libraries - Lock file](02-libraries.md#lock-file).\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:132
#, markdown-text, no-wrap
msgid "Installing from `composer.lock`"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:137
#, markdown-text
msgid ""
"If there is already a `composer.lock` file in the project folder, it means "
"either you ran the `update` command before, or someone else on the project "
"ran the `update` command and committed the `composer.lock` file to the "
"project (which is good)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:146
#, markdown-text
msgid ""
"Either way, running `install` when a `composer.lock` file is present "
"resolves and installs all dependencies that you listed in `composer.json`, "
"but Composer uses the exact versions listed in `composer.lock` to ensure "
"that the package versions are consistent for everyone working on your "
"project. As a result you will have all dependencies requested by your "
"`composer.json` file, but they may not all be at the very latest available "
"versions (some of the dependencies listed in the `composer.lock` file may "
"have released newer versions since the file was created). This is by design, "
"it ensures that your project does not break because of unexpected changes in "
"dependencies."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:150
#, markdown-text
msgid ""
"So after fetching new changes from your VCS repository it is recommended to "
"run a Composer `install` to make sure the vendor directory is up in sync "
"with your `composer.lock` file."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:151 ../doc/03-cli.md:86
#, no-wrap
msgid "php composer.phar install\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:155
#, markdown-text, no-wrap
msgid "Updating dependencies to their latest versions"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:162
#, markdown-text
msgid ""
"As mentioned above, the `composer.lock` file prevents you from automatically "
"getting the latest versions of your dependencies. To update to the latest "
"versions, use the [`update`](03-cli.md#update-u) command. This will fetch "
"the latest matching versions (according to your `composer.json` file) and "
"update the lock file with the new versions."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:170
#, markdown-text, no-wrap
msgid ""
"> **Note:** Composer will display a Warning when executing an `install` "
"command\n"
"> if the `composer.lock` has not been updated since changes were made to "
"the\n"
"> `composer.json` that might affect dependency resolution.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:172
#, markdown-text
msgid ""
"If you only want to install, upgrade or remove one dependency, you can "
"explicitly list it as an argument:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:173
#, no-wrap
msgid "php composer.phar update monolog/monolog [...]\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:177
#, markdown-text, no-wrap
msgid "Packagist"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:184
#, markdown-text
msgid ""
"[Packagist.org](https://packagist.org/) is the main Composer repository. A "
"Composer repository is basically a package source: a place where you can get "
"packages from. Packagist aims to be the central repository that everybody "
"uses. This means that you can automatically `require` any package that is "
"available there, without further specifying where Composer should look for "
"the package."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:187
#, markdown-text
msgid ""
"If you go to the [Packagist.org website](https://packagist.org/), you can "
"browse and search for packages."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:191
#, markdown-text
msgid ""
"Any open source project using Composer is recommended to publish their "
"packages on Packagist. A library does not need to be on Packagist to be used "
"by Composer, but it enables discovery and adoption by other developers more "
"quickly."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:192
#, markdown-text, no-wrap
msgid "Platform packages"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:197
#, markdown-text
msgid ""
"Composer has platform packages, which are virtual packages for things that "
"are installed on the system but are not actually installable by "
"Composer. This includes PHP itself, PHP extensions and some system "
"libraries."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:201
#, markdown-text
msgid ""
"`php` represents the PHP version of the user, allowing you to apply "
"constraints, e.g. `^7.1`. To require a 64bit version of php, you can require "
"the `php-64bit` package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:204
#, markdown-text
msgid ""
"`hhvm` represents the version of the HHVM runtime and allows you to apply a "
"constraint, e.g., `^2.3`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:209
#, markdown-text
msgid ""
"`ext-<name>` allows you to require PHP extensions (includes core "
"extensions). Versioning can be quite inconsistent here, so it's often a good "
"idea to set the constraint to `*`.  An example of an extension package name "
"is `ext-gd`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:213
#, markdown-text
msgid ""
"`lib-<name>` allows constraints to be made on versions of libraries used by "
"PHP. The following are available: `curl`, `iconv`, `icu`, `libxml`, "
"`openssl`, `pcre`, `uuid`, `xsl`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:216
#, markdown-text
msgid ""
"You can use [`show --platform`](03-cli.md#show) to get a list of your "
"locally available platform packages."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:217
#, markdown-text, no-wrap
msgid "Autoloading"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:222
#, markdown-text
msgid ""
"For libraries that specify autoload information, Composer generates a "
"`vendor/autoload.php` file. You can include this file and start using the "
"classes that those libraries provide without any extra work:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:223
#, no-wrap
msgid ""
"require __DIR__ . '/vendor/autoload.php';\n"
"\n"
"$log = new Monolog\\Logger('name');\n"
"$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', "
"Monolog\\Logger::WARNING));\n"
"$log->warning('Foo');\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:233
#, markdown-text
msgid ""
"You can even add your own code to the autoloader by adding an "
"[`autoload`](04-schema.md#autoload) field to `composer.json`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:234
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:244
#, markdown-text
msgid ""
"Composer will register a [PSR-4](https://www.php-fig.org/psr/psr-4/) "
"autoloader for the `Acme` namespace."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:248
#, markdown-text
msgid ""
"You define a mapping from namespaces to directories. The `src` directory "
"would be in your project root, on the same level as the `vendor` "
"directory. An example filename would be `src/Foo.php` containing an "
"`Acme\\Foo` class."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:251
#, markdown-text
msgid ""
"After adding the [`autoload`](04-schema.md#autoload) field, you have to "
"re-run this command:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:252
#, no-wrap
msgid "php composer.phar dump-autoload\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:259
#, markdown-text
msgid ""
"This command will re-generate the `vendor/autoload.php` file.  See the "
"[`dump-autoload`](03-cli.md#dump-autoload-dumpautoload-) section for more "
"information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:263
#, markdown-text
msgid ""
"Including that file will also return the autoloader instance, so you can "
"store the return value of the include call in a variable and add more "
"namespaces.  This can be useful for autoloading classes in a test suite, for "
"example."
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:264
#, no-wrap
msgid ""
"$loader = require __DIR__ . '/vendor/autoload.php';\n"
"$loader->addPsr4('Acme\\\\Test\\\\', __DIR__);\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:272
#, markdown-text
msgid ""
"In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and "
"files autoloading. See the [`autoload`](04-schema.md#autoload) reference for "
"more information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:274
#, markdown-text
msgid ""
"See also the docs on [optimizing the "
"autoloader](articles/autoloader-optimization.md)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:278
#, markdown-text, no-wrap
msgid ""
"> **Note:** Composer provides its own autoloader. If you don't want to use "
"that\n"
"> one, you can include `vendor/composer/autoload_*.php` files, which "
"return\n"
"> associative arrays allowing you to configure your own autoloader.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:279
#, markdown-text
msgid "&larr; [Intro](00-intro.md)  | [Libraries](02-libraries.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/02-libraries.md:1
#, markdown-text, no-wrap
msgid "Libraries"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:5
#, markdown-text
msgid ""
"This chapter will tell you how to make your library installable through "
"Composer."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:6
#, markdown-text, no-wrap
msgid "Every project is a package"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:12
#, markdown-text
msgid ""
"As soon as you have a `composer.json` in a directory, that directory is a "
"package. When you add a [`require`](04-schema.md#require) to a project, you "
"are making a package that depends on other packages. The only difference "
"between your project and a library is that your project is a package without "
"a name."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:15
#, markdown-text
msgid ""
"In order to make that package installable you need to give it a name. You do "
"this by adding the [`name`](04-schema.md#name) property in `composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:16
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/hello-world\",\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:27
#, markdown-text
msgid ""
"In this case the project name is `acme/hello-world`, where `acme` is the "
"vendor name. Supplying a vendor name is mandatory."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:31
#, markdown-text, no-wrap
msgid ""
"> **Note:** If you don't know what to use as a vendor name, your GitHub\n"
"> username is usually a good bet. Package names must be lowercase, and the\n"
"> convention is to use dashes for word separation.\n"
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:32
#, markdown-text, no-wrap
msgid "Library Versioning"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:40
#, markdown-text
msgid ""
"In the vast majority of cases, you will be maintaining your library using "
"some sort of version control system like git, svn, hg or fossil. In these "
"cases, Composer infers versions from your VCS, and you **should not** "
"specify a version in your `composer.json` file. (See the [Versions "
"article](articles/versions.md)  to learn about how Composer uses VCS "
"branches and tags to resolve version constraints.)"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:44
#, markdown-text
msgid ""
"If you are maintaining packages by hand (i.e., without a VCS), you'll need "
"to specify the version explicitly by adding a `version` value in your "
"`composer.json` file:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:45
#, no-wrap
msgid ""
"{\n"
"    \"version\": \"1.0.0\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:53
#, markdown-text, no-wrap
msgid ""
"> **Note:** When you add a hardcoded version to a VCS, the version will "
"conflict\n"
"> with tag names. Composer will not be able to determine the version "
"number.\n"
msgstr ""

#. type: Title ###
#: ../doc/02-libraries.md:54
#, markdown-text, no-wrap
msgid "VCS Versioning"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:61
#, markdown-text
msgid ""
"Composer uses your VCS's branch and tag features to resolve the version "
"constraints you specify in your [`require`](04-schema.md#require) field to "
"specific sets of files.  When determining valid available versions, Composer "
"looks at all of your tags and branches and translates their names into an "
"internal list of options that it then matches against the version constraint "
"you provided."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:64
#, markdown-text
msgid ""
"For more on how Composer treats tags and branches and how it resolves "
"package version constraints, read the [versions](articles/versions.md) "
"article."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:65
#, markdown-text, no-wrap
msgid "Lock file"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:71
#, markdown-text
msgid ""
"For your library you may commit the `composer.lock` file if you want "
"to. This can help your team to always test against the same dependency "
"versions.  However, this lock file will not have any effect on other "
"projects that depend on it. It only has an effect on the main project."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:74
#, markdown-text
msgid ""
"If you do not want to commit the lock file, and you are using git, add it to "
"the `.gitignore`."
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:75
#, markdown-text, no-wrap
msgid "Publishing to a VCS"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:81
#, markdown-text
msgid ""
"Once you have a VCS repository (version control system, e.g. git) containing "
"a `composer.json` file, your library is already composer-installable. In "
"this example we will publish the `acme/hello-world` library on GitHub under "
"`github.com/username/hello-world`."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:87
#, markdown-text
msgid ""
"Now, to test installing the `acme/hello-world` package, we create a new "
"project locally. We will call it `acme/blog`. This blog will depend on "
"`acme/hello-world`, which in turn depends on `monolog/monolog`. We can "
"accomplish this by creating a new `blog` directory somewhere, containing a "
"`composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:88
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:100
#, markdown-text
msgid ""
"The name is not needed in this case, since we don't want to publish the blog "
"as a library. It is added here to clarify which `composer.json` is being "
"described."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:104
#, markdown-text
msgid ""
"Now we need to tell the blog app where to find the `hello-world` "
"dependency.  We do this by adding a package repository specification to the "
"blog's `composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/02-libraries.md:105
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"acme/blog\",\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/username/hello-world\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/hello-world\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:122
#, markdown-text
msgid ""
"For more details on how package repositories work and what other types are "
"available, see [Repositories](05-repositories.md)."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:125
#, markdown-text
msgid ""
"That's all. You can now install the dependencies by running Composer's "
"[`install`](03-cli.md#install) command!"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:129
#, markdown-text, no-wrap
msgid ""
"**Recap:** Any git/svn/hg/fossil repository containing a `composer.json` can "
"be\n"
"added to your project by specifying the package repository and declaring "
"the\n"
"dependency in the [`require`](04-schema.md#require) field.\n"
msgstr ""

#. type: Title ##
#: ../doc/02-libraries.md:130
#, markdown-text, no-wrap
msgid "Publishing to packagist"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:134
#, markdown-text
msgid ""
"Alright, so now you can publish packages. But specifying the VCS repository "
"every time is cumbersome. You don't want to force all your users to do that."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:137
#, markdown-text
msgid ""
"The other thing that you may have noticed is that we did not specify a "
"package repository for `monolog/monolog`. How did that work? The answer is "
"Packagist."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:143
#, markdown-text
msgid ""
"[Packagist](https://packagist.org/) is the main package repository for "
"Composer, and it is enabled by default. Anything that is published on "
"Packagist is available automatically through Composer. Since [Monolog is on "
"Packagist](https://packagist.org/packages/monolog/monolog), we can depend on "
"it without having to specify any additional repositories."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:146
#, markdown-text
msgid ""
"If we wanted to share `hello-world` with the world, we would publish it on "
"Packagist as well."
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:152
#, markdown-text
msgid ""
"You visit [Packagist](https://packagist.org) and hit the \"Submit\" "
"button. This will prompt you to sign up if you haven't already, and then "
"allows you to submit the URL to your VCS repository, at which point "
"Packagist will start crawling it. Once it is done, your package will be "
"available to anyone!"
msgstr ""

#. type: Plain text
#: ../doc/02-libraries.md:153
#, markdown-text
msgid ""
"&larr; [Basic usage](01-basic-usage.md) | [Command-line "
"interface](03-cli.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/03-cli.md:1
#, markdown-text, no-wrap
msgid "Command-line interface / Commands"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:5
#, markdown-text
msgid ""
"You've already learned how to use the command-line interface to do some "
"things. This chapter documents all the available commands."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:9
#, markdown-text
msgid ""
"To get help from the command-line, call `composer` or `composer list` to see "
"the complete list of commands, then `--help` combined with any of those can "
"give you more information."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:11
#, markdown-text
msgid ""
"As Composer uses [symfony/console](https://github.com/symfony/console) you "
"can call commands by short name if it's not ambiguous."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:11
#, no-wrap
msgid "php composer.phar dump\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:15
#, markdown-text
msgid "calls `composer dump-autoload`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:16
#, markdown-text, no-wrap
msgid "Bash Completions"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:20
#, markdown-text, no-wrap
msgid ""
"To install bash completions you can run `composer completion bash > "
"completion.bash`.\n"
"This will create a `completion.bash` file in the current directory.\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:22
#, markdown-text
msgid ""
"Then execute `source completion.bash` to enable it in the current terminal "
"session."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:25
#, markdown-text
msgid ""
"Move and rename the `completion.bash` file to "
"`/etc/bash_completion.d/composer` to make it load automatically in new "
"terminals."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:26
#, markdown-text, no-wrap
msgid "Global Options"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:29
#, markdown-text
msgid "The following options are available with every command:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--verbose (-v):** Increase verbosity of messages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--help (-h):** Display help information."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--quiet (-q):** Do not output any message."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--no-interaction (-n):** Do not ask any interactive question."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--no-plugins:** Disables plugins."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--no-scripts:** Skips execution of scripts defined in `composer.json`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid ""
"**--no-cache:** Disables the use of the cache directory. Same as setting the "
"COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid ""
"**--working-dir (-d):** If specified, use the given directory as working "
"directory."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--profile:** Display timing and memory usage information"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--ansi:** Force ANSI output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--no-ansi:** Disable ANSI output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:43
#, markdown-text
msgid "**--version (-V):** Display this application version."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:44
#, markdown-text, no-wrap
msgid "Process Exit Codes"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
#, markdown-text
msgid "**0:** OK"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
#, markdown-text
msgid "**1:** Generic/unknown error code"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:49
#, markdown-text
msgid "**2:** Dependency solving error code"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:50
#, markdown-text, no-wrap
msgid "init"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:54
#, markdown-text
msgid ""
"In the [Libraries](02-libraries.md) chapter we looked at how to create a "
"`composer.json` by hand. There is also an `init` command available to do "
"this."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:57
#, markdown-text
msgid ""
"When you run the command it will interactively ask you to fill in the "
"fields, while using some smart defaults."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:58
#, no-wrap
msgid "php composer.phar init\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:62 ../doc/03-cli.md:97 ../doc/03-cli.md:185
#: ../doc/03-cli.md:258 ../doc/03-cli.md:313 ../doc/03-cli.md:358
#: ../doc/03-cli.md:382 ../doc/03-cli.md:421 ../doc/03-cli.md:468
#: ../doc/03-cli.md:535 ../doc/03-cli.md:577 ../doc/03-cli.md:601
#: ../doc/03-cli.md:617 ../doc/03-cli.md:632 ../doc/03-cli.md:669
#: ../doc/03-cli.md:703 ../doc/03-cli.md:718 ../doc/03-cli.md:773
#: ../doc/03-cli.md:813 ../doc/03-cli.md:896 ../doc/03-cli.md:952
#: ../doc/03-cli.md:978 ../doc/03-cli.md:987 ../doc/03-cli.md:994
#: ../doc/03-cli.md:1010 ../doc/03-cli.md:1034 ../doc/03-cli.md:1054
#, markdown-text, no-wrap
msgid "Options"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--name:** Name of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--description:** Description of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--author:** Author name of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--type:** Type of package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--homepage:** Homepage of the package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid ""
"**--require:** Package to require with a version constraint. Should be in "
"format `foo/bar:1.0.0`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--require-dev:** Development requirements, see **--require**."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--stability (-s):** Value for the `minimum-stability` field."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid "**--license (-l):** License of package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid ""
"**--repository:** Provide one (or more) custom repositories. They will be "
"stored in the generated composer.json, and used for auto-completion when "
"prompting for the list of requires. Every repository can be either an HTTP "
"URL pointing to a `composer` repository or a JSON string which similar to "
"what the [repositories](04-schema.md#repositories) key accepts."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:80
#, markdown-text
msgid ""
"**--autoload (-a):** Add a PSR-4 autoload mapping to the "
"composer.json. Automatically maps your package's namespace to the provided "
"directory. (Expects a relative path, e.g. src/) See also [PSR-4 "
"autoload](04-schema.md#psr-4)."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:81
#, markdown-text, no-wrap
msgid "install / i"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:85
#, markdown-text
msgid ""
"The `install` command reads the `composer.json` file from the current "
"directory, resolves the dependencies, and installs them into `vendor`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:93
#, markdown-text
msgid ""
"If there is a `composer.lock` file in the current directory, it will use the "
"exact versions from there instead of resolving them. This ensures that "
"everyone using the library will get the same versions of the dependencies."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:96
#, markdown-text
msgid ""
"If there is no `composer.lock` file, Composer will create one after "
"dependency resolution."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:409 ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--prefer-install:** There are two ways of downloading a package: `source` "
"and `dist`. Composer uses `dist` by default. If you pass "
"`--prefer-install=source` (or `--prefer-source`) Composer will install from "
"`source` if there is one. This is useful if you want to make a bugfix to a "
"project and get a local git clone of the dependency directly.  To get the "
"legacy behavior where Composer use `source` automatically for dev versions "
"of packages, use `--prefer-install=auto`. See also "
"[config.preferred-install](06-config.md#preferred-install).  Passing this "
"flag will override the config value."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
#, markdown-text
msgid ""
"**--dry-run:** If you want to run through an installation without actually "
"installing a package, you can use `--dry-run`. This will simulate the "
"installation and show you what would happen."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
#, markdown-text
msgid "**--download-only:** Download only, do not install packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--dev:** Install packages listed in `require-dev` (this is the default "
"behavior)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--no-dev:** Skip installing packages listed in `require-dev`. The "
"autoloader generation skips the `autoload-dev` rules. Also see "
"[COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:409
#, markdown-text
msgid "**--no-autoloader:** Skips autoloader generation."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:409 ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--no-progress:** Removes the progress display that can mess with some "
"terminals or scripts which don't handle backspace characters."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137
#, markdown-text
msgid "**--audit:** Run an audit after installation is complete."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--audit-format:** Audit output format. Must be \"table\", \"plain\", "
"\"json\", or \"summary\" (default)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:344 ../doc/03-cli.md:409
#, markdown-text
msgid ""
"**--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to "
"get a faster autoloader. This is recommended especially for production, but "
"can take a bit of time to run so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:409
#, markdown-text
msgid ""
"**--classmap-authoritative (-a):** Autoload classes from the classmap only.  "
"Implicitly enables `--optimize-autoloader`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:409
#, markdown-text
msgid "**--apcu-autoloader:** Use APCu to cache found/not-found classes."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:409
#, markdown-text
msgid ""
"**--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader "
"cache.  Implicitly enables `--apcu-autoloader`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234 ../doc/03-cli.md:300
#: ../doc/03-cli.md:344 ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these.  See also the [`platform`](06-config.md#platform) "
"config option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:137 ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard. Appending a `+` makes it only ignore the upper-bound of the "
"requirements. For example, if a package requires `php: ^7`, then the option "
"`--ignore-platform-req=php+` would allow installing on PHP 8, but "
"installation on PHP 5.6 would still fail."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:138
#, markdown-text, no-wrap
msgid "update / u / upgrade"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:144
#, markdown-text
msgid ""
"In order to get the latest versions of the dependencies and to update the "
"`composer.lock` file, you should use the `update` command. This command is "
"also aliased as `upgrade` as it does the same as `upgrade` does if you are "
"thinking of `apt-get` or similar package managers."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:151
#, markdown-text
msgid ""
"This will resolve all dependencies of the project and write the exact "
"versions into `composer.lock`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:153
#, markdown-text
msgid ""
"If you only want to update a few packages and not all, you can list them as "
"such:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:154
#, no-wrap
msgid "php composer.phar update vendor/package vendor/package2\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:159
#, markdown-text
msgid "You can also use wildcards to update a bunch of packages at once:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:160
#, no-wrap
msgid "php composer.phar update \"vendor/*\"\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:167
#, markdown-text
msgid ""
"If you want to downgrade a package to a specific version without changing "
"your composer.json you can use `--with` and provide a custom version "
"constraint:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:168
#, no-wrap
msgid "php composer.phar update --with vendor/package:2.0.1\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:175
#, markdown-text
msgid ""
"Note that with the above all packages will be updated. If you only want to "
"update the package(s) for which you provide custom constraints using "
"`--with`, you can skip `--with` and instead use constraints with the partial "
"update syntax:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:176
#, no-wrap
msgid "php composer.phar update vendor/package:2.0.1 vendor/package2:3.0.*\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:183
#, markdown-text, no-wrap
msgid ""
"> **Note:** For packages also required in your composer.json the custom "
"constraint\n"
"> must be a subset of the existing constraint. The composer.json constraints "
"still\n"
"> apply and the composer.json is not modified by these temporary update "
"constraints.\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300 ../doc/03-cli.md:344
#, markdown-text
msgid "**--dry-run:** Simulate the command without actually doing anything."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300 ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--no-install:** Does not run the install step after updating the "
"composer.lock file."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--no-audit:** Does not run the audit steps after updating the "
"composer.lock file. Also see [COMPOSER_NO_AUDIT](#composer-no-audit)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--lock:** Only updates the lock file hash to suppress warning about the "
"lock file being out of date."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--with:** Temporary version constraint to add, e.g. foo/bar:1.0.0 or "
"foo/bar=1.0.0"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--with-dependencies (-w):** Update also dependencies of packages in the "
"argument list, except those which are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--with-all-dependencies (-W):** Update also dependencies of packages in "
"the argument list, including those which are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to "
"get a faster autoloader. This is recommended especially for production, but "
"can take a bit of time to run, so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--prefer-stable:** Prefer stable versions of dependencies. Can also be set "
"via the COMPOSER_PREFER_STABLE=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234 ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--prefer-lowest:** Prefer lowest versions of dependencies. Useful for "
"testing minimal versions of requirements, generally used with "
"`--prefer-stable`. Can also be set via the COMPOSER_PREFER_LOWEST=1 env var."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid ""
"**--interactive:** Interactive interface with autocompletion to select the "
"packages to update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:234
#, markdown-text
msgid "**--root-reqs:** Restricts the update to your first degree dependencies."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:236
#, markdown-text
msgid ""
"Specifying one of the words `mirrors`, `lock`, or `nothing` as an argument "
"has the same effect as specifying the option `--lock`, for example `composer "
"update mirrors` is exactly the same as `composer update --lock`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:237
#, markdown-text, no-wrap
msgid "require / r"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:241
#, markdown-text
msgid ""
"The `require` command adds new packages to the `composer.json` file from the "
"current directory. If no file exists one will be created on the fly."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:242
#, no-wrap
msgid "php composer.phar require\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:248
#, markdown-text
msgid ""
"After adding/changing the requirements, the modified requirements will be "
"installed or updated."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:251
#, markdown-text
msgid ""
"If you do not want to choose requirements interactively, you can pass them "
"to the command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:252
#, no-wrap
msgid ""
"php composer.phar require \"vendor/package:2.*\" "
"vendor/package2:dev-master\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:257
#, markdown-text
msgid ""
"If you do not specify a package, Composer will prompt you to search for a "
"package, and given results, provide a list of matches to require."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300
#, markdown-text
msgid "**--dev:** Add packages to `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300 ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--no-update:** Disables the automatic update of the dependencies (implies "
"--no-install)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--update-no-dev:** Run the dependency update with the `--no-dev` "
"option. Also see [COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--update-with-dependencies (-w):** Also update dependencies of the newly "
"required packages, except those that are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300
#, markdown-text
msgid ""
"**--update-with-all-dependencies (-W):** Also update dependencies of the "
"newly required packages, including those that are root requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300 ../doc/03-cli.md:344 ../doc/03-cli.md:595
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:300
#, markdown-text
msgid "**--sort-packages:** Keep packages sorted in `composer.json`."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:301
#, markdown-text, no-wrap
msgid "remove"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:305
#, markdown-text
msgid ""
"The `remove` command removes packages from the `composer.json` file from the "
"current directory."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:306
#, no-wrap
msgid "php composer.phar remove vendor/package vendor/package2\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:312
#, markdown-text
msgid ""
"After removing the requirements, the modified requirements will be "
"uninstalled."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--unused** Remove unused packages that are not a direct or indirect "
"dependency (anymore)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344
#, markdown-text
msgid "**--dev:** Remove packages from `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344 ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--no-audit:** Does not run the audit steps after installation is "
"complete. Also see [COMPOSER_NO_AUDIT](#composer-no-audit)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--update-no-dev:** Run the dependency update with the --no-dev "
"option. Also see [COMPOSER_NO_DEV](#composer-no-dev)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--update-with-dependencies (-w):** Also update dependencies of the removed "
"packages.  (Deprecated, is now default behavior)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:344
#, markdown-text
msgid ""
"**--update-with-all-dependencies (-W):** Allows all inherited dependencies "
"to be updated, including those that are root requirements."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:345
#, markdown-text, no-wrap
msgid "bump"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:352
#, markdown-text
msgid ""
"The `bump` command increases the lower limit of your composer.json "
"requirements to the currently installed versions. This helps to ensure your "
"dependencies do not accidentally get downgraded due to some other conflict, "
"and can slightly improve dependency resolution performance as it limits the "
"amount of package versions Composer has to look at."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:357
#, markdown-text
msgid ""
"Running this blindly on libraries is **NOT** recommended as it will narrow "
"down your allowed dependencies, which may cause dependency hell for your "
"users.  Running it with `--dev-only` on libraries may be fine however as dev "
"requirements are local to the library and do not affect consumers of the "
"package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:363
#, markdown-text
msgid "**--dev-only:** Only bump requirements in \"require-dev\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:363
#, markdown-text
msgid "**--no-dev-only:** Only bump requirements in \"require\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:363
#, markdown-text
msgid "**--dry-run:** Outputs the packages to bump, but will not execute anything."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:364
#, markdown-text, no-wrap
msgid "reinstall"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:370
#, markdown-text
msgid ""
"The `reinstall` command looks up installed packages by name, uninstalls them "
"and reinstalls them. This lets you do a clean install of a package if you "
"messed with its files, or if you wish to change the installation type using "
"--prefer-install."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:371
#, no-wrap
msgid "php composer.phar reinstall acme/foo acme/bar\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:377
#, markdown-text
msgid ""
"You can specify more than one package name to reinstall, or use a wildcard "
"to select several packages at once:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:378
#, no-wrap
msgid "php composer.phar reinstall \"acme/*\"\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:409
#, markdown-text
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements. This only has "
"an effect in the context of the autoloader generation for the reinstall "
"command."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:409
#, markdown-text
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement. This only "
"has an effect in the context of the autoloader generation for the reinstall "
"command.  Multiple requirements can be ignored via wildcard."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:410
#, markdown-text, no-wrap
msgid "check-platform-reqs"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:416
#, markdown-text
msgid ""
"The check-platform-reqs command checks that your PHP and extensions versions "
"match the platform requirements of the installed packages. This can be used "
"to verify that a production server has all the extensions needed to run a "
"project after installing it for example."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:420
#, markdown-text
msgid ""
"Unlike update/install, this command will ignore config.platform settings and "
"check the real platform packages so you can be certain you have the required "
"platform dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:426
#, markdown-text
msgid ""
"**--lock:** Checks requirements only from the lock file, not from installed "
"packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:426
#, markdown-text
msgid "**--no-dev:** Disables checking of require-dev packages requirements."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:426
#, markdown-text
msgid "**--format (-f):** Format of the output: text (default) or json"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:427
#, markdown-text, no-wrap
msgid "global"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:432
#, markdown-text
msgid ""
"The global command allows you to run other commands like `install`, "
"`remove`, `require` or `update` as if you were running them from the "
"[COMPOSER_HOME](#composer-home)  directory."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:435
#, markdown-text
msgid ""
"This is merely a helper to manage a project stored in a central location "
"that can hold CLI tools or Composer plugins that you want to have available "
"everywhere."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:437
#, markdown-text
msgid "This can be used to install CLI utilities globally. Here is an example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:438
#, no-wrap
msgid "php composer.phar global require friendsofphp/php-cs-fixer\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:445
#, markdown-text
msgid ""
"Now the `php-cs-fixer` binary is available globally. Make sure your global "
"[vendor binaries](articles/vendor-binaries.md) directory is in your `$PATH` "
"environment variable, you can get its location with the following command :"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:446
#, no-wrap
msgid "php composer.phar global config bin-dir --absolute\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:451
#, markdown-text
msgid "If you wish to update the binary later on you can run a global update:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:452
#, no-wrap
msgid "php composer.phar global update\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:456
#, markdown-text, no-wrap
msgid "search"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:461
#, markdown-text
msgid ""
"The search command allows you to search through the current project's "
"package repositories. Usually this will be packagist. You pass it the terms "
"you want to search for."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:462
#, no-wrap
msgid "php composer.phar search monolog\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:467
#, markdown-text
msgid "You can also search for more than one term by passing multiple arguments."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:479
#, markdown-text
msgid "**--only-name (-N):** Search only in package names."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:479
#, markdown-text
msgid ""
"**--only-vendor (-O):** Search only for vendor / organization names, returns "
"only \"vendor\" as a result."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:479
#, markdown-text
msgid "**--type (-t):** Search for a specific package type."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:479
#, markdown-text
msgid ""
"**--format (-f):** Lets you pick between text (default) or json output "
"format.  Note that in the json, only the name and description keys are "
"guaranteed to be present. The rest (`url`, `repository`, `downloads` and "
"`favers`) are available for Packagist.org search results and other "
"repositories may return more or less data."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:480
#, markdown-text, no-wrap
msgid "show / info"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:483
#, markdown-text
msgid "To list all of the available packages, you can use the `show` command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:484
#, no-wrap
msgid "php composer.phar show\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:489
#, markdown-text
msgid "To filter the list you can pass a package mask using wildcards."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:490
#, no-wrap
msgid "php composer.phar show \"monolog/*\"\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:493
#, no-wrap
msgid ""
"monolog/monolog 2.4.0 Sends your logs to files, sockets, inboxes, databases "
"and various web services\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:499
#, markdown-text
msgid ""
"If you want to see the details of a certain package, you can pass the "
"package name."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:500
#, no-wrap
msgid "php composer.phar show monolog/monolog\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:503
#, no-wrap
msgid ""
"name     : monolog/monolog\n"
"descrip. : Sends your logs to files, sockets, inboxes, databases and various "
"web services\n"
"keywords : log, logging, psr-3\n"
"versions : * 1.27.1\n"
"type     : library\n"
"license  : MIT License (MIT) (OSI approved) "
"https://spdx.org/licenses/MIT.html#licenseText\n"
"homepage : http://github.com/Seldaek/monolog\n"
"source   : [git] https://github.com/Seldaek/monolog.git "
"904713c5929655dc9b97288b69cfeedad610c9a1\n"
"dist     : [zip] "
"https://api.github.com/repos/Seldaek/monolog/zipball/904713c5929655dc9b97288b69cfeedad610c9a1 "
"904713c5929655dc9b97288b69cfeedad610c9a1\n"
"names    : monolog/monolog, psr/log-implementation\n"
"\n"
"support\n"
"issues : https://github.com/Seldaek/monolog/issues\n"
"source : https://github.com/Seldaek/monolog/tree/1.27.1\n"
"\n"
"autoload\n"
"psr-4\n"
"Monolog\\ => src/Monolog\n"
"\n"
"requires\n"
"php >=5.3.0\n"
"psr/log ~1.0\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:530
#, markdown-text
msgid ""
"You can even pass the package version, which will tell you the details of "
"that specific version."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:531
#, no-wrap
msgid "php composer.phar show monolog/monolog 1.0.2\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--all:** List all packages available in all your repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--installed (-i):** List the packages that are installed (this is enabled "
"by default, and deprecated)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--locked:** List the locked packages from composer.lock."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--platform (-p):** List only platform packages (php & extensions)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--available (-a):** List available packages only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--self (-s):** List the root package info."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--name-only (-N):** List package names only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--path (-P):** List package paths."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--tree (-t):** List your dependencies as a tree. If you pass a package "
"name it will show the dependency tree for that package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--latest (-l):** List all installed packages including their latest "
"version."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--outdated (-o):** Implies --latest, but this lists *only* packages that "
"have a newer version available."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--ignore:** Ignore specified package(s). Use it with the --outdated option "
"if you don't want to be informed about new versions of some packages"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--no-dev:** Filters dev dependencies from the package list."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--major-only (-M):** Use with --latest or --outdated. Only shows packages "
"that have major SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--minor-only (-m):** Use with --latest or --outdated. Only shows packages "
"that have minor SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--patch-only:** Use with --latest or --outdated. Only shows packages that "
"have patch-level SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563 ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--direct (-D):** Restricts the list of packages to your direct "
"dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid "**--strict:** Return a non-zero exit code when there are outdated packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563 ../doc/03-cli.md:595 ../doc/03-cli.md:635
#, markdown-text
msgid ""
"**--format (-f):** Lets you pick between text (default) or json output "
"format."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these. Use with the --outdated option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:563
#, markdown-text
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement(`php`, "
"`hhvm`, `lib-*` and `ext-*`) and force the installation even if the local "
"machine does not fulfill it. Multiple requirements can be ignored via "
"wildcard. Use with the --outdated option."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:564
#, markdown-text, no-wrap
msgid "outdated"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:569
#, markdown-text
msgid ""
"The `outdated` command shows a list of installed packages that have updates "
"available, including their current and latest versions. This is basically an "
"alias for `composer show -lo`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:571
#, markdown-text
msgid "The color coding is as such:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:576
#, markdown-text
msgid "**green (=)**: Dependency is in the latest version and is up to date."
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:576
#, markdown-text
msgid ""
"**yellow (`~`)**: Dependency has a new version available that includes "
"backwards compatibility breaks according to semver, so upgrade when you can "
"but it may involve work."
msgstr ""

#. type: Bullet: '- '
#: ../doc/03-cli.md:576
#, markdown-text
msgid ""
"**red (!)**: Dependency has a new version that is semver-compatible and you "
"should upgrade it."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--all (-a):** Show all packages, not just outdated (alias for `composer "
"show --latest`)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid "**--strict:** Returns non-zero exit code if any package is outdated."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--ignore:** Ignore specified package(s). Use it if you don't want to be "
"informed about new versions of some packages"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--major-only (-M):** Only shows packages that have major SemVer-compatible "
"updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--minor-only (-m):** Only shows packages that have minor SemVer-compatible "
"updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--patch-only (-p):** Only shows packages that have patch-level "
"SemVer-compatible updates."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid "**--no-dev:** Do not show outdated dev dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--locked:** Shows updates for packages from the lock file, regardless of "
"what is currently in vendor dir."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:595
#, markdown-text
msgid ""
"**--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, "
"`lib-*` and `ext-*`) and force the installation even if the local machine "
"does not fulfill these."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:596
#, markdown-text, no-wrap
msgid "browse / home"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:600
#, markdown-text
msgid ""
"The `browse` (aliased to `home`) opens a package's repository URL or "
"homepage in your browser."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:605
#, markdown-text
msgid "**--homepage (-H):** Open the homepage instead of the repository URL."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:605
#, markdown-text
msgid "**--show (-s):** Only show the homepage or repository URL."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:606
#, markdown-text, no-wrap
msgid "suggests"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:611
#, markdown-text
msgid ""
"Lists all packages suggested by the currently installed set of packages. You "
"can optionally pass one or multiple package names in the format of "
"`vendor/package` to limit output to suggestions made by those packages only."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:614
#, markdown-text
msgid ""
"Use the `--by-package` (default) or `--by-suggestion` flags to group the "
"output by the package offering the suggestions or the suggested packages "
"respectively."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:616
#, markdown-text
msgid "If you only want a list of suggested package names, use `--list`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:625
#, markdown-text
msgid "**--by-package:** Groups output by suggesting package (default)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:625
#, markdown-text
msgid "**--by-suggestion:** Groups output by suggested package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:625
#, markdown-text
msgid ""
"**--all:** Show suggestions from all dependencies, including transitive ones "
"(by default only direct dependencies' suggestions are shown)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:625
#, markdown-text
msgid "**--list:** Show only list of suggested package names."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:625
#, markdown-text
msgid "**--no-dev:** Excludes suggestions from `require-dev` packages."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:626
#, markdown-text, no-wrap
msgid "fund"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:631
#, markdown-text
msgid ""
"Discover how to help fund the maintenance of your dependencies. This lists "
"all funding links from the installed dependencies. Use `--format=json` to "
"get machine-readable output."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:636
#, markdown-text, no-wrap
msgid "depends / why"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:641
#, markdown-text
msgid ""
"The `depends` command tells you which other packages depend on a certain "
"package. As with installation `require-dev` relationships are only "
"considered for the root package."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:642
#, no-wrap
msgid "php composer.phar depends doctrine/lexer\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:645
#, no-wrap
msgid ""
"doctrine/annotations  1.13.3 requires doctrine/lexer (1.*)\n"
"doctrine/common       2.13.3 requires doctrine/lexer (^1.0)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:652
#, markdown-text
msgid ""
"You can optionally specify a version constraint after the package to limit "
"the search."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:655
#, markdown-text
msgid ""
"Add the `--tree` or `-t` flag to show a recursive tree of why the package is "
"depended upon, for example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:656
#, no-wrap
msgid "php composer.phar depends psr/log -t\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:659
#, no-wrap
msgid ""
"psr/log 1.1.4 Common interface for logging libraries\n"
"├──composer/composer 2.4.x-dev (requires psr/log ^1.0 || ^2.0 || ^3.0)\n"
"├──composer/composer dev-main (requires psr/log ^1.0 || ^2.0 || ^3.0)\n"
"├──composer/xdebug-handler 3.0.3 (requires psr/log ^1 || ^2 || ^3)\n"
"│  ├──composer/composer 2.4.x-dev (requires composer/xdebug-handler ^2.0.2 "
"|| ^3.0.3)\n"
"│  └──composer/composer dev-main (requires composer/xdebug-handler ^2.0.2 || "
"^3.0.3)\n"
"└──symfony/console v5.4.11 (conflicts psr/log >=3) (circular dependency "
"aborted here)\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:673 ../doc/03-cli.md:707
#, markdown-text
msgid "**--recursive (-r):** Recursively resolves up to the root package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:673 ../doc/03-cli.md:707
#, markdown-text
msgid "**--tree (-t):** Prints the results as a nested tree, implies -r."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:674
#, markdown-text, no-wrap
msgid "prohibits / why-not"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:680
#, markdown-text
msgid ""
"The `prohibits` command tells you which packages are blocking a given "
"package from being installed. Specify a version constraint to verify whether "
"upgrades can be performed in your project, and if not why not. See the "
"following example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:681
#, no-wrap
msgid "php composer.phar prohibits symfony/symfony 3.1\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:684
#, no-wrap
msgid "laravel/framework v5.2.16 requires symfony/var-dumper (2.8.*|3.0.*)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:690
#, markdown-text
msgid ""
"Note that you can also specify platform requirements, for example to check "
"whether you can upgrade your server to PHP 8.0:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:691
#, no-wrap
msgid "php composer.phar prohibits php 8\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:694
#, no-wrap
msgid ""
"doctrine/cache        v1.6.0 requires php (~5.5|~7.0)\n"
"doctrine/common       v2.6.1 requires php (~5.5|~7.0)\n"
"doctrine/instantiator 1.0.5  requires php (>=5.3,<8.0-DEV)\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:702
#, markdown-text
msgid ""
"As with `depends` you can request a recursive lookup, which will list all "
"packages depending on the packages that cause the conflict."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:708
#, markdown-text, no-wrap
msgid "validate"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:713
#, markdown-text
msgid ""
"You should always run the `validate` command before you commit your "
"`composer.json` file, and before you tag a release. It will check if your "
"`composer.json` is valid."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:714
#, no-wrap
msgid "php composer.phar validate\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:725
#, markdown-text
msgid ""
"**--no-check-all:** Do not emit a warning if requirements in `composer.json` "
"use unbound or overly strict version constraints."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:725
#, markdown-text
msgid ""
"**--no-check-lock:** Do not emit an error if `composer.lock` exists and is "
"not up to date."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:725
#, markdown-text
msgid ""
"**--no-check-publish:** Do not emit an error if `composer.json` is "
"unsuitable for publishing as a package on Packagist but is otherwise valid."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:725
#, markdown-text
msgid ""
"**--with-dependencies:** Also validate the composer.json of all installed "
"dependencies."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:725
#, markdown-text
msgid "**--strict:** Return a non-zero exit code for warnings as well as errors."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:726
#, markdown-text, no-wrap
msgid "status"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:731
#, markdown-text
msgid ""
"If you often need to modify the code of your dependencies and they are "
"installed from source, the `status` command allows you to check if you have "
"local changes in any of them."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:732
#, no-wrap
msgid "php composer.phar status\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:738
#, markdown-text
msgid ""
"With the `--verbose` option you get some more information about what was "
"changed:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:739
#, no-wrap
msgid "php composer.phar status -v\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/03-cli.md:742
#, no-wrap
msgid ""
"You have changes in the following dependencies:\n"
"vendor/seld/jsonlint:\n"
"    M README.mdown\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:748
#, markdown-text, no-wrap
msgid "self-update / selfupdate"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:752
#, markdown-text
msgid ""
"To update Composer itself to the latest version, run the `self-update` "
"command. It will replace your `composer.phar` with the latest version."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:753
#, no-wrap
msgid "php composer.phar self-update\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:758
#, markdown-text
msgid "If you would like to instead update to a specific release specify it:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:759
#, no-wrap
msgid "php composer.phar self-update 2.4.0-RC1\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:765
#, markdown-text
msgid ""
"If you have installed Composer for your entire system (see [global "
"installation](00-intro.md#globally)), you may have to run the command with "
"`root` privileges"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:766
#, no-wrap
msgid "sudo -H composer self-update\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:772
#, markdown-text
msgid ""
"If Composer was not installed as a PHAR, this command is not available.  "
"(This is sometimes the case when Composer was installed by an operating "
"system package manager.)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--rollback (-r):** Rollback to the last version you had installed."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid ""
"**--clean-backups:** Delete old backups during an update. This makes the "
"current version of Composer the only backup available after the update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--no-progress:** Do not output download progress."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--update-keys:** Prompt user for a key update."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--stable:** Force an update to the stable channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--preview:** Force an update to the preview channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--snapshot:** Force an update to the snapshot channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--1:** Force an update to the stable channel, but only use 1.x versions"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid "**--2:** Force an update to the stable channel, but only use 2.x versions"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:786
#, markdown-text
msgid ""
"**--set-channel-only:** Only store the channel as the default one and then "
"exit"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:787
#, markdown-text, no-wrap
msgid "config"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:791
#, markdown-text
msgid ""
"The `config` command allows you to edit Composer config settings and "
"repositories in either the local `composer.json` file or the global "
"`config.json` file."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:793
#, markdown-text
msgid "Additionally it lets you edit most properties in the local `composer.json`."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:794
#, no-wrap
msgid "php composer.phar config --list\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:798
#, markdown-text, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:801
#, markdown-text
msgid "`config [options] [setting-key] [setting-value1] ... [setting-valueN]`"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:805
#, markdown-text
msgid ""
"`setting-key` is a configuration option name and `setting-value1` is a "
"configuration value.  For settings that can take an array of values (like "
"`github-protocols`), multiple setting-value arguments are allowed."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:807
#, markdown-text
msgid "You can also edit the values of the following properties:"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:810
#, markdown-text
msgid ""
"`description`, `homepage`, `keywords`, `license`, `minimum-stability`, "
"`name`, `prefer-stable`, `type` and `version`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:812
#, markdown-text
msgid "See the [Config](06-config.md) chapter for valid configuration options."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--global (-g):** Operate on the global config file located at "
"`$COMPOSER_HOME/config.json` by default.  Without this option, this command "
"affects the local composer.json file or a file specified by `--file`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--editor (-e):** Open the local composer.json file using in a text editor "
"as defined by the `EDITOR` env variable.  With the `--global` option, this "
"opens the global config file."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid "**--auth (-a):** Affect auth config file (only used for --editor)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid "**--unset:** Remove the configuration element named by `setting-key`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--list (-l):** Show the list of current config variables.  With the "
"`--global` option this lists the global configuration only."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--file=\"...\" (-f):** Operate on a specific file instead of "
"composer.json. Note that this cannot be used in conjunction with the "
"`--global` option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--absolute:** Returns absolute paths when fetching `*-dir` config values "
"instead of relative."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid "**--json:** JSON decode the setting value, to be used with `extra.*` keys."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--merge:** Merge the setting value with the current value, to be used with "
"`extra.*` keys in combination with `--json`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid ""
"**--append:** When adding a repository, append it (lowest priority) to the "
"existing ones instead of prepending it (highest priority)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:833
#, markdown-text
msgid "**--source:** Display where the config value is loaded from."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:834
#, markdown-text, no-wrap
msgid "Modifying Repositories"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:838
#, markdown-text
msgid ""
"In addition to modifying the config section, the `config` command also "
"supports making changes to the repositories section by using it the "
"following way:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:839
#, no-wrap
msgid "php composer.phar config repositories.foo vcs https://github.com/foo/bar\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:844
#, markdown-text
msgid ""
"If your repository requires more configuration options, you can instead pass "
"its JSON representation :"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:845
#, no-wrap
msgid ""
"php composer.phar config repositories.foo '{\"type\": \"vcs\", \"url\": "
"\"http://svn.example.org/my-project/\", \"trunk-path\": \"master\"}'\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:849
#, markdown-text, no-wrap
msgid "Modifying Extra Values"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:853
#, markdown-text
msgid ""
"In addition to modifying the config section, the `config` command also "
"supports making changes to the extra section by using it the following way:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:854
#, no-wrap
msgid "php composer.phar config extra.foo.bar value\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:860
#, markdown-text
msgid ""
"The dots indicate array nesting, a max depth of 3 levels is allowed "
"though. The above would set `\"extra\": { \"foo\": { \"bar\": \"value\" } "
"}`."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:863
#, markdown-text
msgid ""
"If you have a complex value to add/modify, you can use the `--json` and "
"`--merge` flags to edit extra fields as json:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:864
#, no-wrap
msgid ""
"php composer.phar config --json extra.foo.bar '{\"baz\": true, \"qux\": "
"[]}'\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:868
#, markdown-text, no-wrap
msgid "create-project"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:873
#, markdown-text
msgid ""
"You can use Composer to create new projects from an existing package. This "
"is the equivalent of doing a git clone/svn checkout followed by a `composer "
"install` of the vendors."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:875
#, markdown-text
msgid "There are several applications for this:"
msgstr ""

#. type: Bullet: '1. '
#: ../doc/03-cli.md:880
#, markdown-text
msgid "You can deploy application packages."
msgstr ""

#. type: Bullet: '2. '
#: ../doc/03-cli.md:880
#, markdown-text
msgid "You can check out any package and start developing on patches for example."
msgstr ""

#. type: Bullet: '3. '
#: ../doc/03-cli.md:880
#, markdown-text
msgid ""
"Projects with multiple developers can use this feature to bootstrap the "
"initial application for development."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:884
#, markdown-text
msgid ""
"To create a new project using Composer you can use the `create-project` "
"command.  Pass it a package name, and the directory to create the project "
"in. You can also provide a version as a third argument, otherwise the latest "
"version is used."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:886
#, markdown-text
msgid ""
"If the directory does not currently exist, it will be created during "
"installation."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:887
#, no-wrap
msgid "php composer.phar create-project doctrine/orm path \"2.2.*\"\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:893
#, markdown-text
msgid ""
"It is also possible to run the command without params in a directory with an "
"existing `composer.json` file to bootstrap a project."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:895
#, markdown-text
msgid "By default the command checks for the packages on packagist.org."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--stability (-s):** Minimum stability of package. Defaults to `stable`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--repository:** Provide a custom repository to search for the package, "
"which will be used instead of packagist. Can be either an HTTP URL pointing "
"to a `composer` repository, a path to a local `packages.json` file, or a "
"JSON string which similar to what the "
"[repositories](04-schema.md#repositories)  key accepts. You can use this "
"multiple times to configure multiple repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--add-repository:** Add the custom repository in the composer.json. If a "
"lock file is present, it will be deleted and an update will be run instead "
"of an install."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--dev:** Install packages listed in `require-dev`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--no-dev:** Disables installation of require-dev packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--no-scripts:** Disables the execution of the scripts defined in the root "
"package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--no-secure-http:** Disable the secure-http config option temporarily "
"while installing the root package. Use at your own risk. Using this flag is "
"a bad idea."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid ""
"**--keep-vcs:** Skip the deletion of the VCS metadata for the created "
"project. This is mostly useful if you run the command in non-interactive "
"mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--remove-vcs:** Force-remove the VCS metadata without prompting."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--no-install:** Disables installation of the vendors."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:938
#, markdown-text
msgid "**--ask:** Ask the user to provide a target directory for the new project."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:939
#, markdown-text, no-wrap
msgid "dump-autoload / dumpautoload"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:944
#, markdown-text
msgid ""
"If you need to update the autoloader because of new classes in a classmap "
"package for example, you can use `dump-autoload` to do that without having "
"to go through an install or update."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:951
#, markdown-text
msgid ""
"Additionally, it can dump an optimized autoloader that converts PSR-0/4 "
"packages into classmap ones for performance reasons. In large applications "
"with many classes, the autoloader can take up a substantial portion of every "
"request's time. Using classmaps for everything is less convenient in "
"development, but using this option you can still use PSR-0/4 for convenience "
"and classmaps for performance."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--optimize (-o):** Convert PSR-0/4 autoloading to classmap to get a faster "
"autoloader. This is recommended especially for production, but can take a "
"bit of time to run, so it is currently not done by default."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--classmap-authoritative (-a):** Autoload classes from the classmap only.  "
"Implicitly enables `--optimize`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid "**--apcu:** Use APCu to cache found/not-found classes."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--apcu-prefix:** Use a custom prefix for the APCu autoloader cache.  "
"Implicitly enables `--apcu`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--no-dev:** Disables autoload-dev rules. Composer will by default infer "
"this automatically according to the last `install` or `update` `--no-dev` "
"state."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--dev:** Enables autoload-dev rules. Composer will by default infer this "
"automatically according to the last `install` or `update` `--no-dev` state."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--ignore-platform-reqs:** ignore all `php`, `hhvm`, `lib-*` and `ext-*` "
"requirements and skip the [platform check](07-runtime.md#platform-check) for "
"these.  See also the [`platform`](06-config.md#platform) config option."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--ignore-platform-req:** ignore a specific platform requirement (`php`, "
"`hhvm`, `lib-*` and `ext-*`) and skip the [platform "
"check](07-runtime.md#platform-check) for it.  Multiple requirements can be "
"ignored via wildcard."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:973
#, markdown-text
msgid ""
"**--strict-psr:** Return a failed status code (1) if PSR-4 or PSR-0 mapping "
"errors are present. Requires --optimize to work."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:974
#, markdown-text, no-wrap
msgid "clear-cache / clearcache / cc"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:977
#, markdown-text
msgid "Deletes all content from Composer's cache directories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:981
#, markdown-text
msgid "**--gc:** Only run garbage collection, not a full cache clear"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:982
#, markdown-text, no-wrap
msgid "licenses"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:986
#, markdown-text
msgid ""
"Lists the name, version and license of every package installed. Use "
"`--format=json` to get machine-readable output."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:991
#, markdown-text
msgid ""
"**--format:** Format of the output: text, json or summary (default: "
"\"text\")"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:991
#, markdown-text
msgid "**--no-dev:** Remove dev dependencies from the output"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:992
#, markdown-text, no-wrap
msgid "run-script / run"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1000
#, markdown-text
msgid "**--timeout:** Set the script timeout in seconds, or 0 for no timeout."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1000
#, markdown-text
msgid "**--dev:** Sets the dev mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1000
#, markdown-text
msgid "**--no-dev:** Disable dev mode."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1000
#, markdown-text
msgid "**--list (-l):** List user defined scripts."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1003
#, markdown-text
msgid ""
"To run [scripts](articles/scripts.md) manually you can use this command, "
"give it the script name and optionally any required arguments."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1004
#, markdown-text, no-wrap
msgid "exec"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1009
#, markdown-text
msgid ""
"Executes a vendored binary/script. You can execute any command and this will "
"ensure that the Composer bin-dir is pushed on your PATH before the command "
"runs."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1013
#, markdown-text
msgid "**--list (-l):** List the available Composer binaries."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1014
#, markdown-text, no-wrap
msgid "diagnose"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1019
#, markdown-text
msgid ""
"If you think you found a bug, or something is behaving strangely, you might "
"want to run the `diagnose` command to perform automated checks for many "
"common problems."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1020
#, no-wrap
msgid "php composer.phar diagnose\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1024 ../doc/04-schema.md:909
#, markdown-text, no-wrap
msgid "archive"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1029
#, markdown-text
msgid ""
"This command is used to generate a zip/tar archive for a given package in a "
"given version. It can also be used to archive your entire project without "
"excluded/ignored files."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1030
#, no-wrap
msgid "php composer.phar archive vendor/package 2.0.21 --format=zip\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1040
#, markdown-text
msgid ""
"**--format (-f):** Format of the resulting archive: tar, tar.gz, tar.bz2 or "
"zip (default: \"tar\")."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1040
#, markdown-text
msgid "**--dir:** Write the archive to this directory (default: \".\")"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1040
#, markdown-text
msgid "**--file:** Write the archive with the given file name."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1041
#, markdown-text, no-wrap
msgid "audit"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1047
#, markdown-text
msgid ""
"This command is used to audit the packages you have installed for possible "
"security issues. It checks for and lists security vulnerability advisories "
"according to the [Packagist.org "
"api](https://packagist.org/apidoc#list-security-advisories)."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1049
#, markdown-text
msgid ""
"The audit command returns the amount of vulnerabilities found. `0` if "
"successful, and up to `255` otherwise."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1050
#, no-wrap
msgid "php composer.phar audit\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
#, markdown-text
msgid "**--no-dev:** Disables auditing of require-dev packages."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
#, markdown-text
msgid ""
"**--format (-f):** Audit output format. Must be \"table\" (default), "
"\"plain\", \"json\", or \"summary\"."
msgstr ""

#. type: Bullet: '* '
#: ../doc/03-cli.md:1059
#, markdown-text
msgid ""
"**--locked:** Audit packages from the lock file, regardless of what is "
"currently in vendor dir."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1060
#, markdown-text, no-wrap
msgid "help"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1063
#, markdown-text
msgid "To get more information about a certain command, you can use `help`."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1064
#, no-wrap
msgid "php composer.phar help install\n"
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1068
#, markdown-text, no-wrap
msgid "Command-line completion"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1072
#, markdown-text
msgid ""
"Command-line completion can be enabled by following instructions [on this "
"page](https://github.com/bamarni/symfony-console-autocomplete)."
msgstr ""

#. type: Title ##
#: ../doc/03-cli.md:1073
#, markdown-text, no-wrap
msgid "Environment variables"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1079
#, markdown-text
msgid ""
"You can set a number of environment variables that override certain "
"settings.  Whenever possible it is recommended to specify these settings in "
"the `config` section of `composer.json` instead. It is worth noting that the "
"env vars will always take precedence over the values specified in "
"`composer.json`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1080
#, markdown-text, no-wrap
msgid "COMPOSER"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1084
#, markdown-text
msgid ""
"By setting the `COMPOSER` env variable it is possible to set the filename of "
"`composer.json` to something else."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1086
#, markdown-text
msgid "For example:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/03-cli.md:1087
#, no-wrap
msgid "COMPOSER=composer-other.json php composer.phar install\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1092
#, markdown-text
msgid ""
"The generated lock file will use the same name: `composer-other.lock` in "
"this example."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1093
#, markdown-text, no-wrap
msgid "COMPOSER_ALLOW_SUPERUSER"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1098
#, markdown-text
msgid ""
"If set to 1, this env disables the warning about running commands as "
"root/super user.  It also disables automatic clearing of sudo sessions, so "
"you should really only set this if you use Composer as a super user at all "
"times like in docker containers."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1099
#, markdown-text, no-wrap
msgid "COMPOSER_ALLOW_XDEBUG"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1102
#, markdown-text
msgid ""
"If set to 1, this env allows running Composer when the Xdebug extension is "
"enabled, without restarting PHP without it."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1103
#, markdown-text, no-wrap
msgid "COMPOSER_AUTH"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1110
#, markdown-text
msgid ""
"The `COMPOSER_AUTH` var allows you to set up authentication as an "
"environment variable.  The contents of the variable should be a JSON "
"formatted object containing [http-basic, github-oauth, bitbucket-oauth, "
"... objects as needed](articles/authentication-for-private-packages.md), and "
"following the [spec from the config](06-config.md)."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1111
#, markdown-text, no-wrap
msgid "COMPOSER_BIN_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1115
#, markdown-text
msgid ""
"By setting this option you can change the `bin` ([Vendor "
"Binaries](articles/vendor-binaries.md))  directory to something other than "
"`vendor/bin`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1116
#, markdown-text, no-wrap
msgid "COMPOSER_CACHE_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1120
#, markdown-text
msgid ""
"The `COMPOSER_CACHE_DIR` var allows you to change the Composer cache "
"directory, which is also configurable via the "
"[`cache-dir`](06-config.md#cache-dir) option."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1126
#, markdown-text, no-wrap
msgid ""
"By default, it points to `C:\\Users\\<user>\\AppData\\Local\\Composer` (or "
"`%LOCALAPPDATA%/Composer`) on Windows.\n"
"On \\*nix systems that follow the [XDG Base\n"
"Directory "
"Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html),\n"
"it points to `$XDG_CACHE_HOME/composer`. On other \\*nix systems and on "
"macOS, it points to\n"
"`$COMPOSER_HOME/cache`.\n"
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1127
#, markdown-text, no-wrap
msgid "COMPOSER_CAFILE"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1131
#, markdown-text
msgid ""
"By setting this environmental value, you can set a path to a certificate "
"bundle file to be used during SSL/TLS peer verification."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1132
#, markdown-text, no-wrap
msgid "COMPOSER_DISABLE_XDEBUG_WARN"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1135
#, markdown-text
msgid ""
"If set to 1, this env suppresses a warning when Composer is running with the "
"Xdebug extension enabled."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1136
#, markdown-text, no-wrap
msgid "COMPOSER_DISCARD_CHANGES"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1139
#, markdown-text
msgid ""
"This env var controls the [`discard-changes`](06-config.md#discard-changes) "
"config option."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1140
#, markdown-text, no-wrap
msgid "COMPOSER_HOME"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1145
#, markdown-text
msgid ""
"The `COMPOSER_HOME` var allows you to change the Composer home "
"directory. This is a hidden, global (per-user on the machine) directory that "
"is shared between all projects."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1147
#, markdown-text
msgid ""
"Use `composer config --global home` to see the location of the home "
"directory."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1153
#, markdown-text, no-wrap
msgid ""
"By default, it points to `C:\\Users\\<user>\\AppData\\Roaming\\Composer` on "
"Windows\n"
"and `/Users/<user>/.composer` on macOS. On \\*nix systems that follow the "
"[XDG Base\n"
"Directory "
"Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html),\n"
"it points to `$XDG_CONFIG_HOME/composer`. On other \\*nix systems, it points "
"to\n"
"`/home/<user>/.composer`.\n"
msgstr ""

#. type: Title ####
#: ../doc/03-cli.md:1154
#, markdown-text, no-wrap
msgid "COMPOSER_HOME/config.json"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1160
#, markdown-text
msgid ""
"You may put a `config.json` file into the location which `COMPOSER_HOME` "
"points to. Composer will partially (only `config` and `repositories` keys) "
"merge this configuration with your project's `composer.json` when you run "
"the `install` and `update` commands."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1163
#, markdown-text
msgid ""
"This file allows you to set [repositories](05-repositories.md) and "
"[configuration](06-config.md) for the user's projects."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1166
#, markdown-text
msgid ""
"In case global configuration matches _local_ configuration, the _local_ "
"configuration in the project's `composer.json` always wins."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1167
#, markdown-text, no-wrap
msgid "COMPOSER_HTACCESS_PROTECT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1171
#, markdown-text
msgid ""
"Defaults to `1`. If set to `0`, Composer will not create `.htaccess` files "
"in the Composer home, cache, and data directories."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1172
#, markdown-text, no-wrap
msgid "COMPOSER_MEMORY_LIMIT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1175
#, markdown-text
msgid "If set, the value is used as php's memory_limit."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1176
#, markdown-text, no-wrap
msgid "COMPOSER_MIRROR_PATH_REPOS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1181
#, markdown-text
msgid ""
"If set to 1, this env changes the default path repository strategy to "
"`mirror` instead of `symlink`. As it is the default strategy being set it "
"can still be overwritten by repository options."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1182
#, markdown-text, no-wrap
msgid "COMPOSER_NO_INTERACTION"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1186
#, markdown-text
msgid ""
"If set to 1, this env var will make Composer behave as if you passed the "
"`--no-interaction` flag to every command. This can be set on build boxes/CI."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1187
#, markdown-text, no-wrap
msgid "COMPOSER_PROCESS_TIMEOUT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1191
#, markdown-text
msgid ""
"This env var controls the time Composer waits for commands (such as git "
"commands) to finish executing. The default value is 300 seconds (5 minutes)."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1192
#, markdown-text, no-wrap
msgid "COMPOSER_ROOT_VERSION"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1196
#, markdown-text
msgid ""
"By setting this var you can specify the version of the root package, if it "
"cannot be guessed from VCS info and is not present in `composer.json`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1197
#, markdown-text, no-wrap
msgid "COMPOSER_VENDOR_DIR"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1201
#, markdown-text
msgid ""
"By setting this var you can make Composer install the dependencies into a "
"directory other than `vendor`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1202
#, markdown-text, no-wrap
msgid "COMPOSER_RUNTIME_ENV"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1210
#, markdown-text
msgid ""
"This lets you hint under which environment Composer is running, which can "
"help Composer work around some environment specific issues. The only value "
"currently supported is `virtualbox`, which then enables some short `sleep()` "
"calls to wait for the filesystem to have written files properly before we "
"attempt reading them. You can set the environment variable if you use "
"Vagrant or VirtualBox and experience issues with files not being found "
"during installation even though they should be present."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1211
#, markdown-text, no-wrap
msgid "http_proxy or HTTP_PROXY"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1216
#, markdown-text
msgid ""
"If you are using Composer from behind an HTTP proxy, you can use the "
"standard `http_proxy` or `HTTP_PROXY` env vars. Set it to the URL of your "
"proxy.  Many operating systems already set this variable for you."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1221
#, markdown-text, no-wrap
msgid ""
"Using `http_proxy` (lowercased) or even defining both might be preferable "
"since\n"
"some tools like git or curl will only use the lower-cased `http_proxy` "
"version.\n"
"Alternatively you can also define the git proxy using\n"
"`git config --global http.proxy <proxy url>`.\n"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1226
#, markdown-text
msgid ""
"If you are using Composer in a non-CLI context (i.e. integration into a CMS "
"or similar use case), and need to support proxies, please provide the "
"`CGI_HTTP_PROXY` environment variable instead. See "
"[httpoxy.org](https://httpoxy.org/) for further details."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1227
#, markdown-text, no-wrap
msgid "COMPOSER_MAX_PARALLEL_HTTP"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1233
#, markdown-text
msgid ""
"Set to an integer to configure how many files can be downloaded in "
"parallel. This defaults to 12 and must be between 1 and 50. If your proxy "
"has issues with concurrency maybe you want to lower this. Increasing it "
"should generally not result in performance gains."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1234
#, markdown-text, no-wrap
msgid "HTTP_PROXY_REQUEST_FULLURI"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1239
#, markdown-text
msgid ""
"If you use a proxy, but it does not support the request_fulluri flag, then "
"you should set this env var to `false` or `0` to prevent Composer from "
"setting the request_fulluri option."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1240
#, markdown-text, no-wrap
msgid "HTTPS_PROXY_REQUEST_FULLURI"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1245
#, markdown-text
msgid ""
"If you use a proxy, but it does not support the request_fulluri flag for "
"HTTPS requests, then you should set this env var to `false` or `0` to "
"prevent Composer from setting the request_fulluri option."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1246
#, markdown-text, no-wrap
msgid "COMPOSER_SELF_UPDATE_TARGET"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1249
#, markdown-text
msgid ""
"If set, makes the self-update command write the new Composer phar file into "
"that path instead of overwriting itself. Useful for updating Composer on a "
"read-only filesystem."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1250
#, markdown-text, no-wrap
msgid "no_proxy or NO_PROXY"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1255
#, markdown-text
msgid ""
"If you are behind a proxy and would like to disable it for certain domains, "
"you can use the `no_proxy` or `NO_PROXY` env var. Set it to a comma "
"separated list of domains the proxy should *not* be used for."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1259
#, markdown-text
msgid ""
"The env var accepts domains, IP addresses, and IP address blocks in CIDR "
"notation. You can restrict the filter to a particular port (e.g. `:80`). You "
"can also set it to `*` to ignore the proxy for all HTTP requests."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1260
#, markdown-text, no-wrap
msgid "COMPOSER_DISABLE_NETWORK"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1264
#, markdown-text
msgid ""
"If set to `1`, disables network access (best effort). This can be used for "
"debugging or to run Composer on a plane or a starship with poor "
"connectivity."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1267
#, markdown-text
msgid ""
"If set to `prime`, GitHub VCS repositories will prime the cache, so it can "
"then be used fully offline with `1`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1268
#, markdown-text, no-wrap
msgid "COMPOSER_DEBUG_EVENTS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1272
#, markdown-text
msgid ""
"If set to `1`, outputs information about events being dispatched, which can "
"be useful for plugin authors to identify what is firing when exactly."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1273
#, markdown-text, no-wrap
msgid "COMPOSER_NO_AUDIT"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1276
#, markdown-text
msgid ""
"If set to `1`, it is the equivalent of passing the `--no-audit` option to "
"`require`, `update`, `remove` or `create-project` command."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1277
#, markdown-text, no-wrap
msgid "COMPOSER_NO_DEV"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1281
#, markdown-text
msgid ""
"If set to `1`, it is the equivalent of passing the `--no-dev` option to "
"`install` or `update`. You can override this for a single command by setting "
"`COMPOSER_NO_DEV=0`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1282
#, markdown-text, no-wrap
msgid "COMPOSER_PREFER_STABLE"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1286
#, markdown-text
msgid ""
"If set to `1`, it is the equivalent of passing the `--prefer-stable` option "
"to `update` or `require`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1287
#, markdown-text, no-wrap
msgid "COMPOSER_PREFER_LOWEST"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1291
#, markdown-text
msgid ""
"If set to `1`, it is the equivalent of passing the `--prefer-lowest` option "
"to `update` or `require`."
msgstr ""

#. type: Title ###
#: ../doc/03-cli.md:1292
#, markdown-text, no-wrap
msgid "COMPOSER_IGNORE_PLATFORM_REQ or COMPOSER_IGNORE_PLATFORM_REQS"
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1296
#, markdown-text
msgid ""
"If `COMPOSER_IGNORE_PLATFORM_REQS` set to `1`, it is the equivalent of "
"passing the `--ignore-platform-reqs` argument.  Otherwise, specifying a "
"comma separated list in `COMPOSER_IGNORE_PLATFORM_REQ` will ignore those "
"specific requirements."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1298
#, markdown-text
msgid ""
"For example, if a development workstation will never run database queries, "
"this can be used to ignore the requirement for the database extensions to be "
"available. If you set `COMPOSER_IGNORE_PLATFORM_REQ=ext-oci8`, then composer "
"will allow packages to be installed even if the `oci8` PHP extension is not "
"enabled."
msgstr ""

#. type: Plain text
#: ../doc/03-cli.md:1299
#, markdown-text
msgid "&larr; [Libraries](02-libraries.md)  | [Schema](04-schema.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/04-schema.md:1
#, markdown-text, no-wrap
msgid "The composer.json schema"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:4
#, markdown-text
msgid "This chapter will explain all of the fields available in `composer.json`."
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:5
#, markdown-text, no-wrap
msgid "JSON schema"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:10
#, markdown-text
msgid ""
"We have a [JSON schema](https://json-schema.org) that documents the format "
"and can also be used to validate your `composer.json`. In fact, it is used "
"by the `validate` command. You can find it at: "
"https://getcomposer.org/schema.json"
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:11
#, markdown-text, no-wrap
msgid "Root Package"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:16
#, markdown-text
msgid ""
"The root package is the package defined by the `composer.json` at the root "
"of your project. It is the main `composer.json` that defines your project "
"requirements."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:21
#, markdown-text
msgid ""
"Certain fields only apply when in the root package context. One example of "
"this is the `config` field. Only the root package can define configuration.  "
"The config of dependencies is ignored. This makes the `config` field "
"`root-only`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:26
#, markdown-text, no-wrap
msgid ""
"> **Note:** A package can be the root package or not, depending on the "
"context.\n"
"> For example, if your project depends on the `monolog` library, your "
"project\n"
"> is the root package. However, if you clone `monolog` from GitHub in order "
"to\n"
"> fix a bug in it, then `monolog` is the root package.\n"
msgstr ""

#. type: Title ##
#: ../doc/04-schema.md:27
#, markdown-text, no-wrap
msgid "Properties"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:29 ../doc/05-repositories.md:105
#, markdown-text, no-wrap
msgid "name"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:33
#, markdown-text
msgid ""
"The name of the package. It consists of vendor name and project name, "
"separated by `/`. Examples:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:36
#, markdown-text
msgid "monolog/monolog"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:36
#, markdown-text
msgid "igorw/event-source"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:39
#, markdown-text
msgid ""
"The name must be lowercase and consist of words separated by `-`, `.` or "
"`_`.  The complete name should match "
"`^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:41
#, markdown-text
msgid "The `name` property is required for published packages (libraries)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:43
#, markdown-text, no-wrap
msgid ""
"> **Note:** Before Composer version 2.0, a name could contain any character, "
"including white spaces.\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:44
#, markdown-text, no-wrap
msgid "description"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:47
#, markdown-text
msgid "A short description of the package. Usually this is one line long."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:49
#, markdown-text
msgid "Required for published packages (libraries)."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:50 ../doc/05-repositories.md:105
#, markdown-text, no-wrap
msgid "version"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:54
#, markdown-text
msgid ""
"The version of the package. In most cases this is not required and should be "
"omitted (see below)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:58
#, markdown-text
msgid ""
"This must follow the format of `X.Y.Z` or `vX.Y.Z` with an optional suffix "
"of `-dev`, `-patch` (`-p`), `-alpha` (`-a`), `-beta` (`-b`) or `-RC`.  The "
"patch, alpha, beta and RC suffixes can also be followed by a number."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:60 ../doc/04-schema.md:115 ../doc/04-schema.md:958
#, markdown-text
msgid "Examples:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.2"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.1.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "0.2.5"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.0-dev"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.0-alpha3"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.0-beta2"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "1.0.0-RC5"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:70
#, markdown-text
msgid "v2.0.4-p1"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:74
#, markdown-text
msgid ""
"Optional if the package repository can infer the version from somewhere, "
"such as the VCS tag name in the VCS repository. In that case it is also "
"recommended to omit it."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:78
#, markdown-text, no-wrap
msgid ""
"> **Note:** Packagist uses VCS repositories, so the statement above is "
"very\n"
"> much true for Packagist as well. Specifying the version yourself will\n"
"> most likely end up creating problems at some point due to human error.\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:79
#, markdown-text, no-wrap
msgid "type"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:82
#, markdown-text
msgid "The type of the package. It defaults to `library`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:88
#, markdown-text
msgid ""
"Package types are used for custom installation logic. If you have a package "
"that needs some special logic, you can define a custom type. This could be a "
"`symfony-bundle`, a `wordpress-plugin` or a `typo3-cms-extension`. These "
"types will all be specific to certain projects, and they will need to "
"provide an installer capable of installing packages of that type."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:90
#, markdown-text
msgid "Out of the box, Composer supports four types:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:105
#, markdown-text
msgid "**library:** This is the default. It will copy the files to `vendor`."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:105
#, markdown-text
msgid ""
"**project:** This denotes a project rather than a library. For example "
"application shells like the [Symfony standard "
"edition](https://github.com/symfony/symfony-standard), CMSs like the "
"[SilverStripe "
"installer](https://github.com/silverstripe/silverstripe-installer)  or full "
"fledged applications distributed as packages. This can for example be used "
"by IDEs to provide listings of projects to initialize when creating a new "
"workspace."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:105
#, markdown-text
msgid ""
"**metapackage:** An empty package that contains requirements and will "
"trigger their installation, but contains no files and will not write "
"anything to the filesystem. As such, it does not require a dist or source "
"key to be installable."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:105
#, markdown-text
msgid ""
"**composer-plugin:** A package of type `composer-plugin` may provide an "
"installer for other packages that have a custom type. Read more in the "
"[dedicated article](articles/custom-installers.md)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:108
#, markdown-text
msgid ""
"Only use a custom type if you need custom logic during installation. It is "
"recommended to omit this field and have it default to `library`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:109
#, markdown-text, no-wrap
msgid "keywords"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:113
#, markdown-text
msgid ""
"An array of keywords that the package is related to. These can be used for "
"searching and filtering."
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:121
#, markdown-text
msgid "logging"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:121
#, markdown-text
msgid "events"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:121
#, markdown-text
msgid "database"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:121
#, markdown-text
msgid "redis"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:121
#, markdown-text
msgid "templating"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:125
#, markdown-text, no-wrap
msgid ""
"> **Note**: Some special keywords trigger `composer require` without the\n"
"> `--dev` option to prompt users if they would like to add these packages "
"to\n"
"> `require-dev` instead of `require`. These are: `dev`, `testing`, `static "
"analysis`.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:127 ../doc/04-schema.md:133 ../doc/04-schema.md:139
#: ../doc/04-schema.md:147 ../doc/04-schema.md:264 ../doc/04-schema.md:297
#: ../doc/04-schema.md:732 ../doc/04-schema.md:763 ../doc/04-schema.md:899
#: ../doc/04-schema.md:908 ../doc/04-schema.md:950 ../doc/04-schema.md:966
#: ../doc/04-schema.md:1001
#, markdown-text
msgid "Optional."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:128
#, markdown-text, no-wrap
msgid "homepage"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:131
#, markdown-text
msgid "A URL to the website of the project."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:134
#, markdown-text, no-wrap
msgid "readme"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:137
#, markdown-text
msgid "A relative path to the readme document."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:140
#, markdown-text, no-wrap
msgid "time"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:143
#, markdown-text
msgid "Release date of the version."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:145
#, markdown-text
msgid "Must be in `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS` format."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:148
#, markdown-text, no-wrap
msgid "license"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:151
#, markdown-text
msgid ""
"The license of the package. This can be either a string or an array of "
"strings."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:153
#, markdown-text
msgid "The recommended notation for the most common licenses is (alphabetical):"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "Apache-2.0"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "BSD-2-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "BSD-3-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "BSD-4-Clause"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "GPL-2.0-only / GPL-2.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "GPL-3.0-only / GPL-3.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "LGPL-2.1-only / LGPL-2.1-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "LGPL-3.0-only / LGPL-3.0-or-later"
msgstr ""

#. type: Bullet: '- '
#: ../doc/04-schema.md:163
#, markdown-text
msgid "MIT"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:166
#, markdown-text
msgid ""
"Optional, but it is highly recommended to supply this. More identifiers are "
"listed at the [SPDX Open Source License "
"Registry](https://spdx.org/licenses/)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:168
#, markdown-text, no-wrap
msgid ""
"> **Note:** For closed-source software, you may use `\"proprietary\"` as the "
"license identifier.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:170
#, markdown-text
msgid "An Example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:171
#, no-wrap
msgid ""
"{\n"
"    \"license\": \"MIT\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:179
#, markdown-text
msgid ""
"For a package, when there is a choice between licenses (\"disjunctive "
"license\"), multiple can be specified as an array."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:181
#, markdown-text
msgid "An Example for disjunctive licenses:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:182
#, no-wrap
msgid ""
"{\n"
"    \"license\": [\n"
"        \"LGPL-2.1-only\",\n"
"        \"GPL-3.0-or-later\"\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:192
#, markdown-text
msgid "Alternatively they can be separated with \"or\" and enclosed in parentheses;"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:193
#, no-wrap
msgid ""
"{\n"
"    \"license\": \"(LGPL-2.1-only or GPL-3.0-or-later)\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:201
#, markdown-text
msgid ""
"Similarly, when multiple licenses need to be applied (\"conjunctive "
"license\"), they should be separated with \"and\" and enclosed in "
"parentheses."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:202
#, markdown-text, no-wrap
msgid "authors"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:205
#, markdown-text
msgid "The authors of the package. This is an array of objects."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:207
#, markdown-text
msgid "Each author object can have following properties:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:212
#, markdown-text
msgid "**name:** The author's name. Usually their real name."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:212
#, markdown-text
msgid "**email:** The author's email address."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:212
#, markdown-text
msgid "**homepage:** URL to the author's website."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:212
#, markdown-text
msgid "**role:** The author's role in the project (e.g. developer or translator)"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:214 ../doc/04-schema.md:253 ../doc/04-schema.md:276
#: ../doc/04-schema.md:986 ../doc/05-repositories.md:165
#: ../doc/05-repositories.md:262
#, markdown-text
msgid "An example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:215
#, no-wrap
msgid ""
"{\n"
"    \"authors\": [\n"
"        {\n"
"            \"name\": \"Nils Adermann\",\n"
"            \"email\": \"naderman@naderman.de\",\n"
"            \"homepage\": \"https://www.naderman.de\",\n"
"            \"role\": \"Developer\"\n"
"        },\n"
"        {\n"
"            \"name\": \"Jordi Boggiano\",\n"
"            \"email\": \"j.boggiano@seld.be\",\n"
"            \"homepage\": \"https://seld.be\",\n"
"            \"role\": \"Developer\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:235
#, markdown-text
msgid "Optional, but highly recommended."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:236
#, markdown-text, no-wrap
msgid "support"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:239
#, markdown-text
msgid "Various information to get support about the project."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:241
#, markdown-text
msgid "Support information includes the following:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**email:** Email address for support."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**issues:** URL to the issue tracker."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**forum:** URL to the forum."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**wiki:** URL to the wiki."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**irc:** IRC channel for support, as irc://server/channel."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**source:** URL to browse or download the sources."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**docs:** URL to the documentation."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**rss:** URL to the RSS feed."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:251
#, markdown-text
msgid "**chat:** URL to the chat channel."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:254
#, no-wrap
msgid ""
"{\n"
"    \"support\": {\n"
"        \"email\": \"support@example.org\",\n"
"        \"irc\": \"irc://irc.freenode.org/composer\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:265
#, markdown-text, no-wrap
msgid "funding"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:269
#, markdown-text
msgid ""
"A list of URLs to provide funding to the package authors for maintenance and "
"development of new functionality."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:271
#, markdown-text
msgid "Each entry consists of the following"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:274
#, markdown-text
msgid ""
"**type:** The type of funding, or the platform through which funding can be "
"provided, e.g. patreon, opencollective, tidelift or github."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:274
#, markdown-text
msgid "**url:** URL to a website with details, and a way to fund the package."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:277
#, no-wrap
msgid ""
"{\n"
"    \"funding\": [\n"
"        {\n"
"            \"type\": \"patreon\",\n"
"            \"url\": \"https://www.patreon.com/phpdoctrine\"\n"
"        },\n"
"        {\n"
"            \"type\": \"tidelift\",\n"
"            \"url\": "
"\"https://tidelift.com/subscription/pkg/packagist-doctrine_doctrine-bundle\"\n"
"        },\n"
"        {\n"
"            \"type\": \"other\",\n"
"            \"url\": \"https://www.doctrine-project.org/sponsorship.html\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:298
#, markdown-text, no-wrap
msgid "Package links"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:303
#, markdown-text
msgid ""
"All of the following take an object which maps package names to versions of "
"the package via version constraints. Read more about versions "
"[here](articles/versions.md)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:305 ../doc/04-schema.md:324 ../doc/04-schema.md:338
#: ../doc/04-schema.md:360 ../doc/04-schema.md:385 ../doc/04-schema.md:472
#: ../doc/04-schema.md:509 ../doc/04-schema.md:556 ../doc/04-schema.md:616
#: ../doc/04-schema.md:628 ../doc/04-schema.md:644 ../doc/04-schema.md:675
#: ../doc/04-schema.md:703 ../doc/04-schema.md:724 ../doc/04-schema.md:815
#: ../doc/04-schema.md:920 ../doc/04-schema.md:937
#, markdown-text
msgid "Example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:306
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:315
#, markdown-text
msgid "All links are optional fields."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:322
#, markdown-text
msgid ""
"`require` and `require-dev` additionally support _stability flags_ "
"([root-only](04-schema.md#root-package)).  They take the form "
"\"_constraint_@_stability flag_\".  These allow you to further restrict or "
"expand the stability of a package beyond the scope of the "
"[minimum-stability](#minimum-stability) setting. You can apply them to a "
"constraint, or apply them to an empty _constraint_ if you want to allow "
"unstable packages of a dependency for example."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:325
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"1.0.*@beta\",\n"
"        \"acme/foo\": \"@dev\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:336
#, markdown-text
msgid ""
"If one of your dependencies has a dependency on an unstable package you need "
"to explicitly require it as well, along with its sufficient stability flag."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:342
#, markdown-text
msgid ""
"Assuming `doctrine/doctrine-fixtures-bundle` requires "
"`\"doctrine/data-fixtures\": \"dev-master\"` then inside the root "
"composer.json you need to add the second line below to allow dev releases "
"for the `doctrine/data-fixtures` package :"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:343
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"doctrine/doctrine-fixtures-bundle\": \"dev-master\",\n"
"        \"doctrine/data-fixtures\": \"@dev\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:358
#, markdown-text, no-wrap
msgid ""
"`require` and `require-dev` additionally support explicit references (i.e.\n"
"commit) for dev versions to make sure they are locked to a given state, "
"even\n"
"when you run update. These only work if you explicitly require a dev "
"version\n"
"and append the reference with `#<ref>`. This is also a\n"
"[root-only](04-schema.md#root-package) feature and will be ignored in\n"
"dependencies.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:361
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": "
"\"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\",\n"
"        \"acme/foo\": \"1.0.x-dev#abc123\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:376
#, markdown-text, no-wrap
msgid ""
"> **Note:** This feature has severe technical limitations, as the\n"
"> composer.json metadata will still be read from the branch name you "
"specify\n"
"> before the hash. You should therefore only use this as a temporary "
"solution\n"
"> during development to remediate transient issues, until you can switch "
"to\n"
"> tagged releases. The Composer team does not actively support this "
"feature\n"
"> and will not accept bug reports related to it.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:380
#, markdown-text
msgid ""
"It is also possible to inline-alias a package constraint so that it matches "
"a constraint that it otherwise would not. For more information [see the "
"aliases article](articles/aliases.md)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:383
#, markdown-text
msgid ""
"`require` and `require-dev` also support references to specific PHP versions "
"and PHP extensions your project needs to run successfully."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:386
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"php\": \">=7.4\",\n"
"        \"ext-mbstring\": \"*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:405
#, markdown-text, no-wrap
msgid ""
"> **Note:** It is important to list PHP extensions your project requires.\n"
"> Not all PHP installations are created equal: some may miss extensions "
"you\n"
"> may consider as standard (such as `ext-mysqli` which is not installed by\n"
"> default in Fedora/CentOS minimal installation systems). Failure to list\n"
"> required PHP extensions may lead to a bad user experience: Composer will\n"
"> install your package without any errors but it will then fail at "
"run-time.\n"
"> The `composer show --platform` command lists all PHP extensions available "
"on\n"
"> your system. You may use it to help you compile the list of extensions "
"you\n"
"> use and require. Alternatively you may use third party tools to analyze\n"
"> your project for the list of extensions used.\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:406
#, markdown-text, no-wrap
msgid "require"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:410
#, markdown-text
msgid ""
"Map of packages required by this package. The package will not be installed "
"unless those requirements can be met."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:411
#, markdown-text, no-wrap
msgid "require-dev <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:417
#, markdown-text
msgid ""
"Map of packages required for developing this package, or running tests, "
"etc. The dev requirements of the root package are installed by default.  "
"Both `install` or `update` support the `--no-dev` option that prevents dev "
"dependencies from being installed."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:418
#, markdown-text, no-wrap
msgid "conflict"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:422
#, markdown-text
msgid ""
"Map of packages that conflict with this version of this package. They will "
"not be allowed to be installed together with your package."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:427
#, markdown-text, no-wrap
msgid ""
"Note that when specifying ranges like `<1.0 >=1.1` in a `conflict` link,\n"
"this will state a conflict with all versions that are less than 1.0 *and* "
"equal\n"
"or newer than 1.1 at the same time, which is probably not what you "
"want. You\n"
"probably want to go for `<1.0 || >=1.1` in this case.\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:428
#, markdown-text, no-wrap
msgid "replace"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:434
#, markdown-text
msgid ""
"Map of packages that are replaced by this package. This allows you to fork a "
"package, publish it under a different name with its own version numbers, "
"while packages requiring the original package continue to work with your "
"fork because it replaces the original package."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:440
#, markdown-text
msgid ""
"This is also useful for packages that contain sub-packages, for example the "
"main symfony/symfony package contains all the Symfony Components which are "
"also available as individual packages. If you require the main package it "
"will automatically fulfill any requirement of one of the individual "
"components, since it replaces them."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:445
#, markdown-text
msgid ""
"Caution is advised when using replace for the sub-package purpose explained "
"above. You should then typically only replace using `self.version` as a "
"version constraint, to make sure the main package only replaces the "
"sub-packages of that exact version, and not any other version, which would "
"be incorrect."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:446
#, markdown-text, no-wrap
msgid "provide"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:453
#, markdown-text
msgid ""
"Map of packages that are provided by this package. This is mostly useful for "
"implementations of common interfaces. A package could depend on some virtual "
"package e.g. `psr/logger-implementation`, any library that implements this "
"logger interface would list it in `provide`. Implementors can then be [found "
"on Packagist.org](https://packagist.org/providers/psr/log-implementation)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:460
#, markdown-text
msgid ""
"Using `provide` with the name of an actual package rather than a virtual one "
"implies that the code of that package is also shipped, in which case "
"`replace` is generally a better choice. A common convention for packages "
"providing an interface and relying on other packages to provide an "
"implementation (for instance the PSR interfaces) is to use a "
"`-implementation` suffix for the name of the virtual package corresponding "
"to the interface package."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:461
#, markdown-text, no-wrap
msgid "suggest"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:467
#, markdown-text
msgid ""
"Suggested packages that can enhance or work well with this package. These "
"are informational and are displayed after the package is installed, to give "
"your users a hint that they could add more packages, even though they are "
"not strictly required."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:470
#, markdown-text
msgid ""
"The format is like package links above, except that the values are free text "
"and not version constraints."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:473
#, no-wrap
msgid ""
"{\n"
"    \"suggest\": {\n"
"        \"monolog/monolog\": \"Allows more advanced logging of the "
"application flow\",\n"
"        \"ext-xml\": \"Needed to support XML format in class Foo\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:482
#, markdown-text, no-wrap
msgid "autoload"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:485
#, markdown-text
msgid "Autoload mapping for a PHP autoloader."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:488
#, markdown-text
msgid ""
"[`PSR-4`](https://www.php-fig.org/psr/psr-4/) and "
"[`PSR-0`](http://www.php-fig.org/psr/psr-0/)  autoloading, `classmap` "
"generation and `files` includes are supported."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:491
#, markdown-text
msgid ""
"PSR-4 is the recommended way since it offers greater ease of use (no need to "
"regenerate the autoloader when you add classes)."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:492
#, markdown-text, no-wrap
msgid "PSR-4"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:499
#, markdown-text
msgid ""
"Under the `psr-4` key you define a mapping from namespaces to paths, "
"relative to the package root. When autoloading a class like "
"`Foo\\\\Bar\\\\Baz` a namespace prefix `Foo\\\\` pointing to a directory "
"`src/` means that the autoloader will look for a file named "
"`src/Bar/Baz.php` and include it if present. Note that as opposed to the "
"older PSR-0 style, the prefix (`Foo\\\\`) is **not** present in the file "
"path."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:503
#, markdown-text
msgid ""
"Namespace prefixes must end in `\\\\` to avoid conflicts between similar "
"prefixes.  For example `Foo` would match classes in the `FooBar` namespace "
"so the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` "
"are distinct."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:507
#, markdown-text, no-wrap
msgid ""
"The PSR-4 references are all combined, during install/update, into a "
"single\n"
"key => value array which may be found in the generated file\n"
"`vendor/composer/autoload_psr4.php`.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:510
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": {\n"
"            \"Monolog\\\\\": \"src/\",\n"
"            \"Vendor\\\\Namespace\\\\\": \"\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:523 ../doc/04-schema.md:571
#, markdown-text
msgid ""
"If you need to search for a same prefix in multiple directories, you can "
"specify them as an array as such:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:524
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:534
#, markdown-text
msgid ""
"If you want to have a fallback directory where any namespace will be looked "
"for, you can use an empty prefix like:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:535
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"\": \"src/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:543
#, markdown-text, no-wrap
msgid "PSR-0"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:547
#, markdown-text
msgid ""
"Under the `psr-0` key you define a mapping from namespaces to paths, "
"relative to the package root. Note that this also supports the PEAR-style "
"non-namespaced convention."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:551
#, markdown-text
msgid ""
"Please note namespace declarations should end in `\\\\` to make sure the "
"autoloader responds exactly. For example `Foo` would match in `FooBar` so "
"the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` are "
"distinct."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:554
#, markdown-text, no-wrap
msgid ""
"The PSR-0 references are all combined, during install/update, into a single "
"key => value\n"
"array which may be found in the generated file "
"`vendor/composer/autoload_namespaces.php`.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:557
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": {\n"
"            \"Monolog\\\\\": \"src/\",\n"
"            \"Vendor\\\\Namespace\\\\\": \"src/\",\n"
"            \"Vendor_Namespace_\": \"src/\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:572
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:584
#, markdown-text
msgid ""
"The PSR-0 style is not limited to namespace declarations only but may be "
"specified right down to the class level. This can be useful for libraries "
"with only one class in the global namespace. If the php source file is also "
"located in the root of the package, for example, it may be declared like "
"this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:585
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"UniqueGlobalClass\": \"\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:595
#, markdown-text
msgid ""
"If you want to have a fallback directory where any namespace can be, you can "
"use an empty prefix like:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:596
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"\": \"src/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:604
#, markdown-text, no-wrap
msgid "Classmap"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:610
#, markdown-text, no-wrap
msgid ""
"The `classmap` references are all combined, during install/update, into a "
"single\n"
"key => value array which may be found in the generated file\n"
"`vendor/composer/autoload_classmap.php`. This map is built by scanning for\n"
"classes in all `.php` and `.inc` files in the given directories/files.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:614
#, markdown-text
msgid ""
"You can use the classmap generation support to define autoloading for all "
"libraries that do not follow PSR-0/4. To configure this you specify all "
"directories or files to search for classes."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:617
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:626
#, markdown-text
msgid ""
"Wildcards (`*`) are also supported in a classmap paths, and expand to match "
"any directory name:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:629
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"classmap\": [\"src/addons/*/lib/\", \"3rd-party/*\", "
"\"Something.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:637
#, markdown-text, no-wrap
msgid "Files"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:642
#, markdown-text
msgid ""
"If you want to require certain files explicitly on every request then you "
"can use the `files` autoloading mechanism. This is useful if your package "
"includes PHP functions that cannot be autoloaded by PHP."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:645
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"files\": [\"src/MyLibrary/functions.php\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:657
#, markdown-text
msgid ""
"Files autoload rules are included whenever `vendor/autoload.php` is "
"included, right after the autoloader is registered. The order of inclusion "
"depends on package dependencies so that if package A depends on B, files in "
"package B will be included first to ensure package B is fully initialized "
"and ready to be used when files from package A are included."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:659
#, markdown-text
msgid ""
"If two packages have the same amount of dependents or no dependencies, the "
"order is alphabetical."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:663
#, markdown-text
msgid ""
"Files from the root package are always loaded last, and you cannot use files "
"autoloading yourself to override functions from your dependencies. If you "
"want to achieve that we recommend you include your own functions *before* "
"including Composer's `vendor/autoload.php`."
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:664
#, markdown-text, no-wrap
msgid "Exclude files from classmaps"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:669
#, markdown-text
msgid ""
"If you want to exclude some files or folders from the classmap you can use "
"the `exclude-from-classmap` property.  This might be useful to exclude test "
"classes in your live environment, for example, as those will be skipped from "
"the classmap even when building an optimized autoloader."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:673
#, markdown-text
msgid ""
"The classmap generator will ignore all files in the paths configured "
"here. The paths are absolute from the package root directory "
"(i.e. composer.json location), and support `*` to match anything but a "
"slash, and `**` to match anything. `**` is implicitly added to the end of "
"the paths."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:676
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"exclude-from-classmap\": [\"/Tests/\", \"/test/\", \"/tests/\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/04-schema.md:684
#, markdown-text, no-wrap
msgid "Optimizing the autoloader"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:690
#, markdown-text
msgid ""
"The autoloader can have quite a substantial impact on your request time "
"(50-100ms per request in large frameworks using a lot of classes). See the "
"[article about optimizing the "
"autoloader](articles/autoloader-optimization.md)  for more details on how to "
"reduce this impact."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:691
#, markdown-text, no-wrap
msgid "autoload-dev <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:694
#, markdown-text
msgid "This section allows defining autoload rules for development purposes."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:698
#, markdown-text
msgid ""
"Classes needed to run the test suite should not be included in the main "
"autoload rules to avoid polluting the autoloader in production and when "
"other people use your package as a dependency."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:701
#, markdown-text
msgid ""
"Therefore, it is a good idea to rely on a dedicated path for your unit tests "
"and to add it within the autoload-dev section."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:704
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": { \"MyLibrary\\\\\": \"src/\" }\n"
"    },\n"
"    \"autoload-dev\": {\n"
"        \"psr-4\": { \"MyLibrary\\\\Tests\\\\\": \"tests/\" }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:715
#, markdown-text, no-wrap
msgid "include-path"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:720
#, markdown-text, no-wrap
msgid ""
"> **DEPRECATED**: This is only present to support legacy projects, and all "
"new code\n"
"> should preferably use autoloading. As such it is a deprecated practice, "
"but the\n"
"> feature itself will not likely disappear from Composer.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:722
#, markdown-text
msgid "A list of paths which should get appended to PHP's `include_path`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:725
#, no-wrap
msgid ""
"{\n"
"    \"include-path\": [\"lib/\"]\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:733
#, markdown-text, no-wrap
msgid "target-dir"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:738
#, markdown-text, no-wrap
msgid ""
"> **DEPRECATED**: This is only present to support legacy PSR-0 style "
"autoloading,\n"
"> and all new code should preferably use PSR-4 without target-dir and "
"projects\n"
"> using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 "
"instead.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:740
#, markdown-text
msgid "Defines the installation target."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:743
#, markdown-text
msgid ""
"In case the package root is below the namespace declaration you cannot "
"autoload properly. `target-dir` solves this problem."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:750
#, markdown-text
msgid ""
"An example is Symfony. There are individual packages for the components. The "
"Yaml component is under `Symfony\\Component\\Yaml`. The package root is that "
"`Yaml` directory. To make autoloading possible, we need to make sure that it "
"is not installed into `vendor/symfony/yaml`, but instead into "
"`vendor/symfony/yaml/Symfony/Component/Yaml`, so that the autoloader can "
"load it from `vendor/symfony/yaml`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:752
#, markdown-text
msgid "To do that, `autoload` and `target-dir` are defined as follows:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:753
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" }\n"
"    },\n"
"    \"target-dir\": \"Symfony/Component/Yaml\"\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:764
#, markdown-text, no-wrap
msgid "minimum-stability <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:769
#, markdown-text
msgid ""
"This defines the default behavior for filtering packages by stability. This "
"defaults to `stable`, so if you rely on a `dev` package, you should specify "
"it in your file to avoid surprises."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:775
#, markdown-text
msgid ""
"All versions of each package are checked for stability, and those that are "
"less stable than the `minimum-stability` setting will be ignored when "
"resolving your project dependencies. (Note that you can also specify "
"stability requirements on a per-package basis using stability flags in the "
"version constraints that you specify in a `require` block (see [package "
"links](#package-links) for more details)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:778
#, markdown-text
msgid ""
"Available options (in order of stability) are `dev`, `alpha`, `beta`, `RC`, "
"and `stable`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:779
#, markdown-text, no-wrap
msgid "prefer-stable <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:785
#, markdown-text
msgid ""
"When this is enabled, Composer will prefer more stable packages over "
"unstable ones when finding compatible stable packages is possible. If you "
"require a dev version or only alphas are available for a package, those will "
"still be selected granted that the minimum-stability allows for it."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:787
#, markdown-text
msgid "Use `\"prefer-stable\": true` to enable."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:788
#, markdown-text, no-wrap
msgid "repositories <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:791
#, markdown-text
msgid "Custom package repositories to use."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:794
#, markdown-text
msgid ""
"By default Composer only uses the packagist repository. By specifying "
"repositories you can get packages from elsewhere."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:798
#, markdown-text
msgid ""
"Repositories are not resolved recursively. You can only add them to your "
"main `composer.json`. Repository declarations of dependencies' "
"`composer.json`s are ignored."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:800
#, markdown-text
msgid "The following repository types are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:811
#, markdown-text
msgid ""
"**composer:** A Composer repository is a `packages.json` file served via the "
"network (HTTP, FTP, SSH), that contains a list of `composer.json` objects "
"with additional `dist` and/or `source` information. The `packages.json` file "
"is loaded using a PHP stream. You can set extra options on that stream using "
"the `options` parameter."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:811
#, markdown-text
msgid ""
"**vcs:** The version control system repository can fetch packages from git, "
"svn, fossil and hg repositories."
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:811
#, markdown-text
msgid ""
"**package:** If you depend on a project that does not have any support for "
"Composer whatsoever you can define the package inline using a `package` "
"repository. You basically inline the `composer.json` object."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:813
#, markdown-text
msgid ""
"For more information on any of these, see "
"[Repositories](05-repositories.md)."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:816
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"http://packages.example.com\"\n"
"        },\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://packages.example.com\",\n"
"            \"options\": {\n"
"                \"ssl\": {\n"
"                    \"verify_peer\": \"true\"\n"
"                }\n"
"            }\n"
"        },\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/Seldaek/monolog\"\n"
"        },\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": {\n"
"                \"name\": \"smarty/smarty\",\n"
"                \"version\": \"3.1.7\",\n"
"                \"dist\": {\n"
"                    \"url\": "
"\"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"                    \"type\": \"zip\"\n"
"                },\n"
"                \"source\": {\n"
"                    \"url\": \"https://smarty-php.googlecode.com/svn/\",\n"
"                    \"type\": \"svn\",\n"
"                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n"
"                }\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:860
#, markdown-text, no-wrap
msgid ""
"> **Note:** Order is significant here. When looking for a package, "
"Composer\n"
"will look from the first to the last repository, and pick the first match.\n"
"By default Packagist is added last which means that custom repositories "
"can\n"
"override packages from it.\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:863
#, markdown-text
msgid ""
"Using JSON object notation is also possible. However, JSON key/value pairs "
"are to be considered unordered so consistent behaviour cannot be guaranteed."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:864
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": {\n"
"        \"foo\": {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"http://packages.foo.com\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:875
#, markdown-text, no-wrap
msgid "config <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:879
#, markdown-text
msgid ""
"A set of configuration options. It is only used for projects. See "
"[Config](06-config.md) for a description of each individual option."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:880
#, markdown-text, no-wrap
msgid "scripts <span>([root-only](04-schema.md#root-package))</span>"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:884
#, markdown-text
msgid ""
"Composer allows you to hook into various parts of the installation process "
"through the use of scripts."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:886
#, markdown-text
msgid "See [Scripts](articles/scripts.md) for events details and examples."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:887
#, markdown-text, no-wrap
msgid "extra"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:890
#, markdown-text
msgid "Arbitrary extra data for consumption by `scripts`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:893
#, markdown-text
msgid ""
"This can be virtually anything. To access it from within a script event "
"handler, you can do:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/04-schema.md:894
#, no-wrap
msgid "$extra = $event->getComposer()->getPackage()->getExtra();\n"
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:900
#, markdown-text, no-wrap
msgid "bin"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:904
#, markdown-text
msgid ""
"A set of files that should be treated as binaries and made available into "
"the `bin-dir` (from config)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:906
#, markdown-text
msgid "See [Vendor Binaries](articles/vendor-binaries.md) for more details."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:912
#, markdown-text
msgid "A set of options for creating package archives."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:914
#, markdown-text
msgid "The following options are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:918
#, markdown-text
msgid ""
"**name:** Allows configuring base name for archive.  By default (if not "
"configured, and `--file` is not passed as command-line argument), "
"`preg_replace('#[^a-z0-9-_]#i', '-', name)` is used."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:921
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"org/strangeName\",\n"
"    \"archive\": {\n"
"        \"name\": \"Strange_name\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Bullet: '* '
#: ../doc/04-schema.md:935
#, markdown-text
msgid ""
"**exclude:** Allows configuring a list of patterns for excluded paths. The "
"pattern syntax matches .gitignore files. A leading exclamation mark (!) will "
"result in any matching files to be included even if a previous pattern "
"excluded them. A leading slash will only match at the beginning of the "
"project relative path. An asterisk will not expand to a directory separator."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:938
#, no-wrap
msgid ""
"{\n"
"    \"archive\": {\n"
"        \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", "
"\"!/foo/bar/baz\"]\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:948
#, markdown-text
msgid ""
"The example will include `/dir/foo/bar/file`, `/foo/bar/baz`, `/file.php`, "
"`/foo/my.test` but it will exclude `/foo/bar/any`, `/foo/baz`, and "
"`/my.test`."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:951
#, markdown-text, no-wrap
msgid "abandoned"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:954
#, markdown-text
msgid "Indicates whether this package has been abandoned."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:956
#, markdown-text
msgid ""
"It can be boolean or a package name/URL pointing to a recommended "
"alternative."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:962
#, markdown-text
msgid ""
"Use `\"abandoned\": true` to indicate this package is abandoned.  Use "
"`\"abandoned\": \"monolog/monolog\"` to indicate this package is abandoned, "
"and that the recommended alternative is `monolog/monolog`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:964
#, markdown-text
msgid "Defaults to false."
msgstr ""

#. type: Title ###
#: ../doc/04-schema.md:967
#, markdown-text, no-wrap
msgid "non-feature-branches"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:971
#, markdown-text
msgid ""
"A list of regex patterns of branch names that are non-numeric "
"(e.g. \"latest\" or something), that will NOT be handled as feature "
"branches. This is an array of strings."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:977
#, markdown-text
msgid ""
"If you have non-numeric branch names, for example like \"latest\", "
"\"current\", \"latest-stable\" or something, that do not look like a version "
"number, then Composer handles such branches as feature branches. This means "
"it searches for parent branches, that look like a version or ends at special "
"branches (like master), and the root package version number becomes the "
"version of the parent branch or at least master or something."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:981
#, markdown-text
msgid ""
"To handle non-numeric named branches as versions instead of searching for a "
"parent branch with a valid version or special branch name like master, you "
"can set patterns for branch names that should be handled as dev version "
"branches."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:984
#, markdown-text
msgid ""
"This is really helpful when you have dependencies using \"self.version\", so "
"that not dev-master, but the same branch is installed (in the example: "
"latest-testing)."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:989
#, markdown-text
msgid ""
"If you have a testing branch, that is heavily maintained during a testing "
"phase and is deployed to your staging environment, normally `composer show "
"-s` will give you `versions : * dev-master`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:991
#, markdown-text
msgid ""
"If you configure `latest-.*` as a pattern for non-feature-branches like "
"this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/04-schema.md:992
#, no-wrap
msgid ""
"{\n"
"    \"non-feature-branches\": [\"latest-.*\"]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:999
#, markdown-text
msgid "Then `composer show -s` will give you `versions : * dev-latest-testing`."
msgstr ""

#. type: Plain text
#: ../doc/04-schema.md:1002
#, markdown-text
msgid ""
"&larr; [Command-line interface](03-cli.md)  | "
"[Repositories](05-repositories.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/05-repositories.md:1
#, markdown-text, no-wrap
msgid "Repositories"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:5
#, markdown-text
msgid ""
"This chapter will explain the concept of packages and repositories, what "
"kinds of repositories are available, and how they work."
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:6
#, markdown-text, no-wrap
msgid "Concepts"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:10
#, markdown-text
msgid ""
"Before we look at the different types of repositories that exist, we need to "
"understand some basic concepts that Composer is built on."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:11 ../doc/05-repositories.md:507
#, markdown-text, no-wrap
msgid "Package"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:18
#, markdown-text
msgid ""
"Composer is a dependency manager. It installs packages locally. A package is "
"essentially a directory containing something. In this case it is PHP code, "
"but in theory it could be anything. And it contains a package description "
"which has a name and a version. The name and the version are used to "
"identify the package."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:22
#, markdown-text
msgid ""
"In fact, internally Composer sees every version as a separate package. While "
"this distinction does not matter when you are using Composer, it's quite "
"important when you want to change it."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:27
#, markdown-text
msgid ""
"In addition to the name and the version, there is useful metadata. The "
"information most relevant for installation is the source definition, which "
"describes where to get the package contents. The package data points to the "
"contents of the package. And there are two options here: dist and source."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:30
#, markdown-text, no-wrap
msgid ""
"**Dist:** The dist is a packaged version of the package data. Usually a\n"
"released version, usually a stable release.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:34
#, markdown-text, no-wrap
msgid ""
"**Source:** The source is used for development. This will usually "
"originate\n"
"from a source code repository, such as git. You can fetch this when you "
"want\n"
"to modify the downloaded package.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:38
#, markdown-text
msgid ""
"Packages can supply either of these, or even both. Depending on certain "
"factors, such as user-supplied options and stability of the package, one "
"will be preferred."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:39
#, markdown-text, no-wrap
msgid "Repository"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:43
#, markdown-text
msgid ""
"A repository is a package source. It's a list of packages/versions. Composer "
"will look in all your repositories to find the packages your project "
"requires."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:46
#, markdown-text
msgid ""
"By default, only the Packagist.org repository is registered in Composer. You "
"can add more repositories to your project by declaring them in "
"`composer.json`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:51
#, markdown-text
msgid ""
"Repositories are only available to the root package and the repositories "
"defined in your dependencies will not be loaded. Read the [FAQ "
"entry](faqs/why-cant-composer-load-repositories-recursively.md) if you want "
"to learn why."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:57
#, markdown-text
msgid ""
"When resolving dependencies, packages are looked up from repositories from "
"top to bottom, and by default, as soon as a package is found in one, "
"Composer stops looking in other repositories. Read the [repository "
"priorities](articles/repository-priorities.md) article for more details and "
"to see how to change this behavior."
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:58
#, markdown-text, no-wrap
msgid "Types"
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:60
#, markdown-text, no-wrap
msgid "Composer"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:64
#, markdown-text
msgid ""
"The main repository type is the `composer` repository. It uses a single "
"`packages.json` file that contains all of the package metadata."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:70
#, markdown-text
msgid ""
"This is also the repository type that packagist uses. To reference a "
"`composer` repository, supply the path before the `packages.json` file.  In "
"the case of packagist, that file is located at `/packages.json`, so the URL "
"of the repository would be `repo.packagist.org`. For "
"`example.org/packages.json` the repository URL would be `example.org`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:71
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://example.org\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:82
#, markdown-text, no-wrap
msgid "packages"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:85
#, markdown-text
msgid "The only required field is `packages`. The JSON structure is as follows:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:86
#, no-wrap
msgid ""
"{\n"
"    \"packages\": {\n"
"        \"vendor/package-name\": {\n"
"            \"dev-master\": { @composer.json },\n"
"            \"1.0.x-dev\": { @composer.json },\n"
"            \"0.0.1\": { @composer.json },\n"
"            \"1.0.0\": { @composer.json }\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:101
#, markdown-text
msgid ""
"The `@composer.json` marker would be the contents of the `composer.json` "
"from that package version including as a minimum:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:105
#, markdown-text
msgid "dist or source"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:107
#, markdown-text
msgid "Here is a minimal package definition:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:108
#, no-wrap
msgid ""
"{\n"
"    \"name\": \"smarty/smarty\",\n"
"    \"version\": \"3.1.7\",\n"
"    \"dist\": {\n"
"        \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"        \"type\": \"zip\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:120
#, markdown-text
msgid ""
"It may include any of the other fields specified in the "
"[schema](04-schema.md)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:121
#, markdown-text, no-wrap
msgid "notify-batch"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:126
#, markdown-text
msgid ""
"The `notify-batch` field allows you to specify a URL that will be called "
"every time a user installs a package. The URL can be either an absolute path "
"(that will use the same domain as the repository), or a fully qualified URL."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:128
#, markdown-text
msgid "An example value:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:129
#, no-wrap
msgid ""
"{\n"
"    \"notify-batch\": \"/downloads/\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:138
#, markdown-text
msgid ""
"For `example.org/packages.json` containing a `monolog/monolog` package, this "
"would send a `POST` request to `example.org/downloads/` with following JSON "
"request body:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:139
#, no-wrap
msgid ""
"{\n"
"    \"downloads\": [\n"
"        {\"name\": \"monolog/monolog\", \"version\": \"1.2.1.0\"}\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:149
#, markdown-text
msgid ""
"The version field will contain the normalized representation of the version "
"number."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:151 ../doc/05-repositories.md:206
#: ../doc/05-repositories.md:224 ../doc/05-repositories.md:247
#, markdown-text
msgid "This field is optional."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:152
#, markdown-text, no-wrap
msgid "metadata-url, available-packages and available-package-patterns"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:157
#, markdown-text
msgid ""
"The `metadata-url` field allows you to provide a URL template to serve all "
"packages which are in the repository. It must contain the placeholder "
"`%package%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:163
#, markdown-text
msgid ""
"This field is new in Composer v2, and is prioritised over the "
"`provider-includes` and `providers-url` fields if both are present.  For "
"compatibility with both Composer v1 and v2 you ideally want to provide "
"both. New repository implementations may only need to support v2 however."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:166
#, no-wrap
msgid ""
"{\n"
"    \"metadata-url\": \"/p2/%package%.json\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:176
#, markdown-text
msgid ""
"Whenever Composer looks for a package, it will replace `%package%` by the "
"package name, and fetch that URL. If dev stability is allowed for the "
"package, it will also load the URL again with `$packageName~dev` (e.g.  "
"`/p2/foo/bar~dev.json` to look for `foo/bar`'s dev versions)."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:180
#, markdown-text
msgid ""
"The `foo/bar.json` and `foo/bar~dev.json` files containing package versions "
"MUST contain only versions for the foo/bar package, as "
"`{\"packages\":{\"foo/bar\":[ ... versions here ... ]}}`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:183
#, markdown-text
msgid ""
"Caching is done via the use of If-Modified-Since header, so make sure you "
"return Last-Modified headers and that they are accurate."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:191
#, markdown-text
msgid ""
"The array of versions can also optionally be minified using "
"`Composer\\MetadataMinifier\\MetadataMinifier::minify()` from "
"[composer/metadata-minifier](https://packagist.org/packages/composer/metadata-minifier).  "
"If you do that, you should add a `\"minified\": \"composer/2.0\"` key at the "
"top level to indicate to Composer it must expand the version list back into "
"the original data. See https://repo.packagist.org/p2/monolog/monolog.json "
"for an example."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:196
#, markdown-text
msgid ""
"Any requested package which does not exist MUST return a 404 status code, "
"which will indicate to Composer that this package does not exist in your "
"repository. Make sure the 404 response is fast to avoid blocking Composer.  "
"Avoid redirects to alternative 404 pages."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:204
#, markdown-text
msgid ""
"If your repository only has a small number of packages, and you want to "
"avoid the 404-requests, you can also specify an `\"available-packages\"` key "
"in `packages.json` which should be an array with all the package names that "
"your repository contains. Alternatively you can specify an "
"`\"available-package-patterns\"` key which is an array of package name "
"patterns (with `*` matching any string, e.g. `vendor/*` would make Composer "
"look up every matching package name in this repository)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:207
#, markdown-text, no-wrap
msgid "providers-api"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:212
#, markdown-text
msgid ""
"The `providers-api` field allows you to provide a URL template to serve all "
"packages which provide a given package name, but not the package which has "
"that name. It must contain the placeholder `%package%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:216
#, markdown-text
msgid ""
"For example https://packagist.org/providers/monolog/monolog.json lists some "
"package which have a \"provide\" rule for monolog/monolog, but it does not "
"list monolog/monolog itself."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:217
#, no-wrap
msgid ""
"{\n"
"    \"providers-api\": \"https://packagist.org/providers/%package%.json\",\n"
"}\n"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:225
#, markdown-text, no-wrap
msgid "list"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:231
#, markdown-text
msgid ""
"The `list` field allows you to return the names of packages which match a "
"given field (or all names if no filter is present). It should accept an "
"optional `?filter=xx` query param, which can contain `*` as wildcards "
"matching any substring."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:233
#, markdown-text
msgid "Replace/provide rules should not be considered here."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:235
#, markdown-text
msgid "It must return an array of package names:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:235
#, no-wrap
msgid ""
"{\n"
"    \"packageNames\": [\n"
"        \"a/b\",\n"
"        \"c/d\"\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:245
#, markdown-text
msgid ""
"See <https://packagist.org/packages/list.json?filter=composer/*> for "
"example."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:248
#, markdown-text, no-wrap
msgid "provider-includes and providers-url"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:253
#, markdown-text
msgid ""
"The `provider-includes` field allows you to list a set of files that list "
"package names provided by this repository. The hash should be a sha256 of "
"the files in this case."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:257
#, markdown-text
msgid ""
"The `providers-url` describes how provider files are found on the server. It "
"is an absolute path from the repository root. It must contain the "
"placeholders `%package%` and `%hash%`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:260
#, markdown-text
msgid ""
"These fields are used by Composer v1, or if your repository does not have "
"the `metadata-url` field set."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:263
#, no-wrap
msgid ""
"{\n"
"    \"provider-includes\": {\n"
"        \"providers-a.json\": {\n"
"            \"sha256\": "
"\"f5b4bc0b354108ef08614e569c1ed01a2782e67641744864a74e788982886f4c\"\n"
"        },\n"
"        \"providers-b.json\": {\n"
"            \"sha256\": "
"\"b38372163fac0573053536f5b8ef11b86f804ea8b016d239e706191203f6efac\"\n"
"        }\n"
"    },\n"
"    \"providers-url\": \"/p/%package%$%hash%.json\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:279
#, markdown-text
msgid ""
"Those files contain lists of package names and hashes to verify the file "
"integrity, for example:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:280
#, no-wrap
msgid ""
"{\n"
"    \"providers\": {\n"
"        \"acme/foo\": {\n"
"            \"sha256\": "
"\"38968de1305c2e17f4de33aea164515bc787c42c7e2d6e25948539a14268bb82\"\n"
"        },\n"
"        \"acme/bar\": {\n"
"            \"sha256\": "
"\"4dd24c930bd6e1103251306d6336ac813b563a220d9ca14f4743c032fb047233\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:298
#, markdown-text
msgid ""
"The file above declares that acme/foo and acme/bar can be found in this "
"repository, by loading the file referenced by `providers-url`, replacing "
"`%package%` by the vendor namespaced package name and `%hash%` by the sha256 "
"field. Those files themselves contain package definitions as described "
"[above](#packages)."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:301
#, markdown-text
msgid ""
"These fields are optional. You probably don't need them for your own custom "
"repository."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:302
#, markdown-text, no-wrap
msgid "cURL or stream options"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:310
#, markdown-text
msgid ""
"The repository is accessed either using cURL (Composer 2 with ext-curl "
"enabled)  or PHP streams. You can set extra options using the `options` "
"parameter. For PHP streams, you can set any valid PHP stream context "
"option. See [Context options and "
"parameters](https://php.net/manual/en/context.php) for more "
"information. When cURL is used, only a limited set of `http` and `ssl` "
"options can be configured."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:311
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"composer\",\n"
"            \"url\": \"https://example.org\",\n"
"            \"options\": {\n"
"                \"http\": {\n"
"                    \"timeout\": 60\n"
"                }\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"acme/package\": \"^1.0\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:330
#, markdown-text, no-wrap
msgid "VCS"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:335
#, markdown-text
msgid ""
"VCS stands for version control system. This includes versioning systems like "
"git, svn, fossil or hg. Composer has a repository type for installing "
"packages from these systems."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:336
#, markdown-text, no-wrap
msgid "Loading a package from a VCS repository"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:349
#, markdown-text
msgid ""
"There are a few use cases for this. The most common one is maintaining your "
"own fork of a third party library. If you are using a certain library for "
"your project, and you decide to change something in the library, you will "
"want your project to use the patched version. If the library is on GitHub "
"(this is the case most of the time), you can fork it there and push your "
"changes to your fork. After that you update the project's "
"`composer.json`. All you have to do is add your fork as a repository and "
"update the version constraint to point to your custom branch. In "
"`composer.json` only, you should prefix your custom branch name with "
"`\"dev-\"` (without making it part of the actual branch name). For version "
"constraint naming conventions see [Libraries](02-libraries.md) for more "
"information."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:351
#, markdown-text
msgid "Example assuming you patched monolog to fix a bug in the `bugfix` branch:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:352
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"https://github.com/igorw/monolog\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"dev-bugfix\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:368
#, markdown-text
msgid ""
"When you run `php composer.phar update`, you should get your modified "
"version of `monolog/monolog` instead of the one from packagist."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:375
#, markdown-text
msgid ""
"Note that you should not rename the package unless you really intend to fork "
"it in the long term, and completely move away from the original package.  "
"Composer will correctly pick your package over the original one since the "
"custom repository has priority over packagist. If you want to rename the "
"package, you should do so in the default (often master) branch and not in a "
"feature branch, since the package name is taken from the default branch."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:379
#, markdown-text
msgid ""
"Also note that the override will not work if you change the `name` property "
"in your forked repository's `composer.json` file as this needs to match the "
"original for the override to work."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:383
#, markdown-text
msgid ""
"If other dependencies rely on the package you forked, it is possible to "
"inline-alias it so that it matches a constraint that it otherwise would "
"not.  For more information [see the aliases article](articles/aliases.md)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:384
#, markdown-text, no-wrap
msgid "Using private repositories"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:388
#, markdown-text
msgid ""
"Exactly the same solution allows you to work with your private repositories "
"at GitHub and Bitbucket:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:389
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\":  \"git@bitbucket.org:vendor/my-private-repo.git\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"vendor/my-private-repo\": \"dev-master\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:404
#, markdown-text
msgid "The only requirement is the installation of SSH keys for a git client."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:405
#, markdown-text, no-wrap
msgid "Git alternatives"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:409
#, markdown-text
msgid ""
"Git is not the only version control system supported by the VCS repository.  "
"The following are supported:"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
#, markdown-text
msgid "**Git:** [git-scm.com](https://git-scm.com)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
#, markdown-text
msgid "**Subversion:** [subversion.apache.org](https://subversion.apache.org)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
#, markdown-text
msgid "**Mercurial:** [mercurial-scm.org](https://www.mercurial-scm.org)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:414
#, markdown-text
msgid "**Fossil**: [fossil-scm.org](https://www.fossil-scm.org/)"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:420
#, markdown-text
msgid ""
"To get packages from these systems you need to have their respective clients "
"installed. That can be inconvenient. And for this reason there is special "
"support for GitHub and Bitbucket that use the APIs provided by these sites, "
"to fetch the packages without having to install the version control "
"system. The VCS repository provides `dist`s for them that fetch the packages "
"as zips."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:423
#, markdown-text
msgid "**GitHub:** [github.com](https://github.com) (Git)"
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:423
#, markdown-text
msgid "**Bitbucket:** [bitbucket.org](https://bitbucket.org) (Git)"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:428
#, markdown-text
msgid ""
"The VCS driver to be used is detected automatically based on the "
"URL. However, should you need to specify one for whatever reason, you can "
"use `bitbucket`, `github`, `gitlab`, `perforce`, `fossil`, `git`, `svn` or "
"`hg` as the repository type instead of `vcs`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:433
#, markdown-text
msgid ""
"If you set the `no-api` key to `true` on a github repository it will clone "
"the repository as it would with any other git repository instead of using "
"the GitHub API. But unlike using the `git` driver directly, Composer will "
"still attempt to use github's zip files."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:438
#, markdown-text
msgid ""
"Please note: * **To let Composer choose which driver to use** the repository "
"type needs to be defined as \"vcs\" * **If you already used a private "
"repository**, this means Composer should have cloned it in cache. If you "
"want to install the same package with drivers, remember to launch the "
"command `composer clearcache` followed by the command `composer update` to "
"update Composer cache and install the package from dist.  * VCS driver "
"`git-bitbucket` is deprecated in favor of `bitbucket`"
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:439
#, markdown-text, no-wrap
msgid "Bitbucket Driver Configuration"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:442
#, markdown-text, no-wrap
msgid ""
"> **Note that the repository endpoint for Bitbucket needs to be https rather "
"than git.**\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:445
#, markdown-text
msgid ""
"After setting up your bitbucket repository, you will also need to [set up "
"authentication](articles/authentication-for-private-packages.md#bitbucket-oauth)."
msgstr ""

#. type: Title ####
#: ../doc/05-repositories.md:446
#, markdown-text, no-wrap
msgid "Subversion Options"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:453
#, markdown-text
msgid ""
"Since Subversion has no native concept of branches and tags, Composer "
"assumes by default that code is located in `$url/trunk`, `$url/branches` and "
"`$url/tags`. If your repository has a different layout you can change those "
"values. For example if you used capitalized names you could configure the "
"repository like this:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:454
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"http://svn.example.org/projectA/\",\n"
"            \"trunk-path\": \"Trunk\",\n"
"            \"branches-path\": \"Branches\",\n"
"            \"tags-path\": \"Tags\"\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:470
#, markdown-text
msgid ""
"If you have no branches or tags directory you can disable them entirely by "
"setting the `branches-path` or `tags-path` to `false`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:475
#, markdown-text
msgid ""
"If the package is in a subdirectory, e.g. `/trunk/foo/bar/composer.json` and "
"`/tags/1.0/foo/bar/composer.json`, then you can make Composer access it by "
"setting the `\"package-path\"` option to the sub-directory, in this example "
"it would be `\"package-path\": \"foo/bar/\"`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:478
#, markdown-text
msgid ""
"If you have a private Subversion repository you can save credentials in the "
"http-basic section of your config (See [Schema](04-schema.md)):"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:479
#, no-wrap
msgid ""
"{\n"
"    \"http-basic\": {\n"
"        \"svn.example.org\": {\n"
"            \"username\": \"username\",\n"
"            \"password\": \"password\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:494
#, markdown-text
msgid ""
"If your Subversion client is configured to store credentials by default "
"these credentials will be saved for the current user and existing saved "
"credentials for this server will be overwritten. To change this behavior by "
"setting the `\"svn-cache-credentials\"` option in your repository "
"configuration:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:495
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"vcs\",\n"
"            \"url\": \"http://svn.example.org/projectA/\",\n"
"            \"svn-cache-credentials\": false\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:512
#, markdown-text
msgid ""
"If you want to use a project that does not support Composer through any of "
"the means above, you still can define the package yourself by using a "
"`package` repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:517
#, markdown-text
msgid ""
"Basically, you define the same information that is included in the "
"`composer` repository's `packages.json`, but only for a single "
"package. Again, the minimum required fields are `name`, `version`, and "
"either of `dist` or `source`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:519
#, markdown-text
msgid "Here is an example for the smarty template engine:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:520
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": {\n"
"                \"name\": \"smarty/smarty\",\n"
"                \"version\": \"3.1.7\",\n"
"                \"dist\": {\n"
"                    \"url\": "
"\"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n"
"                    \"type\": \"zip\"\n"
"                },\n"
"                \"source\": {\n"
"                    \"url\": \"http://smarty-php.googlecode.com/svn/\",\n"
"                    \"type\": \"svn\",\n"
"                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n"
"                },\n"
"                \"autoload\": {\n"
"                    \"classmap\": [\"libs/\"]\n"
"                }\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"smarty/smarty\": \"3.1.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:550
#, markdown-text
msgid "Typically, you would leave the source part off, as you don't really need it."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:558
#, markdown-text, no-wrap
msgid ""
"> **Note**: This repository type has a few limitations and should be "
"avoided\n"
"> whenever possible:\n"
">\n"
"> - Composer will not update the package unless you change the `version` "
"field.\n"
"> - Composer will not update the commit references, so if you use `master` "
"as\n"
">   reference you will have to delete the package to force an update, and "
"will\n"
">   have to deal with an unstable lock file.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:560
#, markdown-text
msgid ""
"The `\"package\"` key in a `package` repository may be set to an array to "
"define multiple versions of a package:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:561
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"package\",\n"
"            \"package\": [\n"
"                {\n"
"                    \"name\": \"foo/bar\",\n"
"                    \"version\": \"1.0.0\",\n"
"                    ...\n"
"                },\n"
"                {\n"
"                    \"name\": \"foo/bar\",\n"
"                    \"version\": \"2.0.0\",\n"
"                    ...\n"
"                }\n"
"            ]\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:583
#, markdown-text, no-wrap
msgid "Hosting your own"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:587
#, markdown-text
msgid ""
"While you will probably want to put your packages on packagist most of the "
"time, there are some use cases for hosting your own repository."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:590
#, markdown-text
msgid ""
"**Private company packages:** If you are part of a company that uses "
"Composer for their packages internally, you might want to keep those "
"packages private."
msgstr ""

#. type: Bullet: '* '
#: ../doc/05-repositories.md:595
#, markdown-text
msgid ""
"**Separate ecosystem:** If you have a project which has its own ecosystem, "
"and the packages aren't really reusable by the greater PHP community, you "
"might want to keep them separate to packagist. An example of this would be "
"WordPress plugins."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:598
#, markdown-text
msgid ""
"For hosting your own packages, a native `composer` type of repository is "
"recommended, which provides the best performance."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:600
#, markdown-text
msgid "There are a few tools that can help you create a `composer` repository."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:601
#, markdown-text, no-wrap
msgid "Private Packagist"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:606
#, markdown-text
msgid ""
"[Private Packagist](https://packagist.com/) is a hosted or self-hosted "
"application providing private package hosting as well as mirroring of "
"GitHub, Packagist.org and other package repositories."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:608
#, markdown-text
msgid "Check out [Packagist.com](https://packagist.com/) for more information."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:609
#, markdown-text, no-wrap
msgid "Satis"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:613
#, markdown-text
msgid ""
"Satis is a static `composer` repository generator. It is a bit like an "
"ultra- lightweight, static file-based version of packagist."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:617
#, markdown-text
msgid ""
"You give it a `composer.json` containing repositories, typically VCS and "
"package repository definitions. It will fetch all the packages that are "
"`require`d and dump a `packages.json` that is your `composer` repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:621
#, markdown-text
msgid ""
"Check [the satis GitHub repository](https://github.com/composer/satis) and "
"the [handling private packages "
"article](articles/handling-private-packages.md) for more information."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:622
#, markdown-text, no-wrap
msgid "Artifact"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:630
#, markdown-text
msgid ""
"There are some cases, when there is no ability to have one of the previously "
"mentioned repository types online, even the VCS one. A typical example could "
"be cross-organisation library exchange through build artifacts. Of course, "
"most of the time these are private. To use these archives as-is, one can use "
"a repository of type `artifact` with a folder containing ZIP or TAR archives "
"of those private packages:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:631
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"artifact\",\n"
"            \"url\": \"path/to/directory/with/zips/\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"private-vendor-one/core\": \"15.6.2\",\n"
"        \"private-vendor-two/connectivity\": \"*\",\n"
"        \"acme-corp/parser\": \"10.3.5\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:648
#, markdown-text
msgid "Each zip artifact is a ZIP archive with `composer.json` in root folder:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/05-repositories.md:649
#, no-wrap
msgid "unzip -l acme-corp-parser-10.3.5.zip\n"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/05-repositories.md:652
#, no-wrap
msgid ""
"composer.json\n"
"...\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:661
#, markdown-text
msgid ""
"If there are two archives with different versions of a package, they are "
"both imported. When an archive with a newer version is added in the artifact "
"folder and you run `update`, that version will be imported as well and "
"Composer will update to the latest version."
msgstr ""

#. type: Title ###
#: ../doc/05-repositories.md:662
#, markdown-text, no-wrap
msgid "Path"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:667
#, markdown-text
msgid ""
"In addition to the artifact repository, you can use the path one, which "
"allows you to depend on a local directory, either absolute or relative. This "
"can be especially useful when dealing with monolithic repositories."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:669
#, markdown-text
msgid ""
"For instance, if you have the following directory structure in your "
"repository:"
msgstr ""

#. type: Fenced code block (text)
#: ../doc/05-repositories.md:669
#, no-wrap
msgid ""
"...\n"
"├── apps\n"
"│   └── my-app\n"
"│       └── composer.json\n"
"├── packages\n"
"│   └── my-package\n"
"│       └── composer.json\n"
"...\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:682
#, markdown-text
msgid ""
"Then, to add the package `my/package` as a dependency, in your "
"`apps/my-app/composer.json` file, you can use the following configuration:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:683
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\"\n"
"        }\n"
"    ],\n"
"    \"require\": {\n"
"        \"my/package\": \"*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:701
#, markdown-text
msgid ""
"If the package is a local VCS repository, the version may be inferred by the "
"branch or tag that is currently checked out. Otherwise, the version should "
"be explicitly defined in the package's `composer.json` file. If the version "
"cannot be resolved by these means, it is assumed to be `dev-master`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:705
#, markdown-text
msgid ""
"When the version cannot be inferred from the local VCS repository, or when "
"you want to override the version, you can use the `versions` option when "
"declaring the repository:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:706
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\",\n"
"            \"options\": {\n"
"                \"versions\": {\n"
"                    \"my/package\": \"4.2-dev\"\n"
"                }\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:726
#, markdown-text
msgid ""
"The local package will be symlinked if possible, in which case the output in "
"the console will read `Symlinking from ../../packages/my-package`. If "
"symlinking is _not_ possible the package will be copied. In that case, the "
"console will output `Mirrored from ../../packages/my-package`."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:731
#, markdown-text
msgid ""
"Instead of default fallback strategy you can force to use symlink with "
"`\"symlink\": true` or mirroring with `\"symlink\": false` option. Forcing "
"mirroring can be useful when deploying or generating package from a "
"monolithic repository."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:735
#, markdown-text, no-wrap
msgid ""
"> **Note:** On Windows, directory symlinks are implemented using NTFS "
"junctions\n"
"> because they can be created by non-admin users. Mirroring will always be "
"used\n"
"> on versions below Windows 7 or if `proc_open` has been disabled.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:736
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\",\n"
"            \"options\": {\n"
"                \"symlink\": false\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:755
#, markdown-text, no-wrap
msgid ""
"Leading tildes are expanded to the current user's home folder, and "
"environment\n"
"variables are parsed in both Windows and Linux/Mac notations. For example\n"
"`~/git/mypackage` will automatically load the mypackage clone from\n"
"`/home/<username>/git/mypackage`, equivalent to `$HOME/git/mypackage` or\n"
"`%USERPROFILE%/git/mypackage`.\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:758
#, markdown-text, no-wrap
msgid ""
"> **Note:** Repository paths can also contain wildcards like `*` and `?`.\n"
"> For details, see the [PHP glob function](https://php.net/glob).\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:761
#, markdown-text
msgid ""
"You can configure the way the package's dist reference (which appears in the "
"composer.lock file) is built."
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:769
#, markdown-text, no-wrap
msgid ""
"The following modes exist:\n"
"- `none` - reference will be always null. This can help reduce lock file "
"conflicts\n"
"  in the lock file but reduces clarity as to when the last update happened "
"and whether\n"
"  the package is in the latest state.\n"
"- `config` - reference is built based on a hash of the package's "
"composer.json and repo config\n"
"- `auto` (used by default) - reference is built basing on the hash like with "
"`config`, but if\n"
"  the package folder contains a git repository, the HEAD commit's hash is "
"used as reference instead.\n"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:770
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"type\": \"path\",\n"
"            \"url\": \"../../packages/my-package\",\n"
"            \"options\": {\n"
"                \"reference\": \"config\"\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../doc/05-repositories.md:784
#, markdown-text, no-wrap
msgid "Disabling Packagist.org"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:788
#, markdown-text
msgid ""
"You can disable the default Packagist.org repository by adding this to your "
"`composer.json`:"
msgstr ""

#. type: Fenced code block (json)
#: ../doc/05-repositories.md:789
#, no-wrap
msgid ""
"{\n"
"    \"repositories\": [\n"
"        {\n"
"            \"packagist.org\": false\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:800
#, markdown-text
msgid "You can disable Packagist.org globally by using the global config flag:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/05-repositories.md:801
#, no-wrap
msgid "php composer.phar config -g repo.packagist false\n"
msgstr ""

#. type: Plain text
#: ../doc/05-repositories.md:805
#, markdown-text
msgid "&larr; [Schema](04-schema.md)  | [Config](06-config.md) &rarr;"
msgstr ""

#. type: Title #
#: ../doc/08-community.md:1
#, markdown-text, no-wrap
msgid "Community"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:5
#, markdown-text
msgid ""
"There are many people using Composer already, and quite a few of them are "
"contributing."
msgstr ""

#. type: Title ##
#: ../doc/08-community.md:6
#, markdown-text, no-wrap
msgid "Contributing"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:12
#, markdown-text
msgid ""
"If you would like to contribute to Composer, please read the "
"[README](https://github.com/composer/composer) and "
"[CONTRIBUTING](https://github.com/composer/composer/blob/main/.github/CONTRIBUTING.md)  "
"documents."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:14
#, markdown-text
msgid "The most important guidelines are described as follows:"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:23
#, markdown-text, no-wrap
msgid ""
"> All code contributions - including those of people having commit access - "
"must\n"
"> go through a pull request and approved by a core developer before being\n"
"> merged. This is to ensure proper review of all the code.\n"
">\n"
"> Fork the project, create a feature branch, and send us a pull request.\n"
">\n"
"> To ensure a consistent code base, you should make sure the code follows\n"
"> the [PSR-12 Coding Standards](https://www.php-fig.org/psr/psr-12/).\n"
msgstr ""

#. type: Title ##
#: ../doc/08-community.md:24
#, markdown-text, no-wrap
msgid "Support"
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:27
#, markdown-text
msgid ""
"The IRC channel is on irc.libera.chat: "
"[#composer](ircs://irc.libera.chat:6697/composer)."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:31
#, markdown-text
msgid ""
"[Stack Overflow](https://stackoverflow.com/questions/tagged/composer-php) "
"and [GitHub Discussions](https://github.com/composer/composer/discussions) "
"both have a collection of Composer related questions."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:34
#, markdown-text
msgid ""
"For paid support, we do provide Composer-related support via chat and email "
"to [Private Packagist](https://packagist.com) customers."
msgstr ""

#. type: Plain text
#: ../doc/08-community.md:36
#, markdown-text
msgid "&larr; [Runtime](07-runtime.md)"
msgstr ""
