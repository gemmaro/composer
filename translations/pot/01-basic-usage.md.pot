# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-01-14 16:11+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: ../doc/00-intro.md:1 ../doc/01-basic-usage.md:3
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Title #
#: ../doc/01-basic-usage.md:1
#, no-wrap
msgid "Basic usage"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:8
msgid ""
"For our basic usage introduction, we will be installing `monolog/monolog`, a "
"logging library. If you have not yet installed Composer, refer to the [Intro]"
"(00-intro.md) chapter."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:11
#, no-wrap
msgid ""
"> **Note:** for the sake of simplicity, this introduction will assume you\n"
"> have performed a [local](00-intro.md#locally) install of Composer.\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:12
#, no-wrap
msgid "`composer.json`: Project setup"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:20
msgid ""
"To start using Composer in your project, all you need is a `composer.json` "
"file. This file describes the dependencies of your project and may contain "
"other metadata as well. It typically should go in the top-most directory of "
"your project/VCS repository. You can technically run Composer anywhere but "
"if you want to publish a package to Packagist.org, it will have to be able "
"to find the file at the top of your VCS repository."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:21
#, no-wrap
msgid "The `require` key"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:26
msgid ""
"The first thing you specify in `composer.json` is the [`require`](04-schema."
"md#require) key. You are telling Composer which packages your project "
"depends on."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:27
#, no-wrap
msgid ""
"{\n"
"    \"require\": {\n"
"        \"monolog/monolog\": \"2.0.*\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:38
msgid ""
"As you can see, [`require`](04-schema.md#require) takes an object that maps "
"**package names** (e.g. `monolog/monolog`) to **version constraints** (e.g.  "
"`1.0.*`)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:46
msgid ""
"Composer uses this information to search for the right set of files in "
"package \"repositories\" that you register using the [`repositories`](04-"
"schema.md#repositories)  key, or in [Packagist.org](https://packagist.org), "
"the default package repository.  In the above example, since no other "
"repository has been registered in the `composer.json` file, it is assumed "
"that the `monolog/monolog` package is registered on Packagist.org. (Read "
"more [about Packagist](#packagist), and [about repositories](05-repositories."
"md))."
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:47
#, no-wrap
msgid "Package names"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:53
msgid ""
"The package name consists of a vendor name and the project's name. Often "
"these will be identical - the vendor name only exists to prevent naming "
"clashes. For example, it would allow two different people to create a "
"library named `json`.  One might be named `igorw/json` while the other might "
"be `seldaek/json`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:58
msgid ""
"Read more about [publishing packages and package naming](02-libraries.md).  "
"(Note that you can also specify \"platform packages\" as dependencies, "
"allowing you to require certain versions of server software. See [platform "
"packages](#platform-packages) below.)"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:59
#, no-wrap
msgid "Package version constraints"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:65
#, no-wrap
msgid ""
"In our example, we are requesting the Monolog package with the version constraint\n"
"[`2.0.*`](https://semver.mwl.be/#?package=monolog%2Fmonolog&version=2.0.*).\n"
"This means any version in the `2.0` development branch, or any version that is\n"
"greater than or equal to 2.0 and less than 2.1 (`>=2.0 <2.1`).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:68
msgid ""
"Please read [versions](articles/versions.md) for more in-depth information "
"on versions, how versions relate to each other, and on version constraints."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:80
#, no-wrap
msgid ""
"> **How does Composer download the right files?** When you specify a dependency in\n"
"> `composer.json`, Composer first takes the name of the package that you have requested\n"
"> and searches for it in any repositories that you have registered using the\n"
"> [`repositories`](04-schema.md#repositories) key. If you have not registered\n"
"> any extra repositories, or it does not find a package with that name in the\n"
"> repositories you have specified, it falls back to Packagist.org (more [below](#packagist)).\n"
">\n"
"> When Composer finds the right package, either in Packagist.org or in a repo you have specified,\n"
"> it then uses the versioning features of the package's VCS (i.e., branches and tags)\n"
"> to attempt to find the best match for the version constraint you have specified. Be sure to read\n"
"> about versions and package resolution in the [versions article](articles/versions.md).\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:89
#, no-wrap
msgid ""
"> **Note:** If you are trying to require a package but Composer throws an error\n"
"> regarding package stability, the version you have specified may not meet your\n"
"> default minimum stability requirements. By default, only stable releases are taken\n"
"> into consideration when searching for valid package versions in your VCS.\n"
">\n"
"> You might run into this if you are trying to require dev, alpha, beta, or RC\n"
"> versions of a package. Read more about stability flags and the `minimum-stability`\n"
"> key on the [schema page](04-schema.md).\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:90
#, no-wrap
msgid "Installing dependencies"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:94
msgid ""
"To initially install the defined dependencies for your project, you should "
"run the [`update`](03-cli.md#update-u) command."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:95 ../doc/01-basic-usage.md:163
#: ../doc/03-cli.md:145
#, no-wrap
msgid "php composer.phar update\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:100
msgid "This will make Composer do two things:"
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
msgid ""
"It resolves all dependencies listed in your `composer.json` file and writes "
"all of the packages and their exact versions to the `composer.lock` file, "
"locking the project to those specific versions. You should commit the "
"`composer.lock` file to your project repo so that all people working on the "
"project are locked to the same versions of dependencies (more below). This "
"is the main role of the `update` command."
msgstr ""

#. type: Bullet: '- '
#: ../doc/01-basic-usage.md:112
msgid ""
"It then implicitly runs the [`install`](03-cli.md#install-i) command. This "
"will download the dependencies' files into the `vendor` directory in your "
"project. (The `vendor` directory is the conventional location for all third-"
"party code in a project). In our example from above, you would end up with "
"the Monolog source files in `vendor/monolog/monolog/`. As Monolog has a "
"dependency on `psr/log`, that package's files can also be found inside "
"`vendor/`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:116
#, no-wrap
msgid ""
"> **Tip:** If you are using git for your project, you probably want to add\n"
"> `vendor` in your `.gitignore`. You really don't want to add all of that\n"
"> third-party code to your versioned repository.\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:117
#, no-wrap
msgid "Commit your `composer.lock` file to version control"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:128
msgid ""
"Committing this file to version control is important because it will cause "
"anyone who sets up the project to use the exact same versions of the "
"dependencies that you are using. Your CI server, production machines, other "
"developers in your team, everything and everyone runs on the same "
"dependencies, which mitigates the potential for bugs affecting only some "
"parts of the deployments. Even if you develop alone, in six months when "
"reinstalling the project you can feel confident the dependencies installed "
"are still working even if your dependencies released many new versions since "
"then.  (See note below about using the `update` command.)"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:131
#, no-wrap
msgid ""
"> **Note:** For libraries it is not necessary to commit the lock\n"
"> file, see also: [Libraries - Lock file](02-libraries.md#lock-file).\n"
msgstr ""

#. type: Title ###
#: ../doc/01-basic-usage.md:132
#, no-wrap
msgid "Installing from `composer.lock`"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:137
msgid ""
"If there is already a `composer.lock` file in the project folder, it means "
"either you ran the `update` command before, or someone else on the project "
"ran the `update` command and committed the `composer.lock` file to the "
"project (which is good)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:146
msgid ""
"Either way, running `install` when a `composer.lock` file is present "
"resolves and installs all dependencies that you listed in `composer.json`, "
"but Composer uses the exact versions listed in `composer.lock` to ensure "
"that the package versions are consistent for everyone working on your "
"project. As a result you will have all dependencies requested by your "
"`composer.json` file, but they may not all be at the very latest available "
"versions (some of the dependencies listed in the `composer.lock` file may "
"have released newer versions since the file was created). This is by design, "
"it ensures that your project does not break because of unexpected changes in "
"dependencies."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:150
msgid ""
"So after fetching new changes from your VCS repository it is recommended to "
"run a Composer `install` to make sure the vendor directory is up in sync "
"with your `composer.lock` file."
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:151 ../doc/03-cli.md:86
#, no-wrap
msgid "php composer.phar install\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:155
#, no-wrap
msgid "Updating dependencies to their latest versions"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:162
msgid ""
"As mentioned above, the `composer.lock` file prevents you from automatically "
"getting the latest versions of your dependencies. To update to the latest "
"versions, use the [`update`](03-cli.md#update-u) command. This will fetch "
"the latest matching versions (according to your `composer.json` file) and "
"update the lock file with the new versions."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:170
#, no-wrap
msgid ""
"> **Note:** Composer will display a Warning when executing an `install` command\n"
"> if the `composer.lock` has not been updated since changes were made to the\n"
"> `composer.json` that might affect dependency resolution.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:172
msgid ""
"If you only want to install, upgrade or remove one dependency, you can "
"explicitly list it as an argument:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:173
#, no-wrap
msgid "php composer.phar update monolog/monolog [...]\n"
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:177
#, no-wrap
msgid "Packagist"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:184
msgid ""
"[Packagist.org](https://packagist.org/) is the main Composer repository. A "
"Composer repository is basically a package source: a place where you can get "
"packages from. Packagist aims to be the central repository that everybody "
"uses. This means that you can automatically `require` any package that is "
"available there, without further specifying where Composer should look for "
"the package."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:187
msgid ""
"If you go to the [Packagist.org website](https://packagist.org/), you can "
"browse and search for packages."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:191
msgid ""
"Any open source project using Composer is recommended to publish their "
"packages on Packagist. A library does not need to be on Packagist to be used "
"by Composer, but it enables discovery and adoption by other developers more "
"quickly."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:192
#, no-wrap
msgid "Platform packages"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:197
msgid ""
"Composer has platform packages, which are virtual packages for things that "
"are installed on the system but are not actually installable by Composer. "
"This includes PHP itself, PHP extensions and some system libraries."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:201
msgid ""
"`php` represents the PHP version of the user, allowing you to apply "
"constraints, e.g. `^7.1`. To require a 64bit version of php, you can require "
"the `php-64bit` package."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:204
msgid ""
"`hhvm` represents the version of the HHVM runtime and allows you to apply a "
"constraint, e.g., `^2.3`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:209
msgid ""
"`ext-<name>` allows you to require PHP extensions (includes core "
"extensions). Versioning can be quite inconsistent here, so it's often a good "
"idea to set the constraint to `*`.  An example of an extension package name "
"is `ext-gd`."
msgstr ""

#. type: Bullet: '* '
#: ../doc/01-basic-usage.md:213
msgid ""
"`lib-<name>` allows constraints to be made on versions of libraries used by "
"PHP. The following are available: `curl`, `iconv`, `icu`, `libxml`, "
"`openssl`, `pcre`, `uuid`, `xsl`."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:216
msgid ""
"You can use [`show --platform`](03-cli.md#show) to get a list of your "
"locally available platform packages."
msgstr ""

#. type: Title ##
#: ../doc/01-basic-usage.md:217
#, no-wrap
msgid "Autoloading"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:222
msgid ""
"For libraries that specify autoload information, Composer generates a "
"`vendor/autoload.php` file. You can include this file and start using the "
"classes that those libraries provide without any extra work:"
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:223
#, no-wrap
msgid ""
"require __DIR__ . '/vendor/autoload.php';\n"
"\n"
"$log = new Monolog\\Logger('name');\n"
"$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n"
"$log->warning('Foo');\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:233
msgid ""
"You can even add your own code to the autoloader by adding an [`autoload`]"
"(04-schema.md#autoload) field to `composer.json`."
msgstr ""

#. type: Fenced code block (json)
#: ../doc/01-basic-usage.md:234
#, no-wrap
msgid ""
"{\n"
"    \"autoload\": {\n"
"        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:244
msgid ""
"Composer will register a [PSR-4](https://www.php-fig.org/psr/psr-4/) "
"autoloader for the `Acme` namespace."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:248
msgid ""
"You define a mapping from namespaces to directories. The `src` directory "
"would be in your project root, on the same level as the `vendor` directory. "
"An example filename would be `src/Foo.php` containing an `Acme\\Foo` class."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:251
msgid ""
"After adding the [`autoload`](04-schema.md#autoload) field, you have to re-"
"run this command:"
msgstr ""

#. type: Fenced code block (shell)
#: ../doc/01-basic-usage.md:252
#, no-wrap
msgid "php composer.phar dump-autoload\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:259
msgid ""
"This command will re-generate the `vendor/autoload.php` file.  See the "
"[`dump-autoload`](03-cli.md#dump-autoload-dumpautoload-) section for more "
"information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:263
msgid ""
"Including that file will also return the autoloader instance, so you can "
"store the return value of the include call in a variable and add more "
"namespaces.  This can be useful for autoloading classes in a test suite, for "
"example."
msgstr ""

#. type: Fenced code block (php)
#: ../doc/01-basic-usage.md:264
#, no-wrap
msgid ""
"$loader = require __DIR__ . '/vendor/autoload.php';\n"
"$loader->addPsr4('Acme\\\\Test\\\\', __DIR__);\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:272
msgid ""
"In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and "
"files autoloading. See the [`autoload`](04-schema.md#autoload) reference for "
"more information."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:274
msgid ""
"See also the docs on [optimizing the autoloader](articles/autoloader-"
"optimization.md)."
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:278
#, no-wrap
msgid ""
"> **Note:** Composer provides its own autoloader. If you don't want to use that\n"
"> one, you can include `vendor/composer/autoload_*.php` files, which return\n"
"> associative arrays allowing you to configure your own autoloader.\n"
msgstr ""

#. type: Plain text
#: ../doc/01-basic-usage.md:279
msgid "&larr; [Intro](00-intro.md)  | [Libraries](02-libraries.md) &rarr;"
msgstr ""
